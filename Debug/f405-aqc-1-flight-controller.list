
f405-aqc-1-flight-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08012ff8  08012ff8  00022ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013458  08013458  00030488  2**0
                  CONTENTS
  4 .ARM          00000008  08013458  08013458  00023458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013460  08013460  00030488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013460  08013460  00023460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013464  08013464  00023464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000488  20000000  08013468  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030488  2**0
                  CONTENTS
 10 .bss          00002194  20000488  20000488  00030488  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000261c  2000261c  00030488  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030488  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000304b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d983  00000000  00000000  000304fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005c3d  00000000  00000000  0005de7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002728  00000000  00000000  00063ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001def  00000000  00000000  000661e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027110  00000000  00000000  00067fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002d510  00000000  00000000  0008f0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6278  00000000  00000000  000bc5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b600  00000000  00000000  00192870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0019de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000488 	.word	0x20000488
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012fdc 	.word	0x08012fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000048c 	.word	0x2000048c
 80001cc:	08012fdc 	.word	0x08012fdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <blink_led>:
 *
 * @param  hz		frequency to blink led
 * @retval None
 */
void blink_led(uint16_t hz)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	uint32_t time, interval_us;
	static uint32_t prev_time;

	time = get_timestamp();
 8000f4e:	f000 f875 	bl	800103c <get_timestamp>
 8000f52:	60f8      	str	r0, [r7, #12]
	interval_us = time - prev_time;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <blink_led+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	60bb      	str	r3, [r7, #8]

	if (interval_us > HZ_TO_INTERVAL_US(hz))
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <blink_led+0x44>)
 8000f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d906      	bls.n	8000f7c <blink_led+0x38>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <blink_led+0x48>)
 8000f72:	f004 f822 	bl	8004fba <HAL_GPIO_TogglePin>
		prev_time = time;
 8000f76:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <blink_led+0x40>)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6013      	str	r3, [r2, #0]
	}

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200004a4 	.word	0x200004a4
 8000f88:	000f4240 	.word	0x000f4240
 8000f8c:	40020800 	.word	0x40020800

08000f90 <toggle_led>:
 *
 * @param  request	on/off request
 * @retval None
 */
void toggle_led(uint8_t request)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	uint8_t led_request, led_status;
	led_request = request;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	73fb      	strb	r3, [r7, #15]
	led_status = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <toggle_led+0x34>)
 8000fa2:	f003 ffd9 	bl	8004f58 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73bb      	strb	r3, [r7, #14]

	if (led_request != led_status)
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d003      	beq.n	8000fba <toggle_led+0x2a>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <toggle_led+0x34>)
 8000fb6:	f004 f800 	bl	8004fba <HAL_GPIO_TogglePin>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40020800 	.word	0x40020800

08000fc8 <led_status>:
 *
 * @param  status	ready, waiting, or error status
 * @retval None
 */
void led_status(uint8_t status)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	switch(status) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d00e      	beq.n	8000ff6 <led_status+0x2e>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	dc10      	bgt.n	8000ffe <led_status+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <led_status+0x1e>
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d004      	beq.n	8000fee <led_status+0x26>
 8000fe4:	e00b      	b.n	8000ffe <led_status+0x36>
		case READY:
			toggle_led(ON); //solid for ready
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff ffd2 	bl	8000f90 <toggle_led>
			break;
 8000fec:	e00b      	b.n	8001006 <led_status+0x3e>

		case ERROR:
			blink_led(1); 	//1 Hz for error
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff ffa8 	bl	8000f44 <blink_led>
			break;
 8000ff4:	e007      	b.n	8001006 <led_status+0x3e>

		case WAITING:
			blink_led(5); 	//5 Hz for waiting
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f7ff ffa4 	bl	8000f44 <blink_led>
			break;
 8000ffc:	e003      	b.n	8001006 <led_status+0x3e>

		default:
			toggle_led(OFF);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ffc6 	bl	8000f90 <toggle_led>
			break;
 8001004:	bf00      	nop
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <delay>:
 *
 * @param  ms       delay in ms
 * @retval None
 */
void delay(uint32_t ms)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f003 f92e 	bl	8004278 <HAL_Delay>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <start_timer>:
 *
 * @param  htim		pointer to HAL timer struct
 * @retval None
 */
void start_timer(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f008 f9e1 	bl	80093f4 <HAL_TIM_Base_Start>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <get_timestamp>:
 *
 * @param  None
 * @retval 			program runtime in us
 */
uint32_t get_timestamp(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
	static uint32_t timestamp;
	uint16_t dt, count, ref_clk_mhz;

	/* Determine Reference Clock Freq */
	ref_clk_mhz = APB1_CLK_FREQ_MHZ/(htim6.Init.Prescaler + 1);
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <get_timestamp+0x4c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	2254      	movs	r2, #84	; 0x54
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	80fb      	strh	r3, [r7, #6]

	/* Get Counter Value */
	count = __HAL_TIM_GET_COUNTER(&htim6);
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <get_timestamp+0x4c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	80bb      	strh	r3, [r7, #4]

	/* Determine Timestep Since Last Call */
	dt = count / (ref_clk_mhz);
 8001058:	88ba      	ldrh	r2, [r7, #4]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001060:	807b      	strh	r3, [r7, #2]

	/* Add Timestep to Running Total */
	timestamp += dt;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <get_timestamp+0x50>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4413      	add	r3, r2
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <get_timestamp+0x50>)
 800106c:	6013      	str	r3, [r2, #0]

	/* Reset Counter */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <get_timestamp+0x4c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

	return timestamp;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <get_timestamp+0x50>)
 8001078:	681b      	ldr	r3, [r3, #0]
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000071c 	.word	0x2000071c
 800108c:	200004a8 	.word	0x200004a8

08001090 <lsm6dsox_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	460b      	mov	r3, r1
 800109e:	72fb      	strb	r3, [r7, #11]
 80010a0:	4613      	mov	r3, r2
 80010a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685c      	ldr	r4, [r3, #4]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6898      	ldr	r0, [r3, #8]
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	7af9      	ldrb	r1, [r7, #11]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	47a0      	blx	r4
 80010b4:	6178      	str	r0, [r7, #20]
  return ret;
 80010b6:	697b      	ldr	r3, [r7, #20]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <lsm6dsox_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	461a      	mov	r2, r3
 80010cc:	460b      	mov	r3, r1
 80010ce:	72fb      	strb	r3, [r7, #11]
 80010d0:	4613      	mov	r3, r2
 80010d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681c      	ldr	r4, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	893b      	ldrh	r3, [r7, #8]
 80010de:	7af9      	ldrb	r1, [r7, #11]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	47a0      	blx	r4
 80010e4:	6178      	str	r0, [r7, #20]
  return ret;
 80010e6:	697b      	ldr	r3, [r7, #20]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <lsm6dsox_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dsox_from_fs2_to_mg(int16_t lsb)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800111c <lsm6dsox_from_fs2_to_mg+0x2c>
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	3d79db23 	.word	0x3d79db23

08001120 <lsm6dsox_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) *35.0f;
}

float_t lsm6dsox_from_fs2000_to_mdps(int16_t lsb)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) *70.0f;
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800114c <lsm6dsox_from_fs2000_to_mdps+0x2c>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	428c0000 	.word	0x428c0000

08001150 <lsm6dsox_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_fs_xl_t val)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t*)&reg, 1);
 800115c:	f107 0208 	add.w	r2, r7, #8
 8001160:	2301      	movs	r3, #1
 8001162:	2110      	movs	r1, #16
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff93 	bl	8001090 <lsm6dsox_read_reg>
 800116a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10f      	bne.n	8001192 <lsm6dsox_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	b2da      	uxtb	r2, r3
 800117a:	7a3b      	ldrb	r3, [r7, #8]
 800117c:	f362 0383 	bfi	r3, r2, #2, #2
 8001180:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t*)&reg, 1);
 8001182:	f107 0208 	add.w	r2, r7, #8
 8001186:	2301      	movs	r3, #1
 8001188:	2110      	movs	r1, #16
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff98 	bl	80010c0 <lsm6dsox_write_reg>
 8001190:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <lsm6dsox_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsox_odr_xl_t val)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	75fb      	strb	r3, [r7, #23]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fcbd 	bl	8001b32 <lsm6dsox_fsm_enable_get>
 80011b8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 80c4 	bne.w	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80011c2:	7b3b      	ldrb	r3, [r7, #12]
 80011c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011d0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80011d6:	7b3b      	ldrb	r3, [r7, #12]
 80011d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80011dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80011de:	4313      	orrs	r3, r2
 80011e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80011e2:	7b3b      	ldrb	r3, [r7, #12]
 80011e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80011e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80011f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80011fa:	7b3b      	ldrb	r3, [r7, #12]
 80011fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001200:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001202:	4313      	orrs	r3, r2
 8001204:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001206:	7b3b      	ldrb	r3, [r7, #12]
 8001208:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800120c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800120e:	4313      	orrs	r3, r2
 8001210:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001218:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800121a:	4313      	orrs	r3, r2
 800121c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001224:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001226:	4313      	orrs	r3, r2
 8001228:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800122a:	7b7b      	ldrb	r3, [r7, #13]
 800122c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001230:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001232:	4313      	orrs	r3, r2
 8001234:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800123c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800123e:	4313      	orrs	r3, r2
 8001240:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001248:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800124e:	7b7b      	ldrb	r3, [r7, #13]
 8001250:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001254:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001256:	4313      	orrs	r3, r2
 8001258:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001260:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001262:	4313      	orrs	r3, r2
 8001264:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800126c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800126e:	4313      	orrs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001278:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800127a:	4313      	orrs	r3, r2
 800127c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800127e:	2b01      	cmp	r3, #1
 8001280:	d163      	bne.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>

      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8001282:	f107 030b 	add.w	r3, r7, #11
 8001286:	4619      	mov	r1, r3
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fc73 	bl	8001b74 <lsm6dsox_fsm_data_rate_get>
 800128e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d159      	bne.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d853      	bhi.n	8001344 <lsm6dsox_xl_data_rate_set+0x1a8>
 800129c:	a201      	add	r2, pc, #4	; (adr r2, 80012a4 <lsm6dsox_xl_data_rate_set+0x108>)
 800129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a2:	bf00      	nop
 80012a4:	080012b5 	.word	0x080012b5
 80012a8:	080012c7 	.word	0x080012c7
 80012ac:	080012e5 	.word	0x080012e5
 80012b0:	0800130f 	.word	0x0800130f
          case LSM6DSOX_ODR_FSM_12Hz5:

            if (val == LSM6DSOX_XL_ODR_OFF){
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <lsm6dsox_xl_data_rate_set+0x124>
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80012be:	e044      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	75fb      	strb	r3, [r7, #23]
            break;
 80012c4:	e041      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
          case LSM6DSOX_ODR_FSM_26Hz:

            if (val == LSM6DSOX_XL_ODR_OFF){
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <lsm6dsox_xl_data_rate_set+0x136>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80012cc:	2302      	movs	r3, #2
 80012ce:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSOX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80012d0:	e03b      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_XL_ODR_12Hz5){
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d102      	bne.n	80012de <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80012d8:	2302      	movs	r3, #2
 80012da:	75fb      	strb	r3, [r7, #23]
            break;
 80012dc:	e035      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	75fb      	strb	r3, [r7, #23]
            break;
 80012e2:	e032      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
          case LSM6DSOX_ODR_FSM_52Hz:

            if (val == LSM6DSOX_XL_ODR_OFF){
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <lsm6dsox_xl_data_rate_set+0x154>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80012ea:	2303      	movs	r3, #3
 80012ec:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSOX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80012ee:	e02c      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_XL_ODR_12Hz5){
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80012f6:	2303      	movs	r3, #3
 80012f8:	75fb      	strb	r3, [r7, #23]
            break;
 80012fa:	e026      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_XL_ODR_26Hz){
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d102      	bne.n	8001308 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001302:	2303      	movs	r3, #3
 8001304:	75fb      	strb	r3, [r7, #23]
            break;
 8001306:	e020      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	75fb      	strb	r3, [r7, #23]
            break;
 800130c:	e01d      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
          case LSM6DSOX_ODR_FSM_104Hz:

            if (val == LSM6DSOX_XL_ODR_OFF){
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <lsm6dsox_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001314:	2304      	movs	r3, #4
 8001316:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSOX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001318:	e017      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_XL_ODR_12Hz5){
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001320:	2304      	movs	r3, #4
 8001322:	75fb      	strb	r3, [r7, #23]
            break;
 8001324:	e011      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_XL_ODR_26Hz){
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d102      	bne.n	8001332 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800132c:	2304      	movs	r3, #4
 800132e:	75fb      	strb	r3, [r7, #23]
            break;
 8001330:	e00b      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_XL_ODR_52Hz){
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d102      	bne.n	800133e <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001338:	2304      	movs	r3, #4
 800133a:	75fb      	strb	r3, [r7, #23]
            break;
 800133c:	e005      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	75fb      	strb	r3, [r7, #23]
            break;
 8001342:	e002      	b.n	800134a <lsm6dsox_xl_data_rate_set+0x1ae>
          default:
            odr_xl = val;
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	75fb      	strb	r3, [r7, #23]
            break;
 8001348:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d16c      	bne.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
    ret =  lsm6dsox_mlc_get(ctx, &mlc_enable);
 8001354:	f107 030a 	add.w	r3, r7, #10
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fc52 	bl	8001c04 <lsm6dsox_mlc_get>
 8001360:	6138      	str	r0, [r7, #16]
    if ( mlc_enable == PROPERTY_ENABLE ){
 8001362:	7abb      	ldrb	r3, [r7, #10]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d162      	bne.n	800142e <lsm6dsox_xl_data_rate_set+0x292>

      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8001368:	f107 0309 	add.w	r3, r7, #9
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fc72 	bl	8001c58 <lsm6dsox_mlc_data_rate_get>
 8001374:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d158      	bne.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
        switch (mlc_odr) {
 800137c:	7a7b      	ldrb	r3, [r7, #9]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d852      	bhi.n	8001428 <lsm6dsox_xl_data_rate_set+0x28c>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <lsm6dsox_xl_data_rate_set+0x1ec>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001399 	.word	0x08001399
 800138c:	080013ab 	.word	0x080013ab
 8001390:	080013c9 	.word	0x080013c9
 8001394:	080013f3 	.word	0x080013f3
          case LSM6DSOX_ODR_PRGS_12Hz5:

            if (val == LSM6DSOX_XL_ODR_OFF){
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <lsm6dsox_xl_data_rate_set+0x208>
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80013a2:	e044      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = val;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	75fb      	strb	r3, [r7, #23]
            break;
 80013a8:	e041      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF){
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <lsm6dsox_xl_data_rate_set+0x21a>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80013b0:	2302      	movs	r3, #2
 80013b2:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSOX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80013b4:	e03b      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
            } else if (val == LSM6DSOX_XL_ODR_12Hz5){
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d102      	bne.n	80013c2 <lsm6dsox_xl_data_rate_set+0x226>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80013bc:	2302      	movs	r3, #2
 80013be:	75fb      	strb	r3, [r7, #23]
            break;
 80013c0:	e035      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = val;
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	75fb      	strb	r3, [r7, #23]
            break;
 80013c6:	e032      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
          case LSM6DSOX_ODR_PRGS_52Hz:

            if (val == LSM6DSOX_XL_ODR_OFF){
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <lsm6dsox_xl_data_rate_set+0x238>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80013ce:	2303      	movs	r3, #3
 80013d0:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSOX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80013d2:	e02c      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
            } else if (val == LSM6DSOX_XL_ODR_12Hz5){
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <lsm6dsox_xl_data_rate_set+0x244>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80013da:	2303      	movs	r3, #3
 80013dc:	75fb      	strb	r3, [r7, #23]
            break;
 80013de:	e026      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
            } else if (val == LSM6DSOX_XL_ODR_26Hz){
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d102      	bne.n	80013ec <lsm6dsox_xl_data_rate_set+0x250>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80013e6:	2303      	movs	r3, #3
 80013e8:	75fb      	strb	r3, [r7, #23]
            break;
 80013ea:	e020      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = val;
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	75fb      	strb	r3, [r7, #23]
            break;
 80013f0:	e01d      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF){
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <lsm6dsox_xl_data_rate_set+0x262>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80013f8:	2304      	movs	r3, #4
 80013fa:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSOX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 80013fc:	e017      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
            } else if (val == LSM6DSOX_XL_ODR_12Hz5){
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d102      	bne.n	800140a <lsm6dsox_xl_data_rate_set+0x26e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001404:	2304      	movs	r3, #4
 8001406:	75fb      	strb	r3, [r7, #23]
            break;
 8001408:	e011      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
            } else if (val == LSM6DSOX_XL_ODR_26Hz){
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d102      	bne.n	8001416 <lsm6dsox_xl_data_rate_set+0x27a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001410:	2304      	movs	r3, #4
 8001412:	75fb      	strb	r3, [r7, #23]
            break;
 8001414:	e00b      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
            } else if (val == LSM6DSOX_XL_ODR_52Hz){
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d102      	bne.n	8001422 <lsm6dsox_xl_data_rate_set+0x286>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800141c:	2304      	movs	r3, #4
 800141e:	75fb      	strb	r3, [r7, #23]
            break;
 8001420:	e005      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = val;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	75fb      	strb	r3, [r7, #23]
            break;
 8001426:	e002      	b.n	800142e <lsm6dsox_xl_data_rate_set+0x292>
          default:
            odr_xl = val;
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	75fb      	strb	r3, [r7, #23]
            break;
 800142c:	bf00      	nop
        }
      }
    }
  }
  if (ret == 0) {
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <lsm6dsox_xl_data_rate_set+0x2a8>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t*)&reg, 1);
 8001434:	f107 0208 	add.w	r2, r7, #8
 8001438:	2301      	movs	r3, #1
 800143a:	2110      	movs	r1, #16
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fe27 	bl	8001090 <lsm6dsox_read_reg>
 8001442:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <lsm6dsox_xl_data_rate_set+0x2ce>
    reg.odr_xl = (uint8_t) odr_xl;
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	b2da      	uxtb	r2, r3
 8001452:	7a3b      	ldrb	r3, [r7, #8]
 8001454:	f362 1307 	bfi	r3, r2, #4, #4
 8001458:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t*)&reg, 1);
 800145a:	f107 0208 	add.w	r2, r7, #8
 800145e:	2301      	movs	r3, #1
 8001460:	2110      	movs	r1, #16
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fe2c 	bl	80010c0 <lsm6dsox_write_reg>
 8001468:	6138      	str	r0, [r7, #16]
  }
  return ret;
 800146a:	693b      	ldr	r3, [r7, #16]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <lsm6dsox_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsox_fs_g_t val)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t*)&reg, 1);
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	2301      	movs	r3, #1
 8001486:	2111      	movs	r1, #17
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fe01 	bl	8001090 <lsm6dsox_read_reg>
 800148e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <lsm6dsox_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	b2da      	uxtb	r2, r3
 800149e:	7a3b      	ldrb	r3, [r7, #8]
 80014a0:	f362 0343 	bfi	r3, r2, #1, #3
 80014a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t*)&reg, 1);
 80014a6:	f107 0208 	add.w	r2, r7, #8
 80014aa:	2301      	movs	r3, #1
 80014ac:	2111      	movs	r1, #17
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fe06 	bl	80010c0 <lsm6dsox_write_reg>
 80014b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <lsm6dsox_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsox_odr_g_t val)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	75fb      	strb	r3, [r7, #23]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fb2b 	bl	8001b32 <lsm6dsox_fsm_enable_get>
 80014dc:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 80c4 	bne.w	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80014e6:	7b3b      	ldrb	r3, [r7, #12]
 80014e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014f4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001500:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001502:	4313      	orrs	r3, r2
 8001504:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800150c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800150e:	4313      	orrs	r3, r2
 8001510:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001518:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800151a:	4313      	orrs	r3, r2
 800151c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001524:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001526:	4313      	orrs	r3, r2
 8001528:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001530:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001532:	4313      	orrs	r3, r2
 8001534:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001536:	7b3b      	ldrb	r3, [r7, #12]
 8001538:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800153c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001542:	7b7b      	ldrb	r3, [r7, #13]
 8001544:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001548:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800154a:	4313      	orrs	r3, r2
 800154c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800154e:	7b7b      	ldrb	r3, [r7, #13]
 8001550:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001554:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001556:	4313      	orrs	r3, r2
 8001558:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800155a:	7b7b      	ldrb	r3, [r7, #13]
 800155c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001560:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001562:	4313      	orrs	r3, r2
 8001564:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001566:	7b7b      	ldrb	r3, [r7, #13]
 8001568:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800156c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800156e:	4313      	orrs	r3, r2
 8001570:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001578:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800157a:	4313      	orrs	r3, r2
 800157c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001584:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001586:	4313      	orrs	r3, r2
 8001588:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001590:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001592:	4313      	orrs	r3, r2
 8001594:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800159c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800159e:	4313      	orrs	r3, r2
 80015a0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d163      	bne.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>

      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 80015a6:	f107 030b 	add.w	r3, r7, #11
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fae1 	bl	8001b74 <lsm6dsox_fsm_data_rate_get>
 80015b2:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d159      	bne.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d853      	bhi.n	8001668 <lsm6dsox_gy_data_rate_set+0x1a8>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <lsm6dsox_gy_data_rate_set+0x108>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	080015d9 	.word	0x080015d9
 80015cc:	080015eb 	.word	0x080015eb
 80015d0:	08001609 	.word	0x08001609
 80015d4:	08001633 	.word	0x08001633
          case LSM6DSOX_ODR_FSM_12Hz5:

            if (val == LSM6DSOX_GY_ODR_OFF){
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <lsm6dsox_gy_data_rate_set+0x124>
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80015e2:	e044      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	75fb      	strb	r3, [r7, #23]
            break;
 80015e8:	e041      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
          case LSM6DSOX_ODR_FSM_26Hz:

            if (val == LSM6DSOX_GY_ODR_OFF){
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <lsm6dsox_gy_data_rate_set+0x136>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80015f0:	2302      	movs	r3, #2
 80015f2:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSOX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015f4:	e03b      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_GY_ODR_12Hz5){
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80015fc:	2302      	movs	r3, #2
 80015fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001600:	e035      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	75fb      	strb	r3, [r7, #23]
            break;
 8001606:	e032      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
          case LSM6DSOX_ODR_FSM_52Hz:

            if (val == LSM6DSOX_GY_ODR_OFF){
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <lsm6dsox_gy_data_rate_set+0x154>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800160e:	2303      	movs	r3, #3
 8001610:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSOX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8001612:	e02c      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_GY_ODR_12Hz5){
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800161a:	2303      	movs	r3, #3
 800161c:	75fb      	strb	r3, [r7, #23]
            break;
 800161e:	e026      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_GY_ODR_26Hz){
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d102      	bne.n	800162c <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8001626:	2303      	movs	r3, #3
 8001628:	75fb      	strb	r3, [r7, #23]
            break;
 800162a:	e020      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	75fb      	strb	r3, [r7, #23]
            break;
 8001630:	e01d      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
          case LSM6DSOX_ODR_FSM_104Hz:

            if (val == LSM6DSOX_GY_ODR_OFF){
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <lsm6dsox_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8001638:	2304      	movs	r3, #4
 800163a:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSOX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 800163c:	e017      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_GY_ODR_12Hz5){
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8001644:	2304      	movs	r3, #4
 8001646:	75fb      	strb	r3, [r7, #23]
            break;
 8001648:	e011      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_GY_ODR_26Hz){
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d102      	bne.n	8001656 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8001650:	2304      	movs	r3, #4
 8001652:	75fb      	strb	r3, [r7, #23]
            break;
 8001654:	e00b      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
            } else if (val == LSM6DSOX_GY_ODR_52Hz){
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d102      	bne.n	8001662 <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800165c:	2304      	movs	r3, #4
 800165e:	75fb      	strb	r3, [r7, #23]
            break;
 8001660:	e005      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	75fb      	strb	r3, [r7, #23]
            break;
 8001666:	e002      	b.n	800166e <lsm6dsox_gy_data_rate_set+0x1ae>
          default:
            odr_gy = val;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	75fb      	strb	r3, [r7, #23]
            break;
 800166c:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d16c      	bne.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
    ret =  lsm6dsox_mlc_get(ctx, &mlc_enable);
 8001678:	f107 030a 	add.w	r3, r7, #10
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fac0 	bl	8001c04 <lsm6dsox_mlc_get>
 8001684:	6138      	str	r0, [r7, #16]
    if ( mlc_enable == PROPERTY_ENABLE ){
 8001686:	7abb      	ldrb	r3, [r7, #10]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d162      	bne.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>

      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 800168c:	f107 0309 	add.w	r3, r7, #9
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fae0 	bl	8001c58 <lsm6dsox_mlc_data_rate_get>
 8001698:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d158      	bne.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
        switch (mlc_odr) {
 80016a0:	7a7b      	ldrb	r3, [r7, #9]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d852      	bhi.n	800174c <lsm6dsox_gy_data_rate_set+0x28c>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <lsm6dsox_gy_data_rate_set+0x1ec>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016bd 	.word	0x080016bd
 80016b0:	080016cf 	.word	0x080016cf
 80016b4:	080016ed 	.word	0x080016ed
 80016b8:	08001717 	.word	0x08001717
          case LSM6DSOX_ODR_PRGS_12Hz5:

            if (val == LSM6DSOX_GY_ODR_OFF){
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <lsm6dsox_gy_data_rate_set+0x208>
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80016c6:	e044      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = val;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	75fb      	strb	r3, [r7, #23]
            break;
 80016cc:	e041      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
          case LSM6DSOX_ODR_PRGS_26Hz:

            if (val == LSM6DSOX_GY_ODR_OFF){
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <lsm6dsox_gy_data_rate_set+0x21a>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80016d4:	2302      	movs	r3, #2
 80016d6:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSOX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80016d8:	e03b      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
            } else if (val == LSM6DSOX_GY_ODR_12Hz5){
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <lsm6dsox_gy_data_rate_set+0x226>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80016e0:	2302      	movs	r3, #2
 80016e2:	75fb      	strb	r3, [r7, #23]
            break;
 80016e4:	e035      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = val;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	75fb      	strb	r3, [r7, #23]
            break;
 80016ea:	e032      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
          case LSM6DSOX_ODR_PRGS_52Hz:

            if (val == LSM6DSOX_GY_ODR_OFF){
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <lsm6dsox_gy_data_rate_set+0x238>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80016f2:	2303      	movs	r3, #3
 80016f4:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSOX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80016f6:	e02c      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
            } else if (val == LSM6DSOX_GY_ODR_12Hz5){
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d102      	bne.n	8001704 <lsm6dsox_gy_data_rate_set+0x244>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80016fe:	2303      	movs	r3, #3
 8001700:	75fb      	strb	r3, [r7, #23]
            break;
 8001702:	e026      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
            } else if (val == LSM6DSOX_GY_ODR_26Hz){
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d102      	bne.n	8001710 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800170a:	2303      	movs	r3, #3
 800170c:	75fb      	strb	r3, [r7, #23]
            break;
 800170e:	e020      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = val;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	75fb      	strb	r3, [r7, #23]
            break;
 8001714:	e01d      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
          case LSM6DSOX_ODR_PRGS_104Hz:

            if (val == LSM6DSOX_GY_ODR_OFF){
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <lsm6dsox_gy_data_rate_set+0x262>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800171c:	2304      	movs	r3, #4
 800171e:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSOX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8001720:	e017      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
            } else if (val == LSM6DSOX_GY_ODR_12Hz5){
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <lsm6dsox_gy_data_rate_set+0x26e>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8001728:	2304      	movs	r3, #4
 800172a:	75fb      	strb	r3, [r7, #23]
            break;
 800172c:	e011      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
            } else if (val == LSM6DSOX_GY_ODR_26Hz){
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d102      	bne.n	800173a <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8001734:	2304      	movs	r3, #4
 8001736:	75fb      	strb	r3, [r7, #23]
            break;
 8001738:	e00b      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
            } else if (val == LSM6DSOX_GY_ODR_52Hz){
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d102      	bne.n	8001746 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8001740:	2304      	movs	r3, #4
 8001742:	75fb      	strb	r3, [r7, #23]
            break;
 8001744:	e005      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = val;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	75fb      	strb	r3, [r7, #23]
            break;
 800174a:	e002      	b.n	8001752 <lsm6dsox_gy_data_rate_set+0x292>
          default:
            odr_gy = val;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	75fb      	strb	r3, [r7, #23]
            break;
 8001750:	bf00      	nop
        }
      }
    }
  }
  if (ret == 0) {
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <lsm6dsox_gy_data_rate_set+0x2a8>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t*)&reg, 1);
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	2301      	movs	r3, #1
 800175e:	2111      	movs	r1, #17
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fc95 	bl	8001090 <lsm6dsox_read_reg>
 8001766:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <lsm6dsox_gy_data_rate_set+0x2ce>
    reg.odr_g = (uint8_t) odr_gy;
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	b2da      	uxtb	r2, r3
 8001776:	7a3b      	ldrb	r3, [r7, #8]
 8001778:	f362 1307 	bfi	r3, r2, #4, #4
 800177c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t*)&reg, 1);
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	2301      	movs	r3, #1
 8001784:	2111      	movs	r1, #17
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fc9a 	bl	80010c0 <lsm6dsox_write_reg>
 800178c:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800178e:	693b      	ldr	r3, [r7, #16]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <lsm6dsox_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t*)&reg, 1);
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2301      	movs	r3, #1
 80017aa:	2112      	movs	r1, #18
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fc6f 	bl	8001090 <lsm6dsox_read_reg>
 80017b2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10f      	bne.n	80017da <lsm6dsox_block_data_update_set+0x42>
    reg.bdu = val;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	7a3b      	ldrb	r3, [r7, #8]
 80017c4:	f362 1386 	bfi	r3, r2, #6, #1
 80017c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t*)&reg, 1);
 80017ca:	f107 0208 	add.w	r2, r7, #8
 80017ce:	2301      	movs	r3, #1
 80017d0:	2112      	movs	r1, #18
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fc74 	bl	80010c0 <lsm6dsox_write_reg>
 80017d8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <lsm6dsox_xl_power_mode_set>:
  *                               reg CTRL6_C
  *
  */
int32_t lsm6dsox_xl_power_mode_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_xl_hm_mode_t val)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl5_c_t ctrl5_c;
  lsm6dsox_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t*) &ctrl5_c, 1);
 80017f0:	f107 0210 	add.w	r2, r7, #16
 80017f4:	2301      	movs	r3, #1
 80017f6:	2114      	movs	r1, #20
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fc49 	bl	8001090 <lsm6dsox_read_reg>
 80017fe:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d110      	bne.n	8001828 <lsm6dsox_xl_power_mode_set+0x44>
    ctrl5_c.xl_ulp_en = ((uint8_t)val & 0x02U) >> 1;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	7c3b      	ldrb	r3, [r7, #16]
 8001812:	f362 13c7 	bfi	r3, r2, #7, #1
 8001816:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t*) &ctrl5_c, 1);
 8001818:	f107 0210 	add.w	r2, r7, #16
 800181c:	2301      	movs	r3, #1
 800181e:	2114      	movs	r1, #20
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fc4d 	bl	80010c0 <lsm6dsox_write_reg>
 8001826:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d107      	bne.n	800183e <lsm6dsox_xl_power_mode_set+0x5a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL6_C, (uint8_t*) &ctrl6_c, 1);
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	2301      	movs	r3, #1
 8001834:	2115      	movs	r1, #21
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fc2a 	bl	8001090 <lsm6dsox_read_reg>
 800183c:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10f      	bne.n	8001864 <lsm6dsox_xl_power_mode_set+0x80>
    ctrl6_c.xl_hm_mode = (uint8_t)val & 0x01U;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	7b3b      	ldrb	r3, [r7, #12]
 800184e:	f362 1304 	bfi	r3, r2, #4, #1
 8001852:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL6_C, (uint8_t*) &ctrl6_c, 1);
 8001854:	f107 020c 	add.w	r2, r7, #12
 8001858:	2301      	movs	r3, #1
 800185a:	2115      	movs	r1, #21
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fc2f 	bl	80010c0 <lsm6dsox_write_reg>
 8001862:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8001864:	697b      	ldr	r3, [r7, #20]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <lsm6dsox_gy_power_mode_set>:
  * @param  val      change the values of g_hm_mode in reg CTRL7_G
  *
  */
int32_t lsm6dsox_gy_power_mode_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_g_hm_mode_t val)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl7_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL7_G, (uint8_t*)&reg, 1);
 800187a:	f107 0208 	add.w	r2, r7, #8
 800187e:	2301      	movs	r3, #1
 8001880:	2116      	movs	r1, #22
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc04 	bl	8001090 <lsm6dsox_read_reg>
 8001888:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10f      	bne.n	80018b0 <lsm6dsox_gy_power_mode_set+0x42>
    reg.g_hm_mode = (uint8_t)val;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	7a3b      	ldrb	r3, [r7, #8]
 800189a:	f362 13c7 	bfi	r3, r2, #7, #1
 800189e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL7_G, (uint8_t*)&reg, 1);
 80018a0:	f107 0208 	add.w	r2, r7, #8
 80018a4:	2301      	movs	r3, #1
 80018a6:	2116      	movs	r1, #22
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fc09 	bl	80010c0 <lsm6dsox_write_reg>
 80018ae:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <lsm6dsox_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 80018c4:	2306      	movs	r3, #6
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	2122      	movs	r1, #34	; 0x22
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fbe0 	bl	8001090 <lsm6dsox_read_reg>
 80018d0:	60f8      	str	r0, [r7, #12]
  return ret;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <lsm6dsox_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 80018e6:	2306      	movs	r3, #6
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	2128      	movs	r1, #40	; 0x28
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fbcf 	bl	8001090 <lsm6dsox_read_reg>
 80018f2:	60f8      	str	r0, [r7, #12]
  return ret;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <lsm6dsox_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx, lsm6dsox_reg_access_t val)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 800190a:	f107 0208 	add.w	r2, r7, #8
 800190e:	2301      	movs	r3, #1
 8001910:	2101      	movs	r1, #1
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fbbc 	bl	8001090 <lsm6dsox_read_reg>
 8001918:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10f      	bne.n	8001940 <lsm6dsox_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	b2da      	uxtb	r2, r3
 8001928:	7a3b      	ldrb	r3, [r7, #8]
 800192a:	f362 1387 	bfi	r3, r2, #6, #2
 800192e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8001930:	f107 0208 	add.w	r2, r7, #8
 8001934:	2301      	movs	r3, #1
 8001936:	2101      	movs	r1, #1
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fbc1 	bl	80010c0 <lsm6dsox_write_reg>
 800193e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001940:	68fb      	ldr	r3, [r7, #12]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <lsm6dsox_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8001954:	2301      	movs	r3, #1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	210f      	movs	r1, #15
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fb98 	bl	8001090 <lsm6dsox_read_reg>
 8001960:	60f8      	str	r0, [r7, #12]
  return ret;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <lsm6dsox_reset_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of sw_reset in reg CTRL3_C
  *
  */
int32_t lsm6dsox_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t*)&reg, 1);
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2301      	movs	r3, #1
 800197e:	2112      	movs	r1, #18
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fb85 	bl	8001090 <lsm6dsox_read_reg>
 8001986:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <lsm6dsox_reset_set+0x42>
    reg.sw_reset = val;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	7a3b      	ldrb	r3, [r7, #8]
 8001998:	f362 0300 	bfi	r3, r2, #0, #1
 800199c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t*)&reg, 1);
 800199e:	f107 0208 	add.w	r2, r7, #8
 80019a2:	2301      	movs	r3, #1
 80019a4:	2112      	movs	r1, #18
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fb8a 	bl	80010c0 <lsm6dsox_write_reg>
 80019ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <lsm6dsox_reset_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of sw_reset in reg CTRL3_C
  *
  */
int32_t lsm6dsox_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t*)&reg, 1);
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	2301      	movs	r3, #1
 80019c8:	2112      	movs	r1, #18
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fb60 	bl	8001090 <lsm6dsox_read_reg>
 80019d0:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80019d2:	7a3b      	ldrb	r3, [r7, #8]
 80019d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	701a      	strb	r2, [r3, #0]

  return ret;
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <lsm6dsox_xl_filter_lp2_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t*)&reg, 1);
 80019f6:	f107 0208 	add.w	r2, r7, #8
 80019fa:	2301      	movs	r3, #1
 80019fc:	2110      	movs	r1, #16
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fb46 	bl	8001090 <lsm6dsox_read_reg>
 8001a04:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10f      	bne.n	8001a2c <lsm6dsox_xl_filter_lp2_set+0x42>
    reg.lpf2_xl_en = val;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	7a3b      	ldrb	r3, [r7, #8]
 8001a16:	f362 0341 	bfi	r3, r2, #1, #1
 8001a1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t*)&reg, 1);
 8001a1c:	f107 0208 	add.w	r2, r7, #8
 8001a20:	2301      	movs	r3, #1
 8001a22:	2110      	movs	r1, #16
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fb4b 	bl	80010c0 <lsm6dsox_write_reg>
 8001a2a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <lsm6dsox_xl_hp_path_on_out_set>:
  *                                   in reg CTRL8_XL
  *
  */
int32_t lsm6dsox_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsox_hp_slope_xl_en_t val)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL8_XL, (uint8_t*)&reg, 1);
 8001a42:	f107 0208 	add.w	r2, r7, #8
 8001a46:	2301      	movs	r3, #1
 8001a48:	2117      	movs	r1, #23
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fb20 	bl	8001090 <lsm6dsox_read_reg>
 8001a50:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d121      	bne.n	8001a9c <lsm6dsox_xl_hp_path_on_out_set+0x66>
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	7a3b      	ldrb	r3, [r7, #8]
 8001a64:	f362 0382 	bfi	r3, r2, #2, #1
 8001a68:	723b      	strb	r3, [r7, #8]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	7a3b      	ldrb	r3, [r7, #8]
 8001a76:	f362 1304 	bfi	r3, r2, #4, #1
 8001a7a:	723b      	strb	r3, [r7, #8]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	7a3b      	ldrb	r3, [r7, #8]
 8001a86:	f362 1347 	bfi	r3, r2, #5, #3
 8001a8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL8_XL, (uint8_t*)&reg, 1);
 8001a8c:	f107 0208 	add.w	r2, r7, #8
 8001a90:	2301      	movs	r3, #1
 8001a92:	2117      	movs	r1, #23
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fb13 	bl	80010c0 <lsm6dsox_write_reg>
 8001a9a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <lsm6dsox_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dsox_i3c_disable_t val)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8001ab2:	f107 020c 	add.w	r2, r7, #12
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2118      	movs	r1, #24
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fae8 	bl	8001090 <lsm6dsox_read_reg>
 8001ac0:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d111      	bne.n	8001aec <lsm6dsox_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	09db      	lsrs	r3, r3, #7
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	7b3b      	ldrb	r3, [r7, #12]
 8001ad6:	f362 0341 	bfi	r3, r2, #1, #1
 8001ada:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8001adc:	f107 020c 	add.w	r2, r7, #12
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2118      	movs	r1, #24
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff faeb 	bl	80010c0 <lsm6dsox_write_reg>
 8001aea:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d107      	bne.n	8001b02 <lsm6dsox_i3c_disable_set+0x5c>

    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8001af2:	f107 0210 	add.w	r2, r7, #16
 8001af6:	2301      	movs	r3, #1
 8001af8:	2162      	movs	r1, #98	; 0x62
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fac8 	bl	8001090 <lsm6dsox_read_reg>
 8001b00:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10f      	bne.n	8001b28 <lsm6dsox_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	7c3b      	ldrb	r3, [r7, #16]
 8001b12:	f362 03c4 	bfi	r3, r2, #3, #2
 8001b16:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8001b18:	f107 0210 	add.w	r2, r7, #16
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	2162      	movs	r1, #98	; 0x62
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff facd 	bl	80010c0 <lsm6dsox_write_reg>
 8001b26:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 8001b28:	697b      	ldr	r3, [r7, #20]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <lsm6dsox_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsox_emb_fsm_enable_t *val)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fedd 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001b44:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d106      	bne.n	8001b5a <lsm6dsox_fsm_enable_get+0x28>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t*) val, 2);
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	2146      	movs	r1, #70	; 0x46
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fa9c 	bl	8001090 <lsm6dsox_read_reg>
 8001b58:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <lsm6dsox_fsm_enable_get+0x38>
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001b60:	2100      	movs	r1, #0
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fecb 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001b68:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <lsm6dsox_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dsox_fsm_odr_t *val)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001b7e:	2102      	movs	r1, #2
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff febc 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001b86:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d107      	bne.n	8001b9e <lsm6dsox_fsm_data_rate_get+0x2a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	2301      	movs	r3, #1
 8001b94:	215f      	movs	r1, #95	; 0x5f
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fa7a 	bl	8001090 <lsm6dsox_read_reg>
 8001b9c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12a      	bne.n	8001bfa <lsm6dsox_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8001ba4:	7a3b      	ldrb	r3, [r7, #8]
 8001ba6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d81b      	bhi.n	8001be8 <lsm6dsox_fsm_data_rate_get+0x74>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <lsm6dsox_fsm_data_rate_get+0x44>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be1 	.word	0x08001be1
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
        break;
 8001bce:	e00f      	b.n	8001bf0 <lsm6dsox_fsm_data_rate_get+0x7c>
      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
        break;
 8001bd6:	e00b      	b.n	8001bf0 <lsm6dsox_fsm_data_rate_get+0x7c>
      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
        break;
 8001bde:	e007      	b.n	8001bf0 <lsm6dsox_fsm_data_rate_get+0x7c>
      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2203      	movs	r2, #3
 8001be4:	701a      	strb	r2, [r3, #0]
        break;
 8001be6:	e003      	b.n	8001bf0 <lsm6dsox_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
        break;
 8001bee:	bf00      	nop
    }
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fe83 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001bf8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <lsm6dsox_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t lsm6dsox_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001c0e:	2102      	movs	r1, #2
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fe74 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001c16:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <lsm6dsox_mlc_get+0x2a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B, (uint8_t*)&reg, 1);
 8001c1e:	f107 0208 	add.w	r2, r7, #8
 8001c22:	2301      	movs	r3, #1
 8001c24:	2105      	movs	r1, #5
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fa32 	bl	8001090 <lsm6dsox_read_reg>
 8001c2c:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <lsm6dsox_mlc_get+0x48>
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe61 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001c3c:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8001c3e:	7a3b      	ldrb	r3, [r7, #8]
 8001c40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <lsm6dsox_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001c62:	2102      	movs	r1, #2
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fe4a 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001c6a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <lsm6dsox_mlc_data_rate_get+0x2a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8001c72:	f107 0208 	add.w	r2, r7, #8
 8001c76:	2301      	movs	r3, #1
 8001c78:	2160      	movs	r1, #96	; 0x60
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fa08 	bl	8001090 <lsm6dsox_read_reg>
 8001c80:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d12a      	bne.n	8001cde <lsm6dsox_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8001c88:	7a3b      	ldrb	r3, [r7, #8]
 8001c8a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d81b      	bhi.n	8001ccc <lsm6dsox_mlc_data_rate_get+0x74>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <lsm6dsox_mlc_data_rate_get+0x44>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001cb5 	.word	0x08001cb5
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cc5 	.word	0x08001cc5
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
        break;
 8001cb2:	e00f      	b.n	8001cd4 <lsm6dsox_mlc_data_rate_get+0x7c>
      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
        break;
 8001cba:	e00b      	b.n	8001cd4 <lsm6dsox_mlc_data_rate_get+0x7c>
      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
        break;
 8001cc2:	e007      	b.n	8001cd4 <lsm6dsox_mlc_data_rate_get+0x7c>
      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	701a      	strb	r2, [r3, #0]
        break;
 8001cca:	e003      	b.n	8001cd4 <lsm6dsox_mlc_data_rate_get+0x7c>
      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
        break;
 8001cd2:	bf00      	nop
    }
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fe11 	bl	80018fe <lsm6dsox_mem_bank_set>
 8001cdc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <get_attitude>:
  * @param st		pointer to systemState struct
  *
  * @retval None
  */
void get_attitude(device *imu, systemState *st)
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	float accel_x = imu->accel.x;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
	float accel_y = imu->accel.y;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
	float accel_z = imu->accel.z;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
	float gyro_x = imu->gyro.x;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
	float gyro_y = imu->gyro.y;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
	float gyro_z = imu->gyro.z;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	623b      	str	r3, [r7, #32]
	float dt = imu->timestep;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1a:	61fb      	str	r3, [r7, #28]

	/* Convert accel data to roll & pitch angle estimates */
	float roll_est_xl = RAD_TO_DEG(atan2(accel_y, sqrt(sq(accel_z) + sq(accel_x))));
 8001d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d1e:	f7fe fc13 	bl	8000548 <__aeabi_f2d>
 8001d22:	4604      	mov	r4, r0
 8001d24:	460d      	mov	r5, r1
 8001d26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d2a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3a:	ee17 0a90 	vmov	r0, s15
 8001d3e:	f7fe fc03 	bl	8000548 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ec43 2b10 	vmov	d0, r2, r3
 8001d4a:	f010 fdcd 	bl	80128e8 <sqrt>
 8001d4e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d52:	eef0 7a60 	vmov.f32	s15, s1
 8001d56:	eeb0 1a47 	vmov.f32	s2, s14
 8001d5a:	eef0 1a67 	vmov.f32	s3, s15
 8001d5e:	ec45 4b10 	vmov	d0, r4, r5
 8001d62:	f010 fdbf 	bl	80128e4 <atan2>
 8001d66:	ec51 0b10 	vmov	r0, r1, d0
 8001d6a:	a364      	add	r3, pc, #400	; (adr r3, 8001efc <get_attitude+0x214>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fd6c 	bl	800084c <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe ff14 	bl	8000ba8 <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	61bb      	str	r3, [r7, #24]
	float pitch_est_xl = RAD_TO_DEG(atan2(-accel_x, sqrt(sq(accel_z) + sq(accel_y))));
 8001d84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d88:	eef1 7a67 	vneg.f32	s15, s15
 8001d8c:	ee17 3a90 	vmov	r3, s15
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbd9 	bl	8000548 <__aeabi_f2d>
 8001d96:	4604      	mov	r4, r0
 8001d98:	460d      	mov	r5, r1
 8001d9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001da2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001da6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	ee17 0a90 	vmov	r0, s15
 8001db2:	f7fe fbc9 	bl	8000548 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	ec43 2b10 	vmov	d0, r2, r3
 8001dbe:	f010 fd93 	bl	80128e8 <sqrt>
 8001dc2:	eeb0 7a40 	vmov.f32	s14, s0
 8001dc6:	eef0 7a60 	vmov.f32	s15, s1
 8001dca:	eeb0 1a47 	vmov.f32	s2, s14
 8001dce:	eef0 1a67 	vmov.f32	s3, s15
 8001dd2:	ec45 4b10 	vmov	d0, r4, r5
 8001dd6:	f010 fd85 	bl	80128e4 <atan2>
 8001dda:	ec51 0b10 	vmov	r0, r1, d0
 8001dde:	a347      	add	r3, pc, #284	; (adr r3, 8001efc <get_attitude+0x214>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fd32 	bl	800084c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe feda 	bl	8000ba8 <__aeabi_d2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]

	/* Convert gyro data to roll & pitch angle estimates */
	float roll_est_gyro = (MDPS_TO_DPS(gyro_x)*dt) + st->roll.estimate;
 8001df8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dfc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001ef8 <get_attitude+0x210>
 8001e00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	edc7 7a04 	vstr	s15, [r7, #16]
	float pitch_est_gyro = (MDPS_TO_DPS(gyro_y)*dt) + st->pitch.estimate;
 8001e1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e1e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001ef8 <get_attitude+0x210>
 8001e22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e26:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Scale and combine estimates and update buffers */
	st->roll.estimate = (COMP_FILT_GAIN_GYRO)*roll_est_gyro + (COMP_FILT_GAIN_XL)*roll_est_xl;
 8001e3c:	6938      	ldr	r0, [r7, #16]
 8001e3e:	f7fe fb83 	bl	8000548 <__aeabi_f2d>
 8001e42:	a329      	add	r3, pc, #164	; (adr r3, 8001ee8 <get_attitude+0x200>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fbd6 	bl	80005f8 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4614      	mov	r4, r2
 8001e52:	461d      	mov	r5, r3
 8001e54:	69b8      	ldr	r0, [r7, #24]
 8001e56:	f7fe fb77 	bl	8000548 <__aeabi_f2d>
 8001e5a:	a325      	add	r3, pc, #148	; (adr r3, 8001ef0 <get_attitude+0x208>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fa0e 	bl	800028c <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe96 	bl	8000ba8 <__aeabi_d2f>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]
	st->pitch.estimate = (COMP_FILT_GAIN_GYRO)*pitch_est_gyro + (COMP_FILT_GAIN_XL)*pitch_est_xl;
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7fe fb60 	bl	8000548 <__aeabi_f2d>
 8001e88:	a317      	add	r3, pc, #92	; (adr r3, 8001ee8 <get_attitude+0x200>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4614      	mov	r4, r2
 8001e98:	461d      	mov	r5, r3
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7fe fb54 	bl	8000548 <__aeabi_f2d>
 8001ea0:	a313      	add	r3, pc, #76	; (adr r3, 8001ef0 <get_attitude+0x208>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fba7 	bl	80005f8 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4620      	mov	r0, r4
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	f7fe f9eb 	bl	800028c <__adddf3>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe73 	bl	8000ba8 <__aeabi_d2f>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Read yawrate and update buffer */
	st->yaw.estimate = (MDPS_TO_DPS(gyro_z)); //yawrate
 8001ec8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ecc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ef8 <get_attitude+0x210>
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8001eda:	bf00      	nop
 8001edc:	3738      	adds	r7, #56	; 0x38
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	f5c28f5c 	.word	0xf5c28f5c
 8001eec:	3fef5c28 	.word	0x3fef5c28
 8001ef0:	47ae147b 	.word	0x47ae147b
 8001ef4:	3f947ae1 	.word	0x3f947ae1
 8001ef8:	447a0000 	.word	0x447a0000
 8001efc:	a0000000 	.word	0xa0000000
 8001f00:	3f91df46 	.word	0x3f91df46

08001f04 <throttle_idle>:
  *
  * @param st		pointer to systemState struct
  * @retval ret		logical value (1 or 0)
  */
uint8_t throttle_idle(systemState *st)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	get_user_input(st);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f001 fceb 	bl	80038e8 <get_user_input>

	/* Determine if throttle is within idle tolerance */
	ret = (st->throttle.request < 5);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8001f18:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	bf4c      	ite	mi
 8001f26:	2301      	movmi	r3, #1
 8001f28:	2300      	movpl	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <armed>:
  *
  * @param None
  * @retval ret		logical value (1 or 0)
  */
uint8_t armed(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
	uint8_t ret;

	/* Determine if arm switch (SE) is active */
	ret = HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8001f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <armed+0x20>)
 8001f44:	f003 f808 	bl	8004f58 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020400 	.word	0x40020400

08001f5c <right_side_up>:
  *
  * @param imu		pointer to (imu) device struct
  * @retval ret		logical value (1 or 0)
  */
uint8_t right_side_up(device *imu)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	/* Check sign of accel vector z component */
	ret = (imu->accel.z > 0);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	bfcc      	ite	gt
 8001f74:	2301      	movgt	r3, #1
 8001f76:	2300      	movle	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <attitude_within_boundaries>:
  *
  * @param st		pointer to systemState struct
  * @retval ret		logical value (1 or 0)
  */
uint8_t attitude_within_boundaries(systemState *st)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	/* Check roll & pitch angles are within tolerance */
	ret = (fabs(st->roll.estimate) < ROLL_MAX) && (fabs(st->pitch.estimate) < PITCH_MAX);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f98:	eef0 7ae7 	vabs.f32	s15, s15
 8001f9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	d50d      	bpl.n	8001fc6 <attitude_within_boundaries+0x3c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fb0:	eef0 7ae7 	vabs.f32	s15, s15
 8001fb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	d501      	bpl.n	8001fc6 <attitude_within_boundaries+0x3c>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <attitude_within_boundaries+0x3e>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <constrainf>:
  __extension__ ({ __typeof__ (x) _x = (x); \
  (_x > 0) - (_x < 0); })

/* Exported static inline functions ---------------------------------------------*/
static inline float constrainf(float val, float min, float max)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fe2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fe6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (val < min)
 8001fea:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	d501      	bpl.n	8002000 <constrainf+0x28>
        return min;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	e00b      	b.n	8002018 <constrainf+0x40>
	else if (val > max)
 8002000:	ed97 7a03 	vldr	s14, [r7, #12]
 8002004:	edd7 7a01 	vldr	s15, [r7, #4]
 8002008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	dd01      	ble.n	8002016 <constrainf+0x3e>
		return max;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	e000      	b.n	8002018 <constrainf+0x40>
    else
        return val;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <motor_mixing>:
  * @param  cmd		pointer to mtrCommands struct
  *
  * @retval None
  */
void motor_mixing(systemState *st, mtrCommands *cmd)
{
 800202a:	b480      	push	{r7}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
	float throttle_cmd, roll_cmd, pitch_cmd, yaw_cmd;
	yaw_cmd = st->yaw.command;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002038:	617b      	str	r3, [r7, #20]
	roll_cmd = st->roll.command;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	613b      	str	r3, [r7, #16]
	pitch_cmd = st->pitch.command;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	60fb      	str	r3, [r7, #12]
	throttle_cmd = st->throttle.command;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800204c:	60bb      	str	r3, [r7, #8]

	cmd->mtr1 = throttle_cmd;// + roll_cmd;// - pitch_cmd + yaw_cmd;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	601a      	str	r2, [r3, #0]
	cmd->mtr2 = throttle_cmd;// + roll_cmd;// + pitch_cmd - yaw_cmd;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	605a      	str	r2, [r3, #4]
	cmd->mtr3 = throttle_cmd;// - roll_cmd;// - pitch_cmd - yaw_cmd;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	609a      	str	r2, [r3, #8]
	cmd->mtr4 = throttle_cmd;// - roll_cmd;// + pitch_cmd + yaw_cmd;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	60da      	str	r2, [r3, #12]
}
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <duty_cycle_set>:
  *
  * @param  cmd		pointer to mtrCommands struct
  * @retval None
  */
void duty_cycle_set(mtrCommands *cmd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	/* NaN Check */
	if isnan(cmd->mtr1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	eef4 7a67 	vcmp.f32	s15, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d702      	bvc.n	8002092 <duty_cycle_set+0x1e>
		cmd->mtr1 = MTR_CMD_MIN;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a47      	ldr	r2, [pc, #284]	; (80021ac <duty_cycle_set+0x138>)
 8002090:	601a      	str	r2, [r3, #0]
	if isnan(cmd->mtr2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	edd3 7a01 	vldr	s15, [r3, #4]
 8002098:	eef4 7a67 	vcmp.f32	s15, s15
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d702      	bvc.n	80020a8 <duty_cycle_set+0x34>
		cmd->mtr2 = MTR_CMD_MIN;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a41      	ldr	r2, [pc, #260]	; (80021ac <duty_cycle_set+0x138>)
 80020a6:	605a      	str	r2, [r3, #4]
	if isnan(cmd->mtr3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80020ae:	eef4 7a67 	vcmp.f32	s15, s15
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	d702      	bvc.n	80020be <duty_cycle_set+0x4a>
		cmd->mtr3 = MTR_CMD_MIN;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <duty_cycle_set+0x138>)
 80020bc:	609a      	str	r2, [r3, #8]
	if isnan(cmd->mtr4)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80020c4:	eef4 7a67 	vcmp.f32	s15, s15
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d702      	bvc.n	80020d4 <duty_cycle_set+0x60>
		cmd->mtr4 = MTR_CMD_MIN;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a36      	ldr	r2, [pc, #216]	; (80021ac <duty_cycle_set+0x138>)
 80020d2:	60da      	str	r2, [r3, #12]

	/* Constrain */
	cmd->mtr1 = constrainf(cmd->mtr1, MTR_CMD_IDLE, MTR_CMD_LIMIT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ed9f 1a35 	vldr	s2, [pc, #212]	; 80021b0 <duty_cycle_set+0x13c>
 80020de:	eddf 0a35 	vldr	s1, [pc, #212]	; 80021b4 <duty_cycle_set+0x140>
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	f7ff ff77 	bl	8001fd8 <constrainf>
 80020ea:	eef0 7a40 	vmov.f32	s15, s0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	cmd->mtr2 = constrainf(cmd->mtr2, MTR_CMD_IDLE, MTR_CMD_LIMIT);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020fa:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80021b0 <duty_cycle_set+0x13c>
 80020fe:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80021b4 <duty_cycle_set+0x140>
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	f7ff ff67 	bl	8001fd8 <constrainf>
 800210a:	eef0 7a40 	vmov.f32	s15, s0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	edc3 7a01 	vstr	s15, [r3, #4]
	cmd->mtr3 = constrainf(cmd->mtr3, MTR_CMD_IDLE, MTR_CMD_LIMIT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	edd3 7a02 	vldr	s15, [r3, #8]
 800211a:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80021b0 <duty_cycle_set+0x13c>
 800211e:	eddf 0a25 	vldr	s1, [pc, #148]	; 80021b4 <duty_cycle_set+0x140>
 8002122:	eeb0 0a67 	vmov.f32	s0, s15
 8002126:	f7ff ff57 	bl	8001fd8 <constrainf>
 800212a:	eef0 7a40 	vmov.f32	s15, s0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edc3 7a02 	vstr	s15, [r3, #8]
	cmd->mtr4 = constrainf(cmd->mtr4, MTR_CMD_IDLE, MTR_CMD_LIMIT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	edd3 7a03 	vldr	s15, [r3, #12]
 800213a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80021b0 <duty_cycle_set+0x13c>
 800213e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80021b4 <duty_cycle_set+0x140>
 8002142:	eeb0 0a67 	vmov.f32	s0, s15
 8002146:	f7ff ff47 	bl	8001fd8 <constrainf>
 800214a:	eef0 7a40 	vmov.f32	s15, s0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	edc3 7a03 	vstr	s15, [r3, #12]

	/* Set Duty Cycle; (can adjust CCR directly for speed) */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, cmd->mtr3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edd3 7a02 	vldr	s15, [r3, #8]
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <duty_cycle_set+0x144>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002162:	ee17 2a90 	vmov	r2, s15
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, cmd->mtr4);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7a03 	vldr	s15, [r3, #12]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <duty_cycle_set+0x144>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002176:	ee17 2a90 	vmov	r2, s15
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, cmd->mtr2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <duty_cycle_set+0x148>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218a:	ee17 2a90 	vmov	r2, s15
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, cmd->mtr1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <duty_cycle_set+0x148>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800219e:	ee17 2a90 	vmov	r2, s15
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	453b8000 	.word	0x453b8000
 80021b0:	45bb8000 	.word	0x45bb8000
 80021b4:	453b8000 	.word	0x453b8000
 80021b8:	200007ac 	.word	0x200007ac
 80021bc:	200006d4 	.word	0x200006d4

080021c0 <constrainf>:
  __extension__ ({ __typeof__ (x) _x = (x); \
  (_x > 0) - (_x < 0); })

/* Exported static inline functions ---------------------------------------------*/
static inline float constrainf(float val, float min, float max)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80021ce:	ed87 1a01 	vstr	s2, [r7, #4]
	if (val < min)
 80021d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	d501      	bpl.n	80021e8 <constrainf+0x28>
        return min;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	e00b      	b.n	8002200 <constrainf+0x40>
	else if (val > max)
 80021e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	dd01      	ble.n	80021fe <constrainf+0x3e>
		return max;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	e000      	b.n	8002200 <constrainf+0x40>
    else
        return val;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <saturation_check>:
  *
  * @param  st		pointer to state struct
  * @retval 		logical value (1 or 0)
  */
static uint8_t saturation_check(state *st)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
	return (fabs(st->command) > st->command_limit);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002220:	eeb0 7ae7 	vabs.f32	s14, s15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	edd3 7a04 	vldr	s15, [r3, #16]
 800222a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	bfcc      	ite	gt
 8002234:	2301      	movgt	r3, #1
 8002236:	2300      	movle	r3, #0
 8002238:	b2db      	uxtb	r3, r3
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <windup_check>:
  *
  * @param  st		pointer to state struct
  * @retval 		logical value (1 or 0)
  */
static uint8_t windup_check(state *st)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	return (SIGN(st->error) == SIGN(st->command));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	edd7 7a03 	vldr	s15, [r7, #12]
 8002258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	bfcc      	ite	gt
 8002262:	2301      	movgt	r3, #1
 8002264:	2300      	movle	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	edd7 7a03 	vldr	s15, [r7, #12]
 800226e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	bf4c      	ite	mi
 8002278:	2301      	movmi	r3, #1
 800227a:	2300      	movpl	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	edd7 7a02 	vldr	s15, [r7, #8]
 800228a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	bfcc      	ite	gt
 8002294:	2301      	movgt	r3, #1
 8002296:	2300      	movle	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4619      	mov	r1, r3
 800229c:	edd7 7a02 	vldr	s15, [r7, #8]
 80022a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	bf4c      	ite	mi
 80022aa:	2301      	movmi	r3, #1
 80022ac:	2300      	movpl	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	1acb      	subs	r3, r1, r3
 80022b2:	429a      	cmp	r2, r3
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <clamping>:
  *
  * @param  st		pointer to state struct
  * @retval None
  */
static void clamping(state *st)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	uint8_t saturating = saturation_check(st);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff9e 	bl	8002212 <saturation_check>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
	uint8_t winding = windup_check(st);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffb3 	bl	8002246 <windup_check>
 80022e0:	4603      	mov	r3, r0
 80022e2:	73bb      	strb	r3, [r7, #14]
	uint8_t integrating = st->clamp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022ea:	737b      	strb	r3, [r7, #13]

	if ((saturating && winding) && integrating)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <clamping+0x40>
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <clamping+0x40>
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <clamping+0x40>
	{
		st->clamp = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	else if ((!saturating || !winding) && !integrating)
	{
		st->clamp = 1;
	}
}
 8002306:	e00c      	b.n	8002322 <clamping+0x5a>
	else if ((!saturating || !winding) && !integrating)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <clamping+0x4c>
 800230e:	7bbb      	ldrb	r3, [r7, #14]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <clamping+0x5a>
 8002314:	7b7b      	ldrb	r3, [r7, #13]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <clamping+0x5a>
		st->clamp = 1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <pid_control>:
  * @param  dt		timestep
  *
  * @retval None
  */
void pid_control(state *st, float dt)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	ed87 0a00 	vstr	s0, [r7]
	/*PID GAINS*/
	float K[3];
	memcpy(K, st->gains, sizeof(st->gains));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f103 0114 	add.w	r1, r3, #20
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	220c      	movs	r2, #12
 8002344:	4618      	mov	r0, r3
 8002346:	f00e fbfb 	bl	8010b40 <memcpy>

	/*Calculate Error*/
	float error;
	error = st->request - st->estimate;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	/*Calculate Control Signal*/
	float p, i, d;
	p = K[0]*error;
 800235e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002362:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	edc7 7a08 	vstr	s15, [r7, #32]
	i = (st->clamp)*(K[1]*dt/2)*(error + st->error) + st->integrator;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002380:	edd7 7a00 	vldr	s15, [r7]
 8002384:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002388:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800238c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	edd3 6a03 	vldr	s13, [r3, #12]
 800239a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800239e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	edc7 7a07 	vstr	s15, [r7, #28]
	d = ((2.0f*K[2]*LPF_CUTOFF_FREQ)*(st->prev_estimate - st->estimate) +	// (error - st->error)
 80023b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80024ac <pid_control+0x180>
 80023c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80024b0 <pid_control+0x184>
 80023cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	edd3 6a08 	vldr	s13, [r3, #32]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023e0:	ee27 7a27 	vmul.f32	s14, s14, s15
			(2.0f - dt*LPF_CUTOFF_FREQ)*st->differentiator)/(2.0f + dt*LPF_CUTOFF_FREQ);
 80023e4:	edd7 7a00 	vldr	s15, [r7]
 80023e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ec:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80024ac <pid_control+0x180>
 80023f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023f4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80024b0 <pid_control+0x184>
 80023f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002400:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800240a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	d = ((2.0f*K[2]*LPF_CUTOFF_FREQ)*(st->prev_estimate - st->estimate) +	// (error - st->error)
 800240e:	ee77 6a27 	vadd.f32	s13, s14, s15
			(2.0f - dt*LPF_CUTOFF_FREQ)*st->differentiator)/(2.0f + dt*LPF_CUTOFF_FREQ);
 8002412:	edd7 7a00 	vldr	s15, [r7]
 8002416:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800241a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80024ac <pid_control+0x180>
 800241e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002422:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80024b0 <pid_control+0x184>
 8002426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800242e:	ee37 7a87 	vadd.f32	s14, s15, s14
	d = ((2.0f*K[2]*LPF_CUTOFF_FREQ)*(st->prev_estimate - st->estimate) +	// (error - st->error)
 8002432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002436:	edc7 7a06 	vstr	s15, [r7, #24]

	st->command = p + i + d;
 800243a:	ed97 7a08 	vldr	s14, [r7, #32]
 800243e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002446:	edd7 7a06 	vldr	s15, [r7, #24]
 800244a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	edc3 7a02 	vstr	s15, [r3, #8]

	/*Update Error, Control Terms, and Previous Measurement*/
	st->error = error;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	60da      	str	r2, [r3, #12]
	st->integrator = i;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
	st->differentiator = d;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
	st->prev_estimate = st->estimate;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	621a      	str	r2, [r3, #32]
	/*Inf Check*/

	/*NaN Check*/

	/*Update Integrator Clamp*/
	clamping(st);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff2a 	bl	80022c8 <clamping>

	/*Constrain Control Signal*/
	st->command = constrainf(st->command, -st->command_limit, st->command_limit);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ed93 7a02 	vldr	s14, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002480:	eef1 7a67 	vneg.f32	s15, s15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	edd3 6a04 	vldr	s13, [r3, #16]
 800248a:	eeb0 1a66 	vmov.f32	s2, s13
 800248e:	eef0 0a67 	vmov.f32	s1, s15
 8002492:	eeb0 0a47 	vmov.f32	s0, s14
 8002496:	f7ff fe93 	bl	80021c0 <constrainf>
 800249a:	eef0 7a40 	vmov.f32	s15, s0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80024a4:	bf00      	nop
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40490fdb 	.word	0x40490fdb
 80024b0:	42960000 	.word	0x42960000

080024b4 <mapf>:
	if (num < 0.0) return -1;
	return 0;
}

static inline float mapf(float val, float in_min, float in_max, float out_min, float out_max)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80024be:	edc7 0a04 	vstr	s1, [r7, #16]
 80024c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80024c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80024ca:	ed87 2a01 	vstr	s4, [r7, #4]
	return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80024ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80024d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024da:	edd7 6a01 	vldr	s13, [r7, #4]
 80024de:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80024ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <get_state_request>:
  *
  * @param  st		pointer to systemState struct
  * @retval None
  */
void get_state_request(systemState *st)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	get_user_input(st);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 f9e5 	bl	80038e8 <get_user_input>
	//update_position_request();
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <read_sensor_data>:
  *
  * @param  sp		pointer to sensorPackage struct
  * @retval None
  */
void read_sensor_data(sensorPackage *sp)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
	read_imu_data(&sp->imu);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f001 fc9d 	bl	8003e70 <read_imu_data>
	//read_mag_data(&sp->mag);
	//lsm6dsox_read_data(&sp->imu);
	//lis3mdl_read_data(&sp->mag);
	//mtk3333_read_data(&sp->gps);
	//bmp390_read_data(&sp->bar);
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <estimate_state>:
  * @param  st		pointer to systemState struct
  *
  * @retval None
  */
void estimate_state(sensorPackage *sp, systemState *st)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
	get_attitude(&sp->imu, st);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fbcb 	bl	8001ce8 <get_attitude>
	//get_position(sp->gps, sp->bar, est->position);
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <control_state>:
  * @param  st		pointer to systemState struct
  *
  * @retval None
  */
void control_state(sensorPackage *sp, systemState *st)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]

	/* Map Throttle Request to Command */
	st->throttle.command = mapf(st->throttle.request, THROTTLE_MIN, THROTTLE_MAX, MTR_CMD(0), MTR_CMD(60));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 800256c:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8002600 <control_state+0xa4>
 8002570:	eddf 1a24 	vldr	s3, [pc, #144]	; 8002604 <control_state+0xa8>
 8002574:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8002608 <control_state+0xac>
 8002578:	eddf 0a24 	vldr	s1, [pc, #144]	; 800260c <control_state+0xb0>
 800257c:	eeb0 0a67 	vmov.f32	s0, s15
 8002580:	f7ff ff98 	bl	80024b4 <mapf>
 8002584:	eef0 7a40 	vmov.f32	s15, s0
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128

	/* Clamp Integrator Path at Low Throttle for Takeoff */
	if (st->throttle.command < MTR_CMD_LIFTOFF)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8002594:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002610 <control_state+0xb4>
 8002598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	d50b      	bpl.n	80025ba <control_state+0x5e>
	{
		st->roll.clamp = 0;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		st->pitch.clamp = 0;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		st->yaw.clamp = 0;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	}

	/* Attitude Control (Inner Loop Roll & Pitch) */
	pid_control(&st->roll, sp->imu.timestep);
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80025c2:	eeb0 0a67 	vmov.f32	s0, s15
 80025c6:	4610      	mov	r0, r2
 80025c8:	f7ff feb0 	bl	800232c <pid_control>
	pid_control(&st->pitch, sp->imu.timestep);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	4610      	mov	r0, r2
 80025de:	f7ff fea5 	bl	800232c <pid_control>
	pid_control(&st->yaw, sp->imu.timestep);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80025ee:	eeb0 0a67 	vmov.f32	s0, s15
 80025f2:	4610      	mov	r0, r2
 80025f4:	f7ff fe9a 	bl	800232c <pid_control>

}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	45960000 	.word	0x45960000
 8002604:	453b8000 	.word	0x453b8000
 8002608:	42c80000 	.word	0x42c80000
 800260c:	00000000 	.word	0x00000000
 8002610:	4568d000 	.word	0x4568d000

08002614 <actuator_set>:
  * @param  cmd		pointer to mtrCommands struct
  *
  * @retval None
  */
void actuator_set(sensorPackage *sp, systemState *st, mtrCommands *cmd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	/* Motor Mixing Algorithm */
	motor_mixing(st, cmd);
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f7ff fd01 	bl	800202a <motor_mixing>

	/* Thrust Compensation for Roll/Pitch to Maintain Altitude */
	//thrust_compensation(&sp->imu.accel, cmd);

	/* Set Duty Cycle */
	duty_cycle_set(cmd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fd23 	bl	8002074 <duty_cycle_set>
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263e:	f001 fda9 	bl	8004194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002642:	f000 f871 	bl	8002728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002646:	f000 fbe1 	bl	8002e0c <MX_GPIO_Init>
  MX_DMA_Init();
 800264a:	f000 fbb7 	bl	8002dbc <MX_DMA_Init>
  MX_I2C1_Init();
 800264e:	f000 f8d5 	bl	80027fc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8002652:	f000 f901 	bl	8002858 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002656:	f00a fd6f 	bl	800d138 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800265a:	f00c ffa5 	bl	800f5a8 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800265e:	f000 fa13 	bl	8002a88 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002662:	f000 f995 	bl	8002990 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002666:	f000 f919 	bl	800289c <MX_TIM2_Init>
  MX_TIM8_Init();
 800266a:	f000 fafb 	bl	8002c64 <MX_TIM8_Init>
  MX_TIM6_Init();
 800266e:	f000 fa8d 	bl	8002b8c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002672:	f000 fac1 	bl	8002bf8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* Sensor Setup */
  sensor_setup(&sensPackage);
 8002676:	4828      	ldr	r0, [pc, #160]	; (8002718 <main+0xe0>)
 8002678:	f001 fd56 	bl	8004128 <sensor_setup>

  /* Initialize ESC Coms */		// calibrate_throttle() ?
  escInput(ENABLE);
 800267c:	2001      	movs	r0, #1
 800267e:	f001 fc75 	bl	8003f6c <escInput>

  /* Initialize RC Input Channels */
  rcInput(ENABLE);
 8002682:	2001      	movs	r0, #1
 8002684:	f001 fc3e 	bl	8003f04 <rcInput>

  /* Start Timer */
  start_timer(&htim6); //general purpose timer
 8002688:	4824      	ldr	r0, [pc, #144]	; (800271c <main+0xe4>)
 800268a:	f7fe fccb 	bl	8001024 <start_timer>

  /* Wait RX Boot Time */
  delay(20);
 800268e:	2014      	movs	r0, #20
 8002690:	f7fe fcbd 	bl	800100e <delay>

  /* Check for arm request from user */
  while(!armed())
 8002694:	e002      	b.n	800269c <main+0x64>
  {
	  led_status(WAITING);
 8002696:	2002      	movs	r0, #2
 8002698:	f7fe fc96 	bl	8000fc8 <led_status>
  while(!armed())
 800269c:	f7ff fc4c 	bl	8001f38 <armed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f7      	beq.n	8002696 <main+0x5e>
  }

  /* Startup Safety Check */
  ready = ready_to_fly(&sensPackage.imu, &sysState);
 80026a6:	491e      	ldr	r1, [pc, #120]	; (8002720 <main+0xe8>)
 80026a8:	481b      	ldr	r0, [pc, #108]	; (8002718 <main+0xe0>)
 80026aa:	f001 fce5 	bl	8004078 <ready_to_fly>
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]

  if (ready)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <main+0x8e>
  {
	  /* Signal Flight Ready Status with LED */
	  led_status(READY);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe fc85 	bl	8000fc8 <led_status>

	  /* Initialize Motor Inputs (PWM Output) */
	  arm_drone(ENABLE);
 80026be:	2001      	movs	r0, #1
 80026c0:	f001 fc9c 	bl	8003ffc <arm_drone>
 80026c4:	e005      	b.n	80026d2 <main+0x9a>
  }
  else if (!ready)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <main+0x9a>
  {
	  /* Signal Error Status with LED if Initialization Fails */
	  led_status(ERROR);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7fe fc7b 	bl	8000fc8 <led_status>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if (armed())
 80026d2:	f7ff fc31 	bl	8001f38 <armed>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <main+0xd2>
	 {
		/* Signal Ready Status with LED */
		led_status(READY);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe fc73 	bl	8000fc8 <led_status>

		/* Get User Input */
		get_state_request(&sysState);
 80026e2:	480f      	ldr	r0, [pc, #60]	; (8002720 <main+0xe8>)
 80026e4:	f7ff ff14 	bl	8002510 <get_state_request>

		/* Read Sensor Data */
		read_sensor_data(&sensPackage);
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <main+0xe0>)
 80026ea:	f7ff ff1c 	bl	8002526 <read_sensor_data>

		/* Estimate State */
		estimate_state(&sensPackage, &sysState);
 80026ee:	490c      	ldr	r1, [pc, #48]	; (8002720 <main+0xe8>)
 80026f0:	4809      	ldr	r0, [pc, #36]	; (8002718 <main+0xe0>)
 80026f2:	f7ff ff24 	bl	800253e <estimate_state>

		/* PID Control */
		control_state(&sensPackage, &sysState);
 80026f6:	490a      	ldr	r1, [pc, #40]	; (8002720 <main+0xe8>)
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <main+0xe0>)
 80026fa:	f7ff ff2f 	bl	800255c <control_state>

		/* Apply Motor Mixing Algorithm & Set Duty Cycles */
		actuator_set(&sensPackage, &sysState, &mtrCmds);
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <main+0xec>)
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <main+0xe8>)
 8002702:	4805      	ldr	r0, [pc, #20]	; (8002718 <main+0xe0>)
 8002704:	f7ff ff86 	bl	8002614 <actuator_set>
 8002708:	e7e3      	b.n	80026d2 <main+0x9a>
	 }

	 else
	 {
		/* Disarm Drone */
		arm_drone(DISABLE);
 800270a:	2000      	movs	r0, #0
 800270c:	f001 fc76 	bl	8003ffc <arm_drone>

		/* Signal Waiting Status with LED */
		led_status(WAITING);
 8002710:	2002      	movs	r0, #2
 8002712:	f7fe fc59 	bl	8000fc8 <led_status>
	 if (armed())
 8002716:	e7dc      	b.n	80026d2 <main+0x9a>
 8002718:	200007f4 	.word	0x200007f4
 800271c:	2000071c 	.word	0x2000071c
 8002720:	20000000 	.word	0x20000000
 8002724:	20000864 	.word	0x20000864

08002728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b094      	sub	sp, #80	; 0x50
 800272c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	2230      	movs	r2, #48	; 0x30
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f00e f983 	bl	8010a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <SystemClock_Config+0xcc>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <SystemClock_Config+0xcc>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6413      	str	r3, [r2, #64]	; 0x40
 800275c:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <SystemClock_Config+0xcc>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <SystemClock_Config+0xd0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <SystemClock_Config+0xd0>)
 8002772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <SystemClock_Config+0xd0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002784:	2301      	movs	r3, #1
 8002786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278e:	2302      	movs	r3, #2
 8002790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002798:	2306      	movs	r3, #6
 800279a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800279c:	23a8      	movs	r3, #168	; 0xa8
 800279e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027a0:	2302      	movs	r3, #2
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027a4:	2307      	movs	r3, #7
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a8:	f107 0320 	add.w	r3, r7, #32
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fe5b 	bl	8007468 <HAL_RCC_OscConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027b8:	f000 fbaf 	bl	8002f1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027bc:	230f      	movs	r3, #15
 80027be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c0:	2302      	movs	r3, #2
 80027c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	2105      	movs	r1, #5
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 f8bc 	bl	8007958 <HAL_RCC_ClockConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027e6:	f000 fb98 	bl	8002f1a <Error_Handler>
  }
}
 80027ea:	bf00      	nop
 80027ec:	3750      	adds	r7, #80	; 0x50
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40007000 	.word	0x40007000

080027fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <MX_I2C1_Init+0x50>)
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <MX_I2C1_Init+0x54>)
 8002804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_I2C1_Init+0x50>)
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <MX_I2C1_Init+0x58>)
 800280a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <MX_I2C1_Init+0x50>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_I2C1_Init+0x50>)
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_I2C1_Init+0x50>)
 800281a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800281e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <MX_I2C1_Init+0x50>)
 8002822:	2200      	movs	r2, #0
 8002824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_I2C1_Init+0x50>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <MX_I2C1_Init+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_I2C1_Init+0x50>)
 8002834:	2200      	movs	r2, #0
 8002836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002838:	4804      	ldr	r0, [pc, #16]	; (800284c <MX_I2C1_Init+0x50>)
 800283a:	f002 fbd9 	bl	8004ff0 <HAL_I2C_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002844:	f000 fb69 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200004ac 	.word	0x200004ac
 8002850:	40005400 	.word	0x40005400
 8002854:	000186a0 	.word	0x000186a0

08002858 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <MX_SDIO_SD_Init+0x40>)
 8002860:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 8002876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800287a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <MX_SDIO_SD_Init+0x3c>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000500 	.word	0x20000500
 8002898:	40012c00 	.word	0x40012c00

0800289c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028ba:	463b      	mov	r3, r7
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <MX_TIM2_Init+0xf0>)
 80028c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <MX_TIM2_Init+0xf0>)
 80028d0:	2253      	movs	r2, #83	; 0x53
 80028d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <MX_TIM2_Init+0xf0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <MX_TIM2_Init+0xf0>)
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <MX_TIM2_Init+0xf0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <MX_TIM2_Init+0xf0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028ee:	4827      	ldr	r0, [pc, #156]	; (800298c <MX_TIM2_Init+0xf0>)
 80028f0:	f006 fd31 	bl	8009356 <HAL_TIM_Base_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80028fa:	f000 fb0e 	bl	8002f1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002902:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002904:	f107 0318 	add.w	r3, r7, #24
 8002908:	4619      	mov	r1, r3
 800290a:	4820      	ldr	r0, [pc, #128]	; (800298c <MX_TIM2_Init+0xf0>)
 800290c:	f007 fc02 	bl	800a114 <HAL_TIM_ConfigClockSource>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002916:	f000 fb00 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800291a:	481c      	ldr	r0, [pc, #112]	; (800298c <MX_TIM2_Init+0xf0>)
 800291c:	f006 ff64 	bl	80097e8 <HAL_TIM_IC_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002926:	f000 faf8 	bl	8002f1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4619      	mov	r1, r3
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <MX_TIM2_Init+0xf0>)
 800293a:	f008 f959 	bl	800abf0 <HAL_TIMEx_MasterConfigSynchronization>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002944:	f000 fae9 	bl	8002f1a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002948:	230a      	movs	r3, #10
 800294a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800294c:	2301      	movs	r3, #1
 800294e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002958:	463b      	mov	r3, r7
 800295a:	2208      	movs	r2, #8
 800295c:	4619      	mov	r1, r3
 800295e:	480b      	ldr	r0, [pc, #44]	; (800298c <MX_TIM2_Init+0xf0>)
 8002960:	f007 fa7a 	bl	8009e58 <HAL_TIM_IC_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800296a:	f000 fad6 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800296e:	463b      	mov	r3, r7
 8002970:	220c      	movs	r2, #12
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_TIM2_Init+0xf0>)
 8002976:	f007 fa6f 	bl	8009e58 <HAL_TIM_IC_ConfigChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002980:	f000 facb 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000644 	.word	0x20000644

08002990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002996:	f107 0318 	add.w	r3, r7, #24
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029ae:	463b      	mov	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029bc:	4a31      	ldr	r2, [pc, #196]	; (8002a84 <MX_TIM3_Init+0xf4>)
 80029be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029c2:	2253      	movs	r2, #83	; 0x53
 80029c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029e0:	4827      	ldr	r0, [pc, #156]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029e2:	f006 fcb8 	bl	8009356 <HAL_TIM_Base_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80029ec:	f000 fa95 	bl	8002f1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029f6:	f107 0318 	add.w	r3, r7, #24
 80029fa:	4619      	mov	r1, r3
 80029fc:	4820      	ldr	r0, [pc, #128]	; (8002a80 <MX_TIM3_Init+0xf0>)
 80029fe:	f007 fb89 	bl	800a114 <HAL_TIM_ConfigClockSource>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a08:	f000 fa87 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002a0c:	481c      	ldr	r0, [pc, #112]	; (8002a80 <MX_TIM3_Init+0xf0>)
 8002a0e:	f006 feeb 	bl	80097e8 <HAL_TIM_IC_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a18:	f000 fa7f 	bl	8002f1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4815      	ldr	r0, [pc, #84]	; (8002a80 <MX_TIM3_Init+0xf0>)
 8002a2c:	f008 f8e0 	bl	800abf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002a36:	f000 fa70 	bl	8002f1a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <MX_TIM3_Init+0xf0>)
 8002a52:	f007 fa01 	bl	8009e58 <HAL_TIM_IC_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002a5c:	f000 fa5d 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a60:	463b      	mov	r3, r7
 8002a62:	2204      	movs	r2, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <MX_TIM3_Init+0xf0>)
 8002a68:	f007 f9f6 	bl	8009e58 <HAL_TIM_IC_ConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002a72:	f000 fa52 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000068c 	.word	0x2000068c
 8002a84:	40000400 	.word	0x40000400

08002a88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	615a      	str	r2, [r3, #20]
 8002ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ab8:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002aba:	4a33      	ldr	r2, [pc, #204]	; (8002b88 <MX_TIM4_Init+0x100>)
 8002abc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28-1;
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002ac0:	221b      	movs	r2, #27
 8002ac2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8002aca:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002acc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002ad0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ade:	4829      	ldr	r0, [pc, #164]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002ae0:	f006 fc39 	bl	8009356 <HAL_TIM_Base_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002aea:	f000 fa16 	bl	8002f1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af8:	4619      	mov	r1, r3
 8002afa:	4822      	ldr	r0, [pc, #136]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002afc:	f007 fb0a 	bl	800a114 <HAL_TIM_ConfigClockSource>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002b06:	f000 fa08 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b0a:	481e      	ldr	r0, [pc, #120]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002b0c:	f006 fcda 	bl	80094c4 <HAL_TIM_PWM_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002b16:	f000 fa00 	bl	8002f1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b22:	f107 0320 	add.w	r3, r7, #32
 8002b26:	4619      	mov	r1, r3
 8002b28:	4816      	ldr	r0, [pc, #88]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002b2a:	f008 f861 	bl	800abf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002b34:	f000 f9f1 	bl	8002f1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b38:	2360      	movs	r3, #96	; 0x60
 8002b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480d      	ldr	r0, [pc, #52]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002b50:	f007 fa1e 	bl	8009f90 <HAL_TIM_PWM_ConfigChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002b5a:	f000 f9de 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	220c      	movs	r2, #12
 8002b62:	4619      	mov	r1, r3
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002b66:	f007 fa13 	bl	8009f90 <HAL_TIM_PWM_ConfigChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002b70:	f000 f9d3 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b74:	4803      	ldr	r0, [pc, #12]	; (8002b84 <MX_TIM4_Init+0xfc>)
 8002b76:	f000 fc29 	bl	80033cc <HAL_TIM_MspPostInit>

}
 8002b7a:	bf00      	nop
 8002b7c:	3738      	adds	r7, #56	; 0x38
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200006d4 	.word	0x200006d4
 8002b88:	40000800 	.word	0x40000800

08002b8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b92:	463b      	mov	r3, r7
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <MX_TIM6_Init+0x68>)
 8002b9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002ba2:	2253      	movs	r2, #83	; 0x53
 8002ba4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bba:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002bbc:	f006 fbcb 	bl	8009356 <HAL_TIM_Base_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002bc6:	f000 f9a8 	bl	8002f1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <MX_TIM6_Init+0x64>)
 8002bd8:	f008 f80a 	bl	800abf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002be2:	f000 f99a 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000071c 	.word	0x2000071c
 8002bf4:	40001000 	.word	0x40001000

08002bf8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfe:	463b      	mov	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <MX_TIM7_Init+0x68>)
 8002c0a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c0e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002c12:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c2a:	f006 fb94 	bl	8009356 <HAL_TIM_Base_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002c34:	f000 f971 	bl	8002f1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c40:	463b      	mov	r3, r7
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_TIM7_Init+0x64>)
 8002c46:	f007 ffd3 	bl	800abf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002c50:	f000 f963 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000764 	.word	0x20000764
 8002c60:	40001400 	.word	0x40001400

08002c64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b096      	sub	sp, #88	; 0x58
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	2220      	movs	r2, #32
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f00d fed0 	bl	8010a42 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002ca4:	4a44      	ldr	r2, [pc, #272]	; (8002db8 <MX_TIM8_Init+0x154>)
 8002ca6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 56-1;
 8002ca8:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002caa:	2237      	movs	r2, #55	; 0x37
 8002cac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000-1;
 8002cb4:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cb6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002cba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cce:	4839      	ldr	r0, [pc, #228]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cd0:	f006 fb41 	bl	8009356 <HAL_TIM_Base_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002cda:	f000 f91e 	bl	8002f1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ce4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4832      	ldr	r0, [pc, #200]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cec:	f007 fa12 	bl	800a114 <HAL_TIM_ConfigClockSource>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002cf6:	f000 f910 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cfa:	482e      	ldr	r0, [pc, #184]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002cfc:	f006 fbe2 	bl	80094c4 <HAL_TIM_PWM_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002d06:	f000 f908 	bl	8002f1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d16:	4619      	mov	r1, r3
 8002d18:	4826      	ldr	r0, [pc, #152]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002d1a:	f007 ff69 	bl	800abf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002d24:	f000 f8f9 	bl	8002f1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d28:	2360      	movs	r3, #96	; 0x60
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d34:	2300      	movs	r3, #0
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4819      	ldr	r0, [pc, #100]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002d4e:	f007 f91f 	bl	8009f90 <HAL_TIM_PWM_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002d58:	f000 f8df 	bl	8002f1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	2204      	movs	r2, #4
 8002d62:	4619      	mov	r1, r3
 8002d64:	4813      	ldr	r0, [pc, #76]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002d66:	f007 f913 	bl	8009f90 <HAL_TIM_PWM_ConfigChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002d70:	f000 f8d3 	bl	8002f1a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4807      	ldr	r0, [pc, #28]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002d98:	f007 ffa6 	bl	800ace8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002da2:	f000 f8ba 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <MX_TIM8_Init+0x150>)
 8002da8:	f000 fb10 	bl	80033cc <HAL_TIM_MspPostInit>

}
 8002dac:	bf00      	nop
 8002dae:	3758      	adds	r7, #88	; 0x58
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200007ac 	.word	0x200007ac
 8002db8:	40010400 	.word	0x40010400

08002dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <MX_DMA_Init+0x4c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <MX_DMA_Init+0x4c>)
 8002dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <MX_DMA_Init+0x4c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	203b      	movs	r0, #59	; 0x3b
 8002de4:	f001 fb47 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002de8:	203b      	movs	r0, #59	; 0x3b
 8002dea:	f001 fb60 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2045      	movs	r0, #69	; 0x45
 8002df4:	f001 fb3f 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002df8:	2045      	movs	r0, #69	; 0x45
 8002dfa:	f001 fb58 	bl	80044ae <HAL_NVIC_EnableIRQ>

}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <MX_GPIO_Init+0xec>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	4812      	ldr	r0, [pc, #72]	; (8002efc <MX_GPIO_Init+0xf0>)
 8002eb4:	f002 f868 	bl	8004f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4619      	mov	r1, r3
 8002ece:	480b      	ldr	r0, [pc, #44]	; (8002efc <MX_GPIO_Init+0xf0>)
 8002ed0:	f001 fea6 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 ARM_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|ARM_Pin;
 8002ed4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	; (8002f00 <MX_GPIO_Init+0xf4>)
 8002eea:	f001 fe99 	bl	8004c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020400 	.word	0x40020400

08002f04 <HAL_TIM_IC_CaptureCallback>:
  *
  * @param  htim 	pointer to HAL Timer struct
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	read_rc_input(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fcad 	bl	800386c <read_rc_input>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1e:	b672      	cpsid	i
}
 8002f20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <Error_Handler+0x8>

08002f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_I2C_MspInit+0x84>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d12b      	bne.n	8002fee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_I2C_MspInit+0x88>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_I2C_MspInit+0x88>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_I2C_MspInit+0x88>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fb2:	23c0      	movs	r3, #192	; 0xc0
 8002fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb6:	2312      	movs	r3, #18
 8002fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480c      	ldr	r0, [pc, #48]	; (8003000 <HAL_I2C_MspInit+0x8c>)
 8002fce:	f001 fe27 	bl	8004c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_I2C_MspInit+0x88>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <HAL_I2C_MspInit+0x88>)
 8002fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_I2C_MspInit+0x88>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40005400 	.word	0x40005400
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020400 	.word	0x40020400

08003004 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a70      	ldr	r2, [pc, #448]	; (80031e4 <HAL_SD_MspInit+0x1e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f040 80da 	bne.w	80031dc <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	4b6e      	ldr	r3, [pc, #440]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	4a6d      	ldr	r2, [pc, #436]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 8003032:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003036:	6453      	str	r3, [r2, #68]	; 0x44
 8003038:	4b6b      	ldr	r3, [pc, #428]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4a66      	ldr	r2, [pc, #408]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6313      	str	r3, [r2, #48]	; 0x30
 8003054:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a5f      	ldr	r2, [pc, #380]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
 8003070:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_SD_MspInit+0x1e4>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800307c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003086:	2301      	movs	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800308e:	230c      	movs	r3, #12
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	4854      	ldr	r0, [pc, #336]	; (80031ec <HAL_SD_MspInit+0x1e8>)
 800309a:	f001 fdc1 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800309e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030b0:	230c      	movs	r3, #12
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	484c      	ldr	r0, [pc, #304]	; (80031ec <HAL_SD_MspInit+0x1e8>)
 80030bc:	f001 fdb0 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030c0:	2304      	movs	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030d0:	230c      	movs	r3, #12
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	4845      	ldr	r0, [pc, #276]	; (80031f0 <HAL_SD_MspInit+0x1ec>)
 80030dc:	f001 fda0 	bl	8004c20 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80030e0:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 80030e2:	4a45      	ldr	r2, [pc, #276]	; (80031f8 <HAL_SD_MspInit+0x1f4>)
 80030e4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 80030e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ec:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f4:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 80030fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003100:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 8003104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003108:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 800310c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003110:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 8003114:	2220      	movs	r2, #32
 8003116:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 800311a:	2200      	movs	r2, #0
 800311c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 8003120:	2204      	movs	r2, #4
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 8003126:	2203      	movs	r2, #3
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800312a:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 800312c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003132:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 8003134:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800313a:	482e      	ldr	r0, [pc, #184]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 800313c:	f001 f9d2 	bl	80044e4 <HAL_DMA_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003146:	f7ff fee8 	bl	8002f1a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
 8003150:	4a28      	ldr	r2, [pc, #160]	; (80031f4 <HAL_SD_MspInit+0x1f0>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 8003158:	4a29      	ldr	r2, [pc, #164]	; (8003200 <HAL_SD_MspInit+0x1fc>)
 800315a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 800315e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003162:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 8003172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003176:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003178:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 800317a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800317e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 8003182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003186:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 800318a:	2220      	movs	r2, #32
 800318c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 8003196:	2204      	movs	r2, #4
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 800319c:	2203      	movs	r2, #3
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 80031a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 80031aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80031b0:	4812      	ldr	r0, [pc, #72]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 80031b2:	f001 f997 	bl	80044e4 <HAL_DMA_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80031bc:	f7ff fead 	bl	8002f1a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80031c6:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_SD_MspInit+0x1f8>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	2031      	movs	r0, #49	; 0x31
 80031d2:	f001 f950 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80031d6:	2031      	movs	r0, #49	; 0x31
 80031d8:	f001 f969 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	20000584 	.word	0x20000584
 80031f8:	40026458 	.word	0x40026458
 80031fc:	200005e4 	.word	0x200005e4
 8003200:	400264a0 	.word	0x400264a0

08003204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b090      	sub	sp, #64	; 0x40
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d135      	bne.n	8003292 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
 800322a:	4b60      	ldr	r3, [pc, #384]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b56      	ldr	r3, [pc, #344]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800325e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003270:	2301      	movs	r3, #1
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003278:	4619      	mov	r1, r3
 800327a:	484d      	ldr	r0, [pc, #308]	; (80033b0 <HAL_TIM_Base_MspInit+0x1ac>)
 800327c:	f001 fcd0 	bl	8004c20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	201c      	movs	r0, #28
 8003286:	f001 f8f6 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800328a:	201c      	movs	r0, #28
 800328c:	f001 f90f 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003290:	e088      	b.n	80033a4 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM3)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a47      	ldr	r2, [pc, #284]	; (80033b4 <HAL_TIM_Base_MspInit+0x1b0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d134      	bne.n	8003306 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4a41      	ldr	r2, [pc, #260]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	6413      	str	r3, [r2, #64]	; 0x40
 80032ac:	4b3f      	ldr	r3, [pc, #252]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	623b      	str	r3, [r7, #32]
 80032b6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	4b38      	ldr	r3, [pc, #224]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032d4:	23c0      	movs	r3, #192	; 0xc0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032e4:	2302      	movs	r3, #2
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ec:	4619      	mov	r1, r3
 80032ee:	4832      	ldr	r0, [pc, #200]	; (80033b8 <HAL_TIM_Base_MspInit+0x1b4>)
 80032f0:	f001 fc96 	bl	8004c20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	201d      	movs	r0, #29
 80032fa:	f001 f8bc 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032fe:	201d      	movs	r0, #29
 8003300:	f001 f8d5 	bl	80044ae <HAL_NVIC_EnableIRQ>
}
 8003304:	e04e      	b.n	80033a4 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM4)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_TIM_Base_MspInit+0x1b8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d10e      	bne.n	800332e <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4a24      	ldr	r2, [pc, #144]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6413      	str	r3, [r2, #64]	; 0x40
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
}
 800332c:	e03a      	b.n	80033a4 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM6)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_TIM_Base_MspInit+0x1bc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003342:	f043 0310 	orr.w	r3, r3, #16
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	697b      	ldr	r3, [r7, #20]
}
 8003354:	e026      	b.n	80033a4 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM7)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <HAL_TIM_Base_MspInit+0x1c0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10e      	bne.n	800337e <HAL_TIM_Base_MspInit+0x17a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	4a10      	ldr	r2, [pc, #64]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800336a:	f043 0320 	orr.w	r3, r3, #32
 800336e:	6413      	str	r3, [r2, #64]	; 0x40
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	693b      	ldr	r3, [r7, #16]
}
 800337c:	e012      	b.n	80033a4 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_TIM_Base_MspInit+0x1c4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10d      	bne.n	80033a4 <HAL_TIM_Base_MspInit+0x1a0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	4a06      	ldr	r2, [pc, #24]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	6453      	str	r3, [r2, #68]	; 0x44
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <HAL_TIM_Base_MspInit+0x1a8>)
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3740      	adds	r7, #64	; 0x40
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40001000 	.word	0x40001000
 80033c4:	40001400 	.word	0x40001400
 80033c8:	40010400 	.word	0x40010400

080033cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a24      	ldr	r2, [pc, #144]	; (800347c <HAL_TIM_MspPostInit+0xb0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d11f      	bne.n	800342e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_TIM_MspPostInit+0xb4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_TIM_MspPostInit+0xb4>)
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_TIM_MspPostInit+0xb4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800340a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800340e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800341c:	2302      	movs	r3, #2
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	4619      	mov	r1, r3
 8003426:	4817      	ldr	r0, [pc, #92]	; (8003484 <HAL_TIM_MspPostInit+0xb8>)
 8003428:	f001 fbfa 	bl	8004c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800342c:	e022      	b.n	8003474 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <HAL_TIM_MspPostInit+0xbc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d11d      	bne.n	8003474 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_TIM_MspPostInit+0xb4>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <HAL_TIM_MspPostInit+0xb4>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6313      	str	r3, [r2, #48]	; 0x30
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_TIM_MspPostInit+0xb4>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003454:	23c0      	movs	r3, #192	; 0xc0
 8003456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003464:	2303      	movs	r3, #3
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	4619      	mov	r1, r3
 800346e:	4807      	ldr	r0, [pc, #28]	; (800348c <HAL_TIM_MspPostInit+0xc0>)
 8003470:	f001 fbd6 	bl	8004c20 <HAL_GPIO_Init>
}
 8003474:	bf00      	nop
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40000800 	.word	0x40000800
 8003480:	40023800 	.word	0x40023800
 8003484:	40020400 	.word	0x40020400
 8003488:	40010400 	.word	0x40010400
 800348c:	40020800 	.word	0x40020800

08003490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003494:	e7fe      	b.n	8003494 <NMI_Handler+0x4>

08003496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349a:	e7fe      	b.n	800349a <HardFault_Handler+0x4>

0800349c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a0:	e7fe      	b.n	80034a0 <MemManage_Handler+0x4>

080034a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a2:	b480      	push	{r7}
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a6:	e7fe      	b.n	80034a6 <BusFault_Handler+0x4>

080034a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ac:	e7fe      	b.n	80034ac <UsageFault_Handler+0x4>

080034ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034dc:	f000 feac 	bl	8004238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <TIM2_IRQHandler+0x10>)
 80034ea:	f006 fbad 	bl	8009c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000644 	.word	0x20000644

080034f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <TIM3_IRQHandler+0x10>)
 80034fe:	f006 fba3 	bl	8009c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000068c 	.word	0x2000068c

0800350c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <SDIO_IRQHandler+0x10>)
 8003512:	f004 fe65 	bl	80081e0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000500 	.word	0x20000500

08003520 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <DMA2_Stream3_IRQHandler+0x10>)
 8003526:	f001 f905 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000584 	.word	0x20000584

08003534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <OTG_FS_IRQHandler+0x10>)
 800353a:	f002 fe68 	bl	800620e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20001da4 	.word	0x20001da4

08003548 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <DMA2_Stream6_IRQHandler+0x10>)
 800354e:	f001 f8f1 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200005e4 	.word	0x200005e4

0800355c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return 1;
 8003560:	2301      	movs	r3, #1
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_kill>:

int _kill(int pid, int sig)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003576:	f00d fab7 	bl	8010ae8 <__errno>
 800357a:	4603      	mov	r3, r0
 800357c:	2216      	movs	r2, #22
 800357e:	601a      	str	r2, [r3, #0]
  return -1;
 8003580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_exit>:

void _exit (int status)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003594:	f04f 31ff 	mov.w	r1, #4294967295
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ffe7 	bl	800356c <_kill>
  while (1) {}    /* Make sure we hang here */
 800359e:	e7fe      	b.n	800359e <_exit+0x12>

080035a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e00a      	b.n	80035c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035b2:	f3af 8000 	nop.w
 80035b6:	4601      	mov	r1, r0
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	60ba      	str	r2, [r7, #8]
 80035be:	b2ca      	uxtb	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dbf0      	blt.n	80035b2 <_read+0x12>
  }

  return len;
 80035d0:	687b      	ldr	r3, [r7, #4]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e009      	b.n	8003600 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	60ba      	str	r2, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	dbf1      	blt.n	80035ec <_write+0x12>
  }
  return len;
 8003608:	687b      	ldr	r3, [r7, #4]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_close>:

int _close(int file)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800363a:	605a      	str	r2, [r3, #4]
  return 0;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_isatty>:

int _isatty(int file)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003652:	2301      	movs	r3, #1
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <_sbrk+0x5c>)
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <_sbrk+0x60>)
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <_sbrk+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <_sbrk+0x64>)
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <_sbrk+0x68>)
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <_sbrk+0x64>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d207      	bcs.n	80036bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036ac:	f00d fa1c 	bl	8010ae8 <__errno>
 80036b0:	4603      	mov	r3, r0
 80036b2:	220c      	movs	r2, #12
 80036b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e009      	b.n	80036d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <_sbrk+0x64>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <_sbrk+0x64>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <_sbrk+0x64>)
 80036cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20020000 	.word	0x20020000
 80036dc:	00000400 	.word	0x00000400
 80036e0:	20000874 	.word	0x20000874
 80036e4:	20002620 	.word	0x20002620

080036e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <SystemInit+0x20>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	4a05      	ldr	r2, [pc, #20]	; (8003708 <SystemInit+0x20>)
 80036f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <mapf>:
	if (num < 0.0) return -1;
	return 0;
}

static inline float mapf(float val, float in_min, float in_max, float out_min, float out_max)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	ed87 0a05 	vstr	s0, [r7, #20]
 8003716:	edc7 0a04 	vstr	s1, [r7, #16]
 800371a:	ed87 1a03 	vstr	s2, [r7, #12]
 800371e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003722:	ed87 2a01 	vstr	s4, [r7, #4]
	return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003726:	ed97 7a05 	vldr	s14, [r7, #20]
 800372a:	edd7 7a04 	vldr	s15, [r7, #16]
 800372e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003732:	edd7 6a01 	vldr	s13, [r7, #4]
 8003736:	edd7 7a02 	vldr	s15, [r7, #8]
 800373a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800373e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003742:	ed97 7a03 	vldr	s14, [r7, #12]
 8003746:	edd7 7a04 	vldr	s15, [r7, #16]
 800374a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	edd7 7a02 	vldr	s15, [r7, #8]
 8003756:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800375a:	eeb0 0a67 	vmov.f32	s0, s15
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <check_pulse_width>:
  *
  * @param  pw		pulsewidth
  * @retval 		either pulsewidth or inverted pulsewidth
  */
static float check_pulse_width(float pw)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pw > PWM_PULSE_MAX)
 8003772:	edd7 7a01 	vldr	s15, [r7, #4]
 8003776:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80037a4 <check_pulse_width+0x3c>
 800377a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	dd06      	ble.n	8003792 <check_pulse_width+0x2a>
		return (HZ_TO_INTERVAL_US((float)PWM_FREQ_HZ) - pw); //Invert Pulse Width
 8003784:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80037a8 <check_pulse_width+0x40>
 8003788:	edd7 7a01 	vldr	s15, [r7, #4]
 800378c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003790:	e001      	b.n	8003796 <check_pulse_width+0x2e>
	else
		return pw;
 8003792:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8003796:	eeb0 0a67 	vmov.f32	s0, s15
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	45002000 	.word	0x45002000
 80037a8:	469c4000 	.word	0x469c4000

080037ac <get_pulse_width>:
  * @param  ch		pointer to channel struct
  *
  * @retval None
  */
static void get_pulse_width(TIM_HandleTypeDef *htim, channel *ch)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	uint32_t counter_period, ref_clk_mhz;
	counter_period = htim->Init.Period + 1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
	ref_clk_mhz = APB1_CLK_FREQ_MHZ/(htim->Init.Prescaler + 1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	3301      	adds	r3, #1
 80037c4:	2254      	movs	r2, #84	; 0x54
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	613b      	str	r3, [r7, #16]

	if (ch->is_first_captured == 0)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	7c1b      	ldrb	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10c      	bne.n	80037ee <get_pulse_width+0x42>
	{
		ch->icval1 = HAL_TIM_ReadCapturedValue(htim, ch->id);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 fd62 	bl	800a2a4 <HAL_TIM_ReadCapturedValue>
 80037e0:	4602      	mov	r2, r0
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	601a      	str	r2, [r3, #0]
		ch->is_first_captured = 1;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	741a      	strb	r2, [r3, #16]
		pulsewidth_us = ((float)ch->icdiff) / (ref_clk_mhz);
		ch->pulsewidth_us = check_pulse_width(pulsewidth_us); //inverse protection

		ch->is_first_captured = 0; //reset edge counter
	}
}
 80037ec:	e03a      	b.n	8003864 <get_pulse_width+0xb8>
		ch->icval2 = HAL_TIM_ReadCapturedValue(htim, ch->id);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f006 fd55 	bl	800a2a4 <HAL_TIM_ReadCapturedValue>
 80037fa:	4602      	mov	r2, r0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	605a      	str	r2, [r3, #4]
		if (ch->icval2 > ch->icval1)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d907      	bls.n	800381c <get_pulse_width+0x70>
			ch->icdiff = ch->icval2 - ch->icval1;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	e008      	b.n	800382e <get_pulse_width+0x82>
			ch->icdiff = (counter_period - ch->icval1) + ch->icval2; //overflow protection
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	441a      	add	r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	609a      	str	r2, [r3, #8]
		pulsewidth_us = ((float)ch->icdiff) / (ref_clk_mhz);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003848:	edc7 7a03 	vstr	s15, [r7, #12]
		ch->pulsewidth_us = check_pulse_width(pulsewidth_us); //inverse protection
 800384c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003850:	f7ff ff8a 	bl	8003768 <check_pulse_width>
 8003854:	eef0 7a40 	vmov.f32	s15, s0
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	edc3 7a05 	vstr	s15, [r3, #20]
		ch->is_first_captured = 0; //reset edge counter
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	741a      	strb	r2, [r3, #16]
}
 8003864:	bf00      	nop
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <read_rc_input>:
  *
  * @param  htim	pointer to HAL timer struct
  * @retval None
  */
void read_rc_input(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	switch(htim->Channel)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7f1b      	ldrb	r3, [r3, #28]
 8003878:	3b01      	subs	r3, #1
 800387a:	2b07      	cmp	r3, #7
 800387c:	d826      	bhi.n	80038cc <read_rc_input+0x60>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <read_rc_input+0x18>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038a5 	.word	0x080038a5
 8003888:	080038af 	.word	0x080038af
 800388c:	080038cd 	.word	0x080038cd
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038cd 	.word	0x080038cd
 8003898:	080038cd 	.word	0x080038cd
 800389c:	080038cd 	.word	0x080038cd
 80038a0:	080038c3 	.word	0x080038c3
	{
		case HAL_TIM_ACTIVE_CHANNEL_1:
			get_pulse_width(htim, &ic.ch1);
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <read_rc_input+0x6c>)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff80 	bl	80037ac <get_pulse_width>
			break;
 80038ac:	e00f      	b.n	80038ce <read_rc_input+0x62>

		case HAL_TIM_ACTIVE_CHANNEL_2:
			get_pulse_width(htim, &ic.ch2);
 80038ae:	490b      	ldr	r1, [pc, #44]	; (80038dc <read_rc_input+0x70>)
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff7b 	bl	80037ac <get_pulse_width>
			break;
 80038b6:	e00a      	b.n	80038ce <read_rc_input+0x62>

		case HAL_TIM_ACTIVE_CHANNEL_3:
			get_pulse_width(htim, &ic.ch3);
 80038b8:	4909      	ldr	r1, [pc, #36]	; (80038e0 <read_rc_input+0x74>)
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff76 	bl	80037ac <get_pulse_width>
			break;
 80038c0:	e005      	b.n	80038ce <read_rc_input+0x62>

		case HAL_TIM_ACTIVE_CHANNEL_4:
			get_pulse_width(htim, &ic.ch4);
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <read_rc_input+0x78>)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff71 	bl	80037ac <get_pulse_width>
			break;
 80038ca:	e000      	b.n	80038ce <read_rc_input+0x62>

		default:
			break;
 80038cc:	bf00      	nop
	}
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000154 	.word	0x20000154
 80038dc:	2000016c 	.word	0x2000016c
 80038e0:	20000184 	.word	0x20000184
 80038e4:	2000019c 	.word	0x2000019c

080038e8 <get_user_input>:
  *
  * @param  st		pointer to systemState struct
  * @retval None
  */
void get_user_input(systemState *st)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	st->roll.request     = mapf(ic.ch2.pulsewidth_us, PWM_RANGE_MIN, PWM_RANGE_MAX, ROLL_MIN, ROLL_MAX);
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <get_user_input+0xb0>)
 80038f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80038f6:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 80038fa:	eefa 1a04 	vmov.f32	s3, #164	; 0xc1200000 -10.0
 80038fe:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800399c <get_user_input+0xb4>
 8003902:	eddf 0a27 	vldr	s1, [pc, #156]	; 80039a0 <get_user_input+0xb8>
 8003906:	eeb0 0a67 	vmov.f32	s0, s15
 800390a:	f7ff feff 	bl	800370c <mapf>
 800390e:	eef0 7a40 	vmov.f32	s15, s0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	edc3 7a00 	vstr	s15, [r3]
	st->pitch.request    = mapf(ic.ch1.pulsewidth_us, PWM_RANGE_MIN, PWM_RANGE_MAX, PITCH_MIN, PITCH_MAX);
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <get_user_input+0xb0>)
 800391a:	edd3 7a05 	vldr	s15, [r3, #20]
 800391e:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 8003922:	eefa 1a04 	vmov.f32	s3, #164	; 0xc1200000 -10.0
 8003926:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800399c <get_user_input+0xb4>
 800392a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80039a0 <get_user_input+0xb8>
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	f7ff feeb 	bl	800370c <mapf>
 8003936:	eef0 7a40 	vmov.f32	s15, s0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	st->throttle.request = mapf(ic.ch3.pulsewidth_us, PWM_RANGE_MIN, PWM_RANGE_MAX, THROTTLE_MIN, THROTTLE_MAX);
 8003940:	4b15      	ldr	r3, [pc, #84]	; (8003998 <get_user_input+0xb0>)
 8003942:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003946:	ed9f 2a17 	vldr	s4, [pc, #92]	; 80039a4 <get_user_input+0xbc>
 800394a:	eddf 1a17 	vldr	s3, [pc, #92]	; 80039a8 <get_user_input+0xc0>
 800394e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800399c <get_user_input+0xb4>
 8003952:	eddf 0a13 	vldr	s1, [pc, #76]	; 80039a0 <get_user_input+0xb8>
 8003956:	eeb0 0a67 	vmov.f32	s0, s15
 800395a:	f7ff fed7 	bl	800370c <mapf>
 800395e:	eef0 7a40 	vmov.f32	s15, s0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
	st->yaw.request		 = mapf(ic.ch4.pulsewidth_us, PWM_RANGE_MIN, PWM_RANGE_MAX, YAW_MIN, YAW_MAX);
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <get_user_input+0xb0>)
 800396a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800396e:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 80039ac <get_user_input+0xc4>
 8003972:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80039b0 <get_user_input+0xc8>
 8003976:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800399c <get_user_input+0xb4>
 800397a:	eddf 0a09 	vldr	s1, [pc, #36]	; 80039a0 <get_user_input+0xb8>
 800397e:	eeb0 0a67 	vmov.f32	s0, s15
 8003982:	f7ff fec3 	bl	800370c <mapf>
 8003986:	eef0 7a40 	vmov.f32	s15, s0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000154 	.word	0x20000154
 800399c:	44fb8000 	.word	0x44fb8000
 80039a0:	44770000 	.word	0x44770000
 80039a4:	42c80000 	.word	0x42c80000
 80039a8:	00000000 	.word	0x00000000
 80039ac:	43340000 	.word	0x43340000
 80039b0:	c3340000 	.word	0xc3340000

080039b4 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af04      	add	r7, sp, #16
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	461a      	mov	r2, r3
 80039c0:	460b      	mov	r3, r1
 80039c2:	72fb      	strb	r3, [r7, #11]
 80039c4:	4613      	mov	r3, r2
 80039c6:	813b      	strh	r3, [r7, #8]
  if (handle == &hi2c1)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <platform_write+0x44>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10d      	bne.n	80039ec <platform_write+0x38>
  {
	  HAL_I2C_Mem_Write(handle, LSM6DSOX_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80039d0:	7afb      	ldrb	r3, [r7, #11]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039d8:	9302      	str	r3, [sp, #8]
 80039da:	893b      	ldrh	r3, [r7, #8]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2301      	movs	r3, #1
 80039e4:	21d5      	movs	r1, #213	; 0xd5
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f001 fc46 	bl	8005278 <HAL_I2C_Mem_Write>
  }
  return 0;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200004ac 	.word	0x200004ac

080039fc <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af04      	add	r7, sp, #16
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	72fb      	strb	r3, [r7, #11]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	813b      	strh	r3, [r7, #8]
  if (handle == &hi2c1)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <platform_read+0x44>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10d      	bne.n	8003a34 <platform_read+0x38>
  {
	  HAL_I2C_Mem_Read(handle, LSM6DSOX_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	893b      	ldrh	r3, [r7, #8]
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	21d5      	movs	r1, #213	; 0xd5
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f001 fd1c 	bl	800546c <HAL_I2C_Mem_Read>
  }
  return 0;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200004ac 	.word	0x200004ac

08003a44 <lsm6dsox_setup>:
  *
  * @param  imu		pointer to (imu) device struct
  * @retval None
  */
void lsm6dsox_setup(device *imu)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

	uint8_t whoamI, rst;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8003a4c:	4b27      	ldr	r3, [pc, #156]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a4e:	4a28      	ldr	r2, [pc, #160]	; (8003af0 <lsm6dsox_setup+0xac>)
 8003a50:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a54:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <lsm6dsox_setup+0xb0>)
 8003a56:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a5a:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <lsm6dsox_setup+0xb4>)
 8003a5c:	609a      	str	r2, [r3, #8]

	/* Wait sensor boot time */
	delay(10);
 8003a5e:	200a      	movs	r0, #10
 8003a60:	f7fd fad5 	bl	800100e <delay>

	/* Check device ID */
	lsm6dsox_device_id_get(&dev_ctx, &whoamI);
 8003a64:	f107 030f 	add.w	r3, r7, #15
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4820      	ldr	r0, [pc, #128]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a6c:	f7fd ff6d 	bl	800194a <lsm6dsox_device_id_get>
	if (whoamI != LSM6DSOX_ID)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b6c      	cmp	r3, #108	; 0x6c
 8003a74:	d000      	beq.n	8003a78 <lsm6dsox_setup+0x34>
	  while(1);
 8003a76:	e7fe      	b.n	8003a76 <lsm6dsox_setup+0x32>

	/* Restore default configuration */
	lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8003a78:	2101      	movs	r1, #1
 8003a7a:	481c      	ldr	r0, [pc, #112]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a7c:	f7fd ff76 	bl	800196c <lsm6dsox_reset_set>
	do {
	  lsm6dsox_reset_get(&dev_ctx, &rst);
 8003a80:	f107 030e 	add.w	r3, r7, #14
 8003a84:	4619      	mov	r1, r3
 8003a86:	4819      	ldr	r0, [pc, #100]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a88:	f7fd ff96 	bl	80019b8 <lsm6dsox_reset_get>
	} while (rst);
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f6      	bne.n	8003a80 <lsm6dsox_setup+0x3c>

	/* Disable I3C interface */
	lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	4815      	ldr	r0, [pc, #84]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a96:	f7fe f806 	bl	8001aa6 <lsm6dsox_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4813      	ldr	r0, [pc, #76]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003a9e:	f7fd fe7b 	bl	8001798 <lsm6dsox_block_data_update_set>

	/* Set Power Mode */
	lsm6dsox_xl_power_mode_set(&dev_ctx, LSM6DSOX_HIGH_PERFORMANCE_MD);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4811      	ldr	r0, [pc, #68]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003aa6:	f7fd fe9d 	bl	80017e4 <lsm6dsox_xl_power_mode_set>
	lsm6dsox_gy_power_mode_set(&dev_ctx, LSM6DSOX_GY_HIGH_PERFORMANCE);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	480f      	ldr	r0, [pc, #60]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003aae:	f7fd fede 	bl	800186e <lsm6dsox_gy_power_mode_set>

	/* Set Output Data Rate */
	lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_417Hz);
 8003ab2:	2106      	movs	r1, #6
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003ab6:	f7fd fb71 	bl	800119c <lsm6dsox_xl_data_rate_set>
	lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_417Hz);
 8003aba:	2106      	movs	r1, #6
 8003abc:	480b      	ldr	r0, [pc, #44]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003abe:	f7fd fcff 	bl	80014c0 <lsm6dsox_gy_data_rate_set>

	/* Set full scale */
	lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_2g);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4809      	ldr	r0, [pc, #36]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003ac6:	f7fd fb43 	bl	8001150 <lsm6dsox_xl_full_scale_set>
	lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_2000dps);
 8003aca:	2106      	movs	r1, #6
 8003acc:	4807      	ldr	r0, [pc, #28]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003ace:	f7fd fcd1 	bl	8001474 <lsm6dsox_gy_full_scale_set>
	/*
	 * Configure filtering chain(No aux interface)
	 *
	 * Accelerometer - LPF1 + LPF2 path
	 */
	lsm6dsox_xl_hp_path_on_out_set(&dev_ctx, LSM6DSOX_LP_ODR_DIV_10);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4805      	ldr	r0, [pc, #20]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003ad6:	f7fd ffae 	bl	8001a36 <lsm6dsox_xl_hp_path_on_out_set>
	lsm6dsox_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8003ada:	2101      	movs	r1, #1
 8003adc:	4803      	ldr	r0, [pc, #12]	; (8003aec <lsm6dsox_setup+0xa8>)
 8003ade:	f7fd ff84 	bl	80019ea <lsm6dsox_xl_filter_lp2_set>

	//	lsm6dsox_xl_usr_offset_x_set(ctx, &offset);
	//	lsm6dsox_xl_usr_offset_y_set(ctx, &offset);
	//	lsm6dsox_xl_usr_offset_z_set(ctx, &offset);

}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000878 	.word	0x20000878
 8003af0:	080039b5 	.word	0x080039b5
 8003af4:	080039fd 	.word	0x080039fd
 8003af8:	200004ac 	.word	0x200004ac

08003afc <lowpass_filt>:
  * @param  Wc		cutoff frequency
  *
  * @retval None
  */
static void lowpass_filt(sensor_3d *sens, float Wc)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	ed87 0a00 	vstr	s0, [r7]
	static float x, y, z, x_filtered, y_filtered, z_filtered, T;

	/* LPF Difference Equation */
	T = sens->timestep;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4a4b      	ldr	r2, [pc, #300]	; (8003c3c <lowpass_filt+0x140>)
 8003b0e:	6013      	str	r3, [r2, #0]

	float A = (2 - T*Wc)/(2 + T*Wc);
 8003b10:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <lowpass_filt+0x140>)
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	edd7 7a00 	vldr	s15, [r7]
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b26:	4b45      	ldr	r3, [pc, #276]	; (8003c3c <lowpass_filt+0x140>)
 8003b28:	ed93 7a00 	vldr	s14, [r3]
 8003b2c:	edd7 7a00 	vldr	s15, [r7]
 8003b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b40:	edc7 7a03 	vstr	s15, [r7, #12]
	float B = (T*Wc)/(2 + T*Wc);
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <lowpass_filt+0x140>)
 8003b46:	ed93 7a00 	vldr	s14, [r3]
 8003b4a:	edd7 7a00 	vldr	s15, [r7]
 8003b4e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b52:	4b3a      	ldr	r3, [pc, #232]	; (8003c3c <lowpass_filt+0x140>)
 8003b54:	ed93 7a00 	vldr	s14, [r3]
 8003b58:	edd7 7a00 	vldr	s15, [r7]
 8003b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6c:	edc7 7a02 	vstr	s15, [r7, #8]
	sens->x_filtered = A*(x_filtered) + B*(sens->x + x);
 8003b70:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <lowpass_filt+0x144>)
 8003b72:	ed93 7a00 	vldr	s14, [r3]
 8003b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	edd3 6a00 	vldr	s13, [r3]
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <lowpass_filt+0x148>)
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	edc3 7a03 	vstr	s15, [r3, #12]
	sens->y_filtered = A*(y_filtered) + B*(sens->y + y);
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <lowpass_filt+0x14c>)
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <lowpass_filt+0x150>)
 8003bb6:	edd3 7a00 	vldr	s15, [r3]
 8003bba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	edc3 7a04 	vstr	s15, [r3, #16]
	sens->z_filtered = A*(z_filtered) + B*(sens->z + z);
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <lowpass_filt+0x154>)
 8003bd2:	ed93 7a00 	vldr	s14, [r3]
 8003bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	edd3 6a02 	vldr	s13, [r3, #8]
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <lowpass_filt+0x158>)
 8003be6:	edd3 7a00 	vldr	s15, [r3]
 8003bea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Update Previous Measurements */
	x = sens->x;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <lowpass_filt+0x148>)
 8003c06:	6013      	str	r3, [r2, #0]
	y = sens->y;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	; (8003c4c <lowpass_filt+0x150>)
 8003c0e:	6013      	str	r3, [r2, #0]
	z = sens->z;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <lowpass_filt+0x158>)
 8003c16:	6013      	str	r3, [r2, #0]
	x_filtered = sens->x_filtered;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <lowpass_filt+0x144>)
 8003c1e:	6013      	str	r3, [r2, #0]
	y_filtered = sens->y_filtered;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <lowpass_filt+0x14c>)
 8003c26:	6013      	str	r3, [r2, #0]
	z_filtered = sens->z_filtered;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <lowpass_filt+0x154>)
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	20000884 	.word	0x20000884
 8003c40:	20000888 	.word	0x20000888
 8003c44:	2000088c 	.word	0x2000088c
 8003c48:	20000890 	.word	0x20000890
 8003c4c:	20000894 	.word	0x20000894
 8003c50:	20000898 	.word	0x20000898
 8003c54:	2000089c 	.word	0x2000089c

08003c58 <get_calibrated_measurements>:
  *
  * @param  imu		pointer to (imu) device struct
  * @retval None
  */
static void get_calibrated_measurements(device *imu)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	float x,y,z;

	/* GYRO CALIBRATION CORRECTIONS */
	imu->gyro.x -= GYRO_XBIASOFFSET_MDPS;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003c66:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003d74 <get_calibrated_measurements+0x11c>
 8003c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->gyro.y -= GYRO_YBIASOFFSET_MDPS;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c7a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003d78 <get_calibrated_measurements+0x120>
 8003c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	imu->gyro.z -= GYRO_ZBIASOFFSET_MDPS;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c8e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003d7c <get_calibrated_measurements+0x124>
 8003c92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/* ACCEL CALIBRATION CORRECTIONS */
	x = imu->accel.x - ACCEL_XBIASOFFSET_MG;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	edd3 7a00 	vldr	s15, [r3]
 8003ca2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003d80 <get_calibrated_measurements+0x128>
 8003ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003caa:	edc7 7a05 	vstr	s15, [r7, #20]
	y = imu->accel.y - ACCEL_YBIASOFFSET_MG;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cb4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003d84 <get_calibrated_measurements+0x12c>
 8003cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cbc:	edc7 7a04 	vstr	s15, [r7, #16]
	z = imu->accel.z - ACCEL_ZBIASOFFSET_MG;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cc6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003d88 <get_calibrated_measurements+0x130>
 8003cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cce:	edc7 7a03 	vstr	s15, [r7, #12]

	imu->accel.x = (S11_xl)*x + (S12_xl)*y + (S13_xl)*z;
 8003cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cd6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003d8c <get_calibrated_measurements+0x134>
 8003cda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003d90 <get_calibrated_measurements+0x138>
 8003ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003d94 <get_calibrated_measurements+0x13c>
 8003cf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	edc3 7a00 	vstr	s15, [r3]
	imu->accel.y = (S21_xl)*x + (S22_xl)*y + (S23_xl)*z;
 8003d04:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d08:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003d90 <get_calibrated_measurements+0x138>
 8003d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d14:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003d98 <get_calibrated_measurements+0x140>
 8003d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d24:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003d9c <get_calibrated_measurements+0x144>
 8003d28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->accel.z = (S31_xl)*x + (S32_xl)*y + (S33_xl)*z;
 8003d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d3a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003d94 <get_calibrated_measurements+0x13c>
 8003d3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d42:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d46:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003d9c <get_calibrated_measurements+0x144>
 8003d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d56:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003da0 <get_calibrated_measurements+0x148>
 8003d5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	438c0000 	.word	0x438c0000
 8003d78:	43f50000 	.word	0x43f50000
 8003d7c:	430c0000 	.word	0x430c0000
 8003d80:	409e1214 	.word	0x409e1214
 8003d84:	41a1b56e 	.word	0x41a1b56e
 8003d88:	3ffb45e9 	.word	0x3ffb45e9
 8003d8c:	3f7d3bc1 	.word	0x3f7d3bc1
 8003d90:	36c9539c 	.word	0x36c9539c
 8003d94:	bb984e40 	.word	0xbb984e40
 8003d98:	3f8135a8 	.word	0x3f8135a8
 8003d9c:	39e94ee4 	.word	0x39e94ee4
 8003da0:	3f7e7254 	.word	0x3f7e7254

08003da4 <lsm6dsox_read_data>:
 *
 * @param	ctx		mems driver interface(ptr)
 *
 */
static void lsm6dsox_read_data(device *imu)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    // lsm6dsox_status_reg_get(&dev_ctx_imu, &reg.status_reg);

    // if (reg.status_reg.xlda && reg.status_reg.gda)
    //  {
		/* Read acceleration field data */
		memset(imu->accel.raw.u8bit, 0x00, 3 * sizeof(int16_t));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	331c      	adds	r3, #28
 8003db0:	2206      	movs	r2, #6
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f00c fe44 	bl	8010a42 <memset>
		lsm6dsox_acceleration_raw_get(&dev_ctx, imu->accel.raw.u8bit);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	331c      	adds	r3, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	482a      	ldr	r0, [pc, #168]	; (8003e6c <lsm6dsox_read_data+0xc8>)
 8003dc2:	f7fd fd8b 	bl	80018dc <lsm6dsox_acceleration_raw_get>
		imu->accel.x = lsm6dsox_from_fs2_to_mg(imu->accel.raw.i16bit[0]);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd f98f 	bl	80010f0 <lsm6dsox_from_fs2_to_mg>
 8003dd2:	eef0 7a40 	vmov.f32	s15, s0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	edc3 7a00 	vstr	s15, [r3]
		imu->accel.y = lsm6dsox_from_fs2_to_mg(imu->accel.raw.i16bit[1]);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f984 	bl	80010f0 <lsm6dsox_from_fs2_to_mg>
 8003de8:	eef0 7a40 	vmov.f32	s15, s0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	edc3 7a01 	vstr	s15, [r3, #4]
		imu->accel.z = lsm6dsox_from_fs2_to_mg(imu->accel.raw.i16bit[2]);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd f979 	bl	80010f0 <lsm6dsox_from_fs2_to_mg>
 8003dfe:	eef0 7a40 	vmov.f32	s15, s0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	edc3 7a02 	vstr	s15, [r3, #8]

		/* Read angular rate field data */
		memset(imu->gyro.raw.u8bit, 0x00, 3 * sizeof(int16_t));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3340      	adds	r3, #64	; 0x40
 8003e0c:	2206      	movs	r2, #6
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f00c fe16 	bl	8010a42 <memset>
		lsm6dsox_angular_rate_raw_get(&dev_ctx, imu->gyro.raw.u8bit);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3340      	adds	r3, #64	; 0x40
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4813      	ldr	r0, [pc, #76]	; (8003e6c <lsm6dsox_read_data+0xc8>)
 8003e1e:	f7fd fd4c 	bl	80018ba <lsm6dsox_angular_rate_raw_get>
		imu->gyro.x = lsm6dsox_from_fs2000_to_mdps(imu->gyro.raw.i16bit[0]);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fd f979 	bl	8001120 <lsm6dsox_from_fs2000_to_mdps>
 8003e2e:	eef0 7a40 	vmov.f32	s15, s0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		imu->gyro.y = lsm6dsox_from_fs2000_to_mdps(imu->gyro.raw.i16bit[1]);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd f96e 	bl	8001120 <lsm6dsox_from_fs2000_to_mdps>
 8003e44:	eef0 7a40 	vmov.f32	s15, s0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		imu->gyro.z = lsm6dsox_from_fs2000_to_mdps(imu->gyro.raw.i16bit[2]);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fd f963 	bl	8001120 <lsm6dsox_from_fs2000_to_mdps>
 8003e5a:	eef0 7a40 	vmov.f32	s15, s0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    //  /* Read temperature data */
    //  memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
    //  lsm6dsox_temperature_raw_get(ctx, data_raw_temperature.u8bit);
    //  temperature_degC = lsm6dsox_from_lsb_to_celsius(data_raw_temperature.i16bit);
    //  }
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000878 	.word	0x20000878

08003e70 <read_imu_data>:
  *
  * @param  imu		pointer to (imu) device struct
  * @retval None
  */
void read_imu_data(device *imu)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	/* Update Timestep */
	uint32_t timestamp, timestep;
	static uint32_t prev_timestamp;

	timestamp = get_timestamp();
 8003e78:	f7fd f8e0 	bl	800103c <get_timestamp>
 8003e7c:	60f8      	str	r0, [r7, #12]
	timestep = timestamp - prev_timestamp;
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <read_imu_data+0x88>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	60bb      	str	r3, [r7, #8]

	imu->timestep = USEC_TO_SEC((float)timestep);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e92:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003efc <read_imu_data+0x8c>
 8003e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyro.timestep = USEC_TO_SEC((float)timestep);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eaa:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003efc <read_imu_data+0x8c>
 8003eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->accel.timestep = USEC_TO_SEC((float)timestep);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ec2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003efc <read_imu_data+0x8c>
 8003ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	edc3 7a06 	vstr	s15, [r3, #24]
	prev_timestamp = timestamp;
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <read_imu_data+0x88>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6013      	str	r3, [r2, #0]

	/* Read XL + GYRO Data */
	lsm6dsox_read_data(imu);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff64 	bl	8003da4 <lsm6dsox_read_data>

	/* Get Calibrated IMU Measurements */
	get_calibrated_measurements(imu);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff febb 	bl	8003c58 <get_calibrated_measurements>

	/* Filter Measurements (OPTIONAL) */
	lowpass_filt(&imu->gyro, GYRO_LPF_CUTOFF_FREQ);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3324      	adds	r3, #36	; 0x24
 8003ee6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003f00 <read_imu_data+0x90>
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fe06 	bl	8003afc <lowpass_filt>
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200008a0 	.word	0x200008a0
 8003efc:	49742400 	.word	0x49742400
 8003f00:	4544597c 	.word	0x4544597c

08003f04 <rcInput>:
  *
  * @param  enable	logical value (1 or 0)
  * @retval None
  */
void rcInput(uint8_t enable)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	if (enable)
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d010      	beq.n	8003f36 <rcInput+0x32>
	{
		/* Init Input Capture Interrupts */
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//pin A2, rx ch2, pitch request
 8003f14:	2100      	movs	r1, #0
 8003f16:	4813      	ldr	r0, [pc, #76]	; (8003f64 <rcInput+0x60>)
 8003f18:	f005 fcc0 	bl	800989c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);	//pin A3, rx ch1, roll request
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	4811      	ldr	r0, [pc, #68]	; (8003f64 <rcInput+0x60>)
 8003f20:	f005 fcbc 	bl	800989c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);	//pin TX, rx ch3, throttle request
 8003f24:	2108      	movs	r1, #8
 8003f26:	4810      	ldr	r0, [pc, #64]	; (8003f68 <rcInput+0x64>)
 8003f28:	f005 fcb8 	bl	800989c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);	//pin RX, rx ch4, yaw request
 8003f2c:	210c      	movs	r1, #12
 8003f2e:	480e      	ldr	r0, [pc, #56]	; (8003f68 <rcInput+0x64>)
 8003f30:	f005 fcb4 	bl	800989c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_3);
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_4);
	}
}
 8003f34:	e012      	b.n	8003f5c <rcInput+0x58>
	else if (!enable)
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <rcInput+0x58>
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4809      	ldr	r0, [pc, #36]	; (8003f64 <rcInput+0x60>)
 8003f40:	f005 fdd4 	bl	8009aec <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8003f44:	2104      	movs	r1, #4
 8003f46:	4807      	ldr	r0, [pc, #28]	; (8003f64 <rcInput+0x60>)
 8003f48:	f005 fdd0 	bl	8009aec <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_3);
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	4806      	ldr	r0, [pc, #24]	; (8003f68 <rcInput+0x64>)
 8003f50:	f005 fdcc 	bl	8009aec <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8003f54:	210c      	movs	r1, #12
 8003f56:	4804      	ldr	r0, [pc, #16]	; (8003f68 <rcInput+0x64>)
 8003f58:	f005 fdc8 	bl	8009aec <HAL_TIM_IC_Stop_IT>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	2000068c 	.word	0x2000068c
 8003f68:	20000644 	.word	0x20000644

08003f6c <escInput>:
  *
  * @param  enable	logical value (1 or 0)
  * @retval None
  */
void escInput(uint8_t enable)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	if (enable)
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d024      	beq.n	8003fc6 <escInput+0x5a>
	{
		/* Init PWM Output Signals */
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);	//pin D6, mtr3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	481d      	ldr	r0, [pc, #116]	; (8003ff4 <escInput+0x88>)
 8003f80:	f005 fafa 	bl	8009578 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);	//pin D5, mtr4
 8003f84:	2104      	movs	r1, #4
 8003f86:	481b      	ldr	r0, [pc, #108]	; (8003ff4 <escInput+0x88>)
 8003f88:	f005 faf6 	bl	8009578 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//pin D9, mtr2
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	481a      	ldr	r0, [pc, #104]	; (8003ff8 <escInput+0x8c>)
 8003f90:	f005 faf2 	bl	8009578 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//pin D10, mtr1
 8003f94:	210c      	movs	r1, #12
 8003f96:	4818      	ldr	r0, [pc, #96]	; (8003ff8 <escInput+0x8c>)
 8003f98:	f005 faee 	bl	8009578 <HAL_TIM_PWM_Start>

		/* Set Minimum Duty Cycle */
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MTR_CMD_MIN);
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <escInput+0x88>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MTR_CMD_MIN);
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <escInput+0x88>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, MTR_CMD_MIN);
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <escInput+0x8c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fb8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, MTR_CMD_MIN); // for esc startup recognition (& safety when enabling esc)
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <escInput+0x8c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
	}
}
 8003fc4:	e012      	b.n	8003fec <escInput+0x80>
	else if (!enable)
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <escInput+0x80>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4809      	ldr	r0, [pc, #36]	; (8003ff4 <escInput+0x88>)
 8003fd0:	f005 fb9a 	bl	8009708 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	4807      	ldr	r0, [pc, #28]	; (8003ff4 <escInput+0x88>)
 8003fd8:	f005 fb96 	bl	8009708 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8003fdc:	2108      	movs	r1, #8
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <escInput+0x8c>)
 8003fe0:	f005 fb92 	bl	8009708 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8003fe4:	210c      	movs	r1, #12
 8003fe6:	4804      	ldr	r0, [pc, #16]	; (8003ff8 <escInput+0x8c>)
 8003fe8:	f005 fb8e 	bl	8009708 <HAL_TIM_PWM_Stop>
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	200007ac 	.word	0x200007ac
 8003ff8:	200006d4 	.word	0x200006d4

08003ffc <arm_drone>:
  *
  * @param  arm		logical value (1 or 0)
  * @retval None
  */
void arm_drone(uint8_t arm)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	71fb      	strb	r3, [r7, #7]
	if (arm)
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d014      	beq.n	8004036 <arm_drone+0x3a>
	{
		/* Enable Motors (Set Low Duty Cycle) */
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MTR_CMD_IDLE);
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <arm_drone+0x74>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004014:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MTR_CMD_IDLE);
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <arm_drone+0x74>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, MTR_CMD_IDLE);
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <arm_drone+0x78>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, MTR_CMD_IDLE);
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <arm_drone+0x78>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MTR_CMD_MIN);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MTR_CMD_MIN);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, MTR_CMD_MIN);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, MTR_CMD_MIN);
	}
}
 8004034:	e016      	b.n	8004064 <arm_drone+0x68>
	else if (!arm)
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d113      	bne.n	8004064 <arm_drone+0x68>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MTR_CMD_MIN);
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <arm_drone+0x74>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004044:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MTR_CMD_MIN);
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <arm_drone+0x74>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, MTR_CMD_MIN);
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <arm_drone+0x78>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, MTR_CMD_MIN);
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <arm_drone+0x78>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	200007ac 	.word	0x200007ac
 8004074:	200006d4 	.word	0x200006d4

08004078 <ready_to_fly>:
  * @param  st		pointer to systemState struct
  *
  * @retval 		logical value (1 or 0)
  */
uint8_t ready_to_fly(device *imu, systemState *st)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	uint16_t count = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	81fb      	strh	r3, [r7, #14]
	float et;

	do {
		/* Update IMU */
		read_imu_data(imu);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fef2 	bl	8003e70 <read_imu_data>

		/* Estimate Attitude */
		get_attitude(imu, st);
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fe2a 	bl	8001ce8 <get_attitude>

		/* Check Quad is Consistently in a Proper Orientation and Throttle is Idle */
		if (right_side_up(imu) && attitude_within_boundaries(st) && throttle_idle(st))
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fd ff61 	bl	8001f5c <right_side_up>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00f      	beq.n	80040c0 <ready_to_fly+0x48>
 80040a0:	6838      	ldr	r0, [r7, #0]
 80040a2:	f7fd ff72 	bl	8001f8a <attitude_within_boundaries>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <ready_to_fly+0x48>
 80040ac:	6838      	ldr	r0, [r7, #0]
 80040ae:	f7fd ff29 	bl	8001f04 <throttle_idle>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <ready_to_fly+0x48>
			count++;
 80040b8:	89fb      	ldrh	r3, [r7, #14]
 80040ba:	3301      	adds	r3, #1
 80040bc:	81fb      	strh	r3, [r7, #14]
 80040be:	e001      	b.n	80040c4 <ready_to_fly+0x4c>
		else
			count = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	81fb      	strh	r3, [r7, #14]

		/* Get Elapsed Time in Seconds */
		et = USEC_TO_SEC((float)get_timestamp());
 80040c4:	f7fc ffba 	bl	800103c <get_timestamp>
 80040c8:	ee07 0a90 	vmov	s15, r0
 80040cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040d0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004124 <ready_to_fly+0xac>
 80040d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d8:	edc7 7a02 	vstr	s15, [r7, #8]

		/* Toggle LED */
		blink_led(10);
 80040dc:	200a      	movs	r0, #10
 80040de:	f7fc ff31 	bl	8000f44 <blink_led>

	} while((count < 1000) && (et < 30));
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e8:	d208      	bcs.n	80040fc <ready_to_fly+0x84>
 80040ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ee:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80040f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fa:	d4c4      	bmi.n	8004086 <ready_to_fly+0xe>

	/* Check if ready to fly */
	if ((count > 1000) || (et < 30))
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004102:	d808      	bhi.n	8004116 <ready_to_fly+0x9e>
 8004104:	edd7 7a02 	vldr	s15, [r7, #8]
 8004108:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800410c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004114:	d501      	bpl.n	800411a <ready_to_fly+0xa2>
		return 1;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <ready_to_fly+0xa4>
	else
		return 0;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	49742400 	.word	0x49742400

08004128 <sensor_setup>:
  *
  * @param  sp		pointer to sensorPackage struct
  * @retval None
  */
void sensor_setup(sensorPackage *sp)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	lsm6dsox_setup(&sp->imu);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fc86 	bl	8003a44 <lsm6dsox_setup>
//	lis3mdl_setup(&sp->mag);
//	mtk3333_setup(&sp->gps);
//	bmp390_setup(&sp->bar);
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004144:	480d      	ldr	r0, [pc, #52]	; (800417c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004146:	490e      	ldr	r1, [pc, #56]	; (8004180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800414a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800414c:	e002      	b.n	8004154 <LoopCopyDataInit>

0800414e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800414e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004152:	3304      	adds	r3, #4

08004154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004158:	d3f9      	bcc.n	800414e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800415a:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800415c:	4c0b      	ldr	r4, [pc, #44]	; (800418c <LoopFillZerobss+0x26>)
  movs r3, #0
 800415e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004160:	e001      	b.n	8004166 <LoopFillZerobss>

08004162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004164:	3204      	adds	r2, #4

08004166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004168:	d3fb      	bcc.n	8004162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800416a:	f7ff fabd 	bl	80036e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800416e:	f00c fcc1 	bl	8010af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004172:	f7fe fa61 	bl	8002638 <main>
  bx  lr    
 8004176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800417c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004180:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8004184:	08013468 	.word	0x08013468
  ldr r2, =_sbss
 8004188:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 800418c:	2000261c 	.word	0x2000261c

08004190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004190:	e7fe      	b.n	8004190 <ADC_IRQHandler>
	...

08004194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_Init+0x40>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <HAL_Init+0x40>)
 800419e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_Init+0x40>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_Init+0x40>)
 80041aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_Init+0x40>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <HAL_Init+0x40>)
 80041b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041bc:	2003      	movs	r0, #3
 80041be:	f000 f94f 	bl	8004460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041c2:	200f      	movs	r0, #15
 80041c4:	f000 f808 	bl	80041d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041c8:	f7fe feac 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023c00 	.word	0x40023c00

080041d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_InitTick+0x54>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_InitTick+0x58>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f967 	bl	80044ca <HAL_SYSTICK_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e00e      	b.n	8004224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	d80a      	bhi.n	8004222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800420c:	2200      	movs	r2, #0
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	f000 f92f 	bl	8004476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004218:	4a06      	ldr	r2, [pc, #24]	; (8004234 <HAL_InitTick+0x5c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000150 	.word	0x20000150
 8004230:	200001b8 	.word	0x200001b8
 8004234:	200001b4 	.word	0x200001b4

08004238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_IncTick+0x20>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_IncTick+0x24>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4413      	add	r3, r2
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <HAL_IncTick+0x24>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200001b8 	.word	0x200001b8
 800425c:	200008a4 	.word	0x200008a4

08004260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return uwTick;
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_GetTick+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	200008a4 	.word	0x200008a4

08004278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7ff ffee 	bl	8004260 <HAL_GetTick>
 8004284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d005      	beq.n	800429e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_Delay+0x44>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800429e:	bf00      	nop
 80042a0:	f7ff ffde 	bl	8004260 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d8f7      	bhi.n	80042a0 <HAL_Delay+0x28>
  {
  }
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200001b8 	.word	0x200001b8

080042c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	60d3      	str	r3, [r2, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <__NVIC_GetPriorityGrouping+0x18>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 0307 	and.w	r3, r3, #7
}
 8004316:	4618      	mov	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	2b00      	cmp	r3, #0
 8004334:	db0b      	blt.n	800434e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	f003 021f 	and.w	r2, r3, #31
 800433c:	4907      	ldr	r1, [pc, #28]	; (800435c <__NVIC_EnableIRQ+0x38>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2001      	movs	r0, #1
 8004346:	fa00 f202 	lsl.w	r2, r0, r2
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000e100 	.word	0xe000e100

08004360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	6039      	str	r1, [r7, #0]
 800436a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db0a      	blt.n	800438a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	490c      	ldr	r1, [pc, #48]	; (80043ac <__NVIC_SetPriority+0x4c>)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	440b      	add	r3, r1
 8004384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004388:	e00a      	b.n	80043a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4908      	ldr	r1, [pc, #32]	; (80043b0 <__NVIC_SetPriority+0x50>)
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	3b04      	subs	r3, #4
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	440b      	add	r3, r1
 800439e:	761a      	strb	r2, [r3, #24]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000e100 	.word	0xe000e100
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f1c3 0307 	rsb	r3, r3, #7
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	bf28      	it	cs
 80043d2:	2304      	movcs	r3, #4
 80043d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3304      	adds	r3, #4
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d902      	bls.n	80043e4 <NVIC_EncodePriority+0x30>
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3b03      	subs	r3, #3
 80043e2:	e000      	b.n	80043e6 <NVIC_EncodePriority+0x32>
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	401a      	ands	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	43d9      	mvns	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800440c:	4313      	orrs	r3, r2
         );
}
 800440e:	4618      	mov	r0, r3
 8004410:	3724      	adds	r7, #36	; 0x24
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800442c:	d301      	bcc.n	8004432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800442e:	2301      	movs	r3, #1
 8004430:	e00f      	b.n	8004452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <SysTick_Config+0x40>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800443a:	210f      	movs	r1, #15
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	f7ff ff8e 	bl	8004360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <SysTick_Config+0x40>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <SysTick_Config+0x40>)
 800444c:	2207      	movs	r2, #7
 800444e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	e000e010 	.word	0xe000e010

08004460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff29 	bl	80042c0 <__NVIC_SetPriorityGrouping>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	4603      	mov	r3, r0
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004488:	f7ff ff3e 	bl	8004308 <__NVIC_GetPriorityGrouping>
 800448c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7ff ff8e 	bl	80043b4 <NVIC_EncodePriority>
 8004498:	4602      	mov	r2, r0
 800449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff5d 	bl	8004360 <__NVIC_SetPriority>
}
 80044a6:	bf00      	nop
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff31 	bl	8004324 <__NVIC_EnableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ffa2 	bl	800441c <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044f0:	f7ff feb6 	bl	8004260 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e099      	b.n	8004634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004520:	e00f      	b.n	8004542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004522:	f7ff fe9d 	bl	8004260 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b05      	cmp	r3, #5
 800452e:	d908      	bls.n	8004542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2203      	movs	r2, #3
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e078      	b.n	8004634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e8      	bne.n	8004522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <HAL_DMA_Init+0x158>)
 800455c:	4013      	ands	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b04      	cmp	r3, #4
 800459a:	d107      	bne.n	80045ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	4313      	orrs	r3, r2
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0307 	bic.w	r3, r3, #7
 80045c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d117      	bne.n	8004606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fa9d 	bl	8004b28 <DMA_CheckFifoParam>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004602:	2301      	movs	r3, #1
 8004604:	e016      	b.n	8004634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa54 	bl	8004abc <DMA_CalcBaseAndBitshift>
 8004614:	4603      	mov	r3, r0
 8004616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	223f      	movs	r2, #63	; 0x3f
 800461e:	409a      	lsls	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	f010803f 	.word	0xf010803f

08004640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_DMA_Start_IT+0x26>
 8004662:	2302      	movs	r3, #2
 8004664:	e040      	b.n	80046e8 <HAL_DMA_Start_IT+0xa8>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d12f      	bne.n	80046da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f9e6 	bl	8004a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	409a      	lsls	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0216 	orr.w	r2, r2, #22
 80046ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0208 	orr.w	r2, r2, #8
 80046c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e005      	b.n	80046e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
 80046e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d004      	beq.n	800470e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00c      	b.n	8004728 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2205      	movs	r2, #5
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004740:	4b8e      	ldr	r3, [pc, #568]	; (800497c <HAL_DMA_IRQHandler+0x248>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a8e      	ldr	r2, [pc, #568]	; (8004980 <HAL_DMA_IRQHandler+0x24c>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2208      	movs	r2, #8
 8004760:	409a      	lsls	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01a      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	2208      	movs	r2, #8
 800478e:	409a      	lsls	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	2204      	movs	r2, #4
 80047dc:	409a      	lsls	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	2210      	movs	r2, #16
 8004812:	409a      	lsls	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d043      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d03c      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2210      	movs	r2, #16
 8004830:	409a      	lsls	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d018      	beq.n	8004876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d108      	bne.n	8004864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d024      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e01f      	b.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
 8004874:	e016      	b.n	80048a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0208 	bic.w	r2, r2, #8
 8004892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	2220      	movs	r2, #32
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 808f 	beq.w	80049d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8087 	beq.w	80049d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	2220      	movs	r2, #32
 80048cc:	409a      	lsls	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d136      	bne.n	800494c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0216 	bic.w	r2, r2, #22
 80048ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_DMA_IRQHandler+0x1da>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0208 	bic.w	r2, r2, #8
 800491c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	223f      	movs	r2, #63	; 0x3f
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	2b00      	cmp	r3, #0
 8004940:	d07e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
        }
        return;
 800494a:	e079      	b.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10d      	bne.n	8004984 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	2b00      	cmp	r3, #0
 800496e:	d031      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
 8004978:	e02c      	b.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
 800497a:	bf00      	nop
 800497c:	20000150 	.word	0x20000150
 8004980:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d023      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
 8004994:	e01e      	b.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10f      	bne.n	80049c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0210 	bic.w	r2, r2, #16
 80049b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d032      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2205      	movs	r2, #5
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d307      	bcc.n	8004a1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f2      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x2cc>
 8004a1a:	e000      	b.n	8004a1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a40:	bf00      	nop
    }
  }
}
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d108      	bne.n	8004aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a9e:	e007      	b.n	8004ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	60da      	str	r2, [r3, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3b10      	subs	r3, #16
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <DMA_CalcBaseAndBitshift+0x64>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <DMA_CalcBaseAndBitshift+0x68>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d909      	bls.n	8004afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	659a      	str	r2, [r3, #88]	; 0x58
 8004afc:	e007      	b.n	8004b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	aaaaaaab 	.word	0xaaaaaaab
 8004b24:	08013058 	.word	0x08013058

08004b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11f      	bne.n	8004b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d856      	bhi.n	8004bf6 <DMA_CheckFifoParam+0xce>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <DMA_CheckFifoParam+0x28>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b73 	.word	0x08004b73
 8004b58:	08004b61 	.word	0x08004b61
 8004b5c:	08004bf7 	.word	0x08004bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d046      	beq.n	8004bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b70:	e043      	b.n	8004bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b7a:	d140      	bne.n	8004bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b80:	e03d      	b.n	8004bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8a:	d121      	bne.n	8004bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d837      	bhi.n	8004c02 <DMA_CheckFifoParam+0xda>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <DMA_CheckFifoParam+0x70>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004baf 	.word	0x08004baf
 8004ba0:	08004ba9 	.word	0x08004ba9
 8004ba4:	08004bc1 	.word	0x08004bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e030      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d025      	beq.n	8004c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bbe:	e022      	b.n	8004c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc8:	d11f      	bne.n	8004c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bce:	e01c      	b.n	8004c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d903      	bls.n	8004bde <DMA_CheckFifoParam+0xb6>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d003      	beq.n	8004be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bdc:	e018      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
      break;
 8004be2:	e015      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00e      	beq.n	8004c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf4:	e00b      	b.n	8004c0e <DMA_CheckFifoParam+0xe6>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e00a      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e008      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e006      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004c02:	bf00      	nop
 8004c04:	e004      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e16b      	b.n	8004f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	f040 815a 	bne.w	8004f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d005      	beq.n	8004c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d130      	bne.n	8004cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 0201 	and.w	r2, r3, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d017      	beq.n	8004d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	2203      	movs	r2, #3
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d123      	bne.n	8004d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	08da      	lsrs	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3208      	adds	r2, #8
 8004d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	220f      	movs	r2, #15
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	08da      	lsrs	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3208      	adds	r2, #8
 8004d5e:	69b9      	ldr	r1, [r7, #24]
 8004d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80b4 	beq.w	8004f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	4b60      	ldr	r3, [pc, #384]	; (8004f2c <HAL_GPIO_Init+0x30c>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	4a5f      	ldr	r2, [pc, #380]	; (8004f2c <HAL_GPIO_Init+0x30c>)
 8004db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db4:	6453      	str	r3, [r2, #68]	; 0x44
 8004db6:	4b5d      	ldr	r3, [pc, #372]	; (8004f2c <HAL_GPIO_Init+0x30c>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dc2:	4a5b      	ldr	r2, [pc, #364]	; (8004f30 <HAL_GPIO_Init+0x310>)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a52      	ldr	r2, [pc, #328]	; (8004f34 <HAL_GPIO_Init+0x314>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d02b      	beq.n	8004e46 <HAL_GPIO_Init+0x226>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a51      	ldr	r2, [pc, #324]	; (8004f38 <HAL_GPIO_Init+0x318>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d025      	beq.n	8004e42 <HAL_GPIO_Init+0x222>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a50      	ldr	r2, [pc, #320]	; (8004f3c <HAL_GPIO_Init+0x31c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01f      	beq.n	8004e3e <HAL_GPIO_Init+0x21e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4f      	ldr	r2, [pc, #316]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d019      	beq.n	8004e3a <HAL_GPIO_Init+0x21a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a4e      	ldr	r2, [pc, #312]	; (8004f44 <HAL_GPIO_Init+0x324>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_GPIO_Init+0x216>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a4d      	ldr	r2, [pc, #308]	; (8004f48 <HAL_GPIO_Init+0x328>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00d      	beq.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a4c      	ldr	r2, [pc, #304]	; (8004f4c <HAL_GPIO_Init+0x32c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d007      	beq.n	8004e2e <HAL_GPIO_Init+0x20e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a4b      	ldr	r2, [pc, #300]	; (8004f50 <HAL_GPIO_Init+0x330>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_GPIO_Init+0x20a>
 8004e26:	2307      	movs	r3, #7
 8004e28:	e00e      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	e00c      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e2e:	2306      	movs	r3, #6
 8004e30:	e00a      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e32:	2305      	movs	r3, #5
 8004e34:	e008      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e36:	2304      	movs	r3, #4
 8004e38:	e006      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e004      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_GPIO_Init+0x228>
 8004e46:	2300      	movs	r3, #0
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f002 0203 	and.w	r2, r2, #3
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	4093      	lsls	r3, r2
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e58:	4935      	ldr	r1, [pc, #212]	; (8004f30 <HAL_GPIO_Init+0x310>)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	3302      	adds	r3, #2
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e8a:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e90:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eba:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f08:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	f67f ae90 	bls.w	8004c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	3724      	adds	r7, #36	; 0x24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40013800 	.word	0x40013800
 8004f34:	40020000 	.word	0x40020000
 8004f38:	40020400 	.word	0x40020400
 8004f3c:	40020800 	.word	0x40020800
 8004f40:	40020c00 	.word	0x40020c00
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40021400 	.word	0x40021400
 8004f4c:	40021800 	.word	0x40021800
 8004f50:	40021c00 	.word	0x40021c00
 8004f54:	40013c00 	.word	0x40013c00

08004f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	887b      	ldrh	r3, [r7, #2]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	e001      	b.n	8004f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
 8004f94:	4613      	mov	r3, r2
 8004f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f98:	787b      	ldrb	r3, [r7, #1]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fa4:	e003      	b.n	8004fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fa6:	887b      	ldrh	r3, [r7, #2]
 8004fa8:	041a      	lsls	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	619a      	str	r2, [r3, #24]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	041a      	lsls	r2, r3, #16
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	43d9      	mvns	r1, r3
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	400b      	ands	r3, r1
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	619a      	str	r2, [r3, #24]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e12b      	b.n	800525a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd ffac 	bl	8002f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005054:	f002 fe38 	bl	8007cc8 <HAL_RCC_GetPCLK1Freq>
 8005058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a81      	ldr	r2, [pc, #516]	; (8005264 <HAL_I2C_Init+0x274>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d807      	bhi.n	8005074 <HAL_I2C_Init+0x84>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a80      	ldr	r2, [pc, #512]	; (8005268 <HAL_I2C_Init+0x278>)
 8005068:	4293      	cmp	r3, r2
 800506a:	bf94      	ite	ls
 800506c:	2301      	movls	r3, #1
 800506e:	2300      	movhi	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e006      	b.n	8005082 <HAL_I2C_Init+0x92>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a7d      	ldr	r2, [pc, #500]	; (800526c <HAL_I2C_Init+0x27c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	bf94      	ite	ls
 800507c:	2301      	movls	r3, #1
 800507e:	2300      	movhi	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0e7      	b.n	800525a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a78      	ldr	r2, [pc, #480]	; (8005270 <HAL_I2C_Init+0x280>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0c9b      	lsrs	r3, r3, #18
 8005094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a6a      	ldr	r2, [pc, #424]	; (8005264 <HAL_I2C_Init+0x274>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d802      	bhi.n	80050c4 <HAL_I2C_Init+0xd4>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	3301      	adds	r3, #1
 80050c2:	e009      	b.n	80050d8 <HAL_I2C_Init+0xe8>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	4a69      	ldr	r2, [pc, #420]	; (8005274 <HAL_I2C_Init+0x284>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	099b      	lsrs	r3, r3, #6
 80050d6:	3301      	adds	r3, #1
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	430b      	orrs	r3, r1
 80050de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	495c      	ldr	r1, [pc, #368]	; (8005264 <HAL_I2C_Init+0x274>)
 80050f4:	428b      	cmp	r3, r1
 80050f6:	d819      	bhi.n	800512c <HAL_I2C_Init+0x13c>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e59      	subs	r1, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fbb1 f3f3 	udiv	r3, r1, r3
 8005106:	1c59      	adds	r1, r3, #1
 8005108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800510c:	400b      	ands	r3, r1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_I2C_Init+0x138>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1e59      	subs	r1, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005120:	3301      	adds	r3, #1
 8005122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005126:	e051      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 8005128:	2304      	movs	r3, #4
 800512a:	e04f      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d111      	bne.n	8005158 <HAL_I2C_Init+0x168>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1e58      	subs	r0, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	440b      	add	r3, r1
 8005142:	fbb0 f3f3 	udiv	r3, r0, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e012      	b.n	800517e <HAL_I2C_Init+0x18e>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1e58      	subs	r0, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	0099      	lsls	r1, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	fbb0 f3f3 	udiv	r3, r0, r3
 800516e:	3301      	adds	r3, #1
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_I2C_Init+0x196>
 8005182:	2301      	movs	r3, #1
 8005184:	e022      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10e      	bne.n	80051ac <HAL_I2C_Init+0x1bc>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1e58      	subs	r0, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	440b      	add	r3, r1
 800519c:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a0:	3301      	adds	r3, #1
 80051a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051aa:	e00f      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1e58      	subs	r0, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	0099      	lsls	r1, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c2:	3301      	adds	r3, #1
 80051c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	6809      	ldr	r1, [r1, #0]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6911      	ldr	r1, [r2, #16]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68d2      	ldr	r2, [r2, #12]
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	000186a0 	.word	0x000186a0
 8005268:	001e847f 	.word	0x001e847f
 800526c:	003d08ff 	.word	0x003d08ff
 8005270:	431bde83 	.word	0x431bde83
 8005274:	10624dd3 	.word	0x10624dd3

08005278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005292:	f7fe ffe5 	bl	8004260 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	f040 80d9 	bne.w	8005458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2319      	movs	r3, #25
 80052ac:	2201      	movs	r2, #1
 80052ae:	496d      	ldr	r1, [pc, #436]	; (8005464 <HAL_I2C_Mem_Write+0x1ec>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fc7f 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	e0cc      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Mem_Write+0x56>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e0c5      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d007      	beq.n	80052f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2221      	movs	r2, #33	; 0x21
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2240      	movs	r2, #64	; 0x40
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a4d      	ldr	r2, [pc, #308]	; (8005468 <HAL_I2C_Mem_Write+0x1f0>)
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005336:	88f8      	ldrh	r0, [r7, #6]
 8005338:	893a      	ldrh	r2, [r7, #8]
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4603      	mov	r3, r0
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fab6 	bl	80058b8 <I2C_RequestMemoryWrite>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d052      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e081      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fd00 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d11b      	bne.n	80053f8 <HAL_I2C_Mem_Write+0x180>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1aa      	bne.n	8005356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fcec 	bl	8005de2 <I2C_WaitOnBTFFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	2b04      	cmp	r3, #4
 8005416:	d107      	bne.n	8005428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e016      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	00100002 	.word	0x00100002
 8005468:	ffff0000 	.word	0xffff0000

0800546c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	461a      	mov	r2, r3
 800547a:	4603      	mov	r3, r0
 800547c:	817b      	strh	r3, [r7, #10]
 800547e:	460b      	mov	r3, r1
 8005480:	813b      	strh	r3, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005486:	f7fe feeb 	bl	8004260 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	f040 8208 	bne.w	80058aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2319      	movs	r3, #25
 80054a0:	2201      	movs	r2, #1
 80054a2:	497b      	ldr	r1, [pc, #492]	; (8005690 <HAL_I2C_Mem_Read+0x224>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fb85 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e1fb      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x56>
 80054be:	2302      	movs	r3, #2
 80054c0:	e1f4      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d007      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2222      	movs	r2, #34	; 0x22
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a5b      	ldr	r2, [pc, #364]	; (8005694 <HAL_I2C_Mem_Read+0x228>)
 8005528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800552a:	88f8      	ldrh	r0, [r7, #6]
 800552c:	893a      	ldrh	r2, [r7, #8]
 800552e:	8979      	ldrh	r1, [r7, #10]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4603      	mov	r3, r0
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa52 	bl	80059e4 <I2C_RequestMemoryRead>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e1b0      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d113      	bne.n	800557a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	623b      	str	r3, [r7, #32]
 8005566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e184      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557e:	2b01      	cmp	r3, #1
 8005580:	d11b      	bne.n	80055ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e164      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11b      	bne.n	80055fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	e144      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005610:	e138      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	2b03      	cmp	r3, #3
 8005618:	f200 80f1 	bhi.w	80057fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	2b01      	cmp	r3, #1
 8005622:	d123      	bne.n	800566c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fc1b 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e139      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	855a      	strh	r2, [r3, #42]	; 0x2a
 800566a:	e10b      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b02      	cmp	r3, #2
 8005672:	d14e      	bne.n	8005712 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2200      	movs	r2, #0
 800567c:	4906      	ldr	r1, [pc, #24]	; (8005698 <HAL_I2C_Mem_Read+0x22c>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fa98 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e10e      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
 800568e:	bf00      	nop
 8005690:	00100002 	.word	0x00100002
 8005694:	ffff0000 	.word	0xffff0000
 8005698:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005710:	e0b8      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	2200      	movs	r2, #0
 800571a:	4966      	ldr	r1, [pc, #408]	; (80058b4 <HAL_I2C_Mem_Read+0x448>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fa49 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0bf      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	2200      	movs	r2, #0
 8005776:	494f      	ldr	r1, [pc, #316]	; (80058b4 <HAL_I2C_Mem_Read+0x448>)
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fa1b 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e091      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057fc:	e042      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fb2e 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04c      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d118      	bne.n	8005884 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f aec2 	bne.w	8005612 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3728      	adds	r7, #40	; 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	00010004 	.word	0x00010004

080058b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f960 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005908:	d103      	bne.n	8005912 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e05f      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005916:	897b      	ldrh	r3, [r7, #10]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	492d      	ldr	r1, [pc, #180]	; (80059e0 <I2C_RequestMemoryWrite+0x128>)
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f998 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04c      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fa02 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e02b      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	e021      	b.n	80059d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005990:	893b      	ldrh	r3, [r7, #8]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b29b      	uxth	r3, r3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a0:	6a39      	ldr	r1, [r7, #32]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f9dc 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d107      	bne.n	80059c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e005      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ca:	893b      	ldrh	r3, [r7, #8]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	00010002 	.word	0x00010002

080059e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f8c2 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a44:	d103      	bne.n	8005a4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0aa      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	4952      	ldr	r1, [pc, #328]	; (8005bb0 <I2C_RequestMemoryRead+0x1cc>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f8fa 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e097      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	6a39      	ldr	r1, [r7, #32]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f964 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d107      	bne.n	8005ab6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e076      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac0:	893b      	ldrh	r3, [r7, #8]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]
 8005aca:	e021      	b.n	8005b10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005acc:	893b      	ldrh	r3, [r7, #8]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	6a39      	ldr	r1, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f93e 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e050      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b12:	6a39      	ldr	r1, [r7, #32]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f923 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d107      	bne.n	8005b38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e035      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f82b 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d103      	bne.n	8005b7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e013      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	4906      	ldr	r1, [pc, #24]	; (8005bb0 <I2C_RequestMemoryRead+0x1cc>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f863 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	00010002 	.word	0x00010002

08005bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc4:	e025      	b.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d021      	beq.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fe fb47 	bl	8004260 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d116      	bne.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e023      	b.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10d      	bne.n	8005c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	43da      	mvns	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	e00c      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	43da      	mvns	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf0c      	ite	eq
 8005c4a:	2301      	moveq	r3, #1
 8005c4c:	2300      	movne	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d0b6      	beq.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c70:	e051      	b.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c80:	d123      	bne.n	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f043 0204 	orr.w	r2, r3, #4
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e046      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d021      	beq.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fe fac5 	bl	8004260 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e020      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10c      	bne.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf14      	ite	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	2300      	moveq	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	e00b      	b.n	8005d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d18d      	bne.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f8ce 	bl	8005f10 <I2C_IsAcknowledgeFailed>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02d      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d021      	beq.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fe fa6b 	bl	8004260 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e007      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d1ca      	bne.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dee:	e02d      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f88d 	bl	8005f10 <I2C_IsAcknowledgeFailed>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e02d      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d021      	beq.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e08:	f7fe fa2a 	bl	8004260 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d116      	bne.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e007      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d1ca      	bne.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e70:	e042      	b.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b10      	cmp	r3, #16
 8005e7e:	d119      	bne.n	8005eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0210 	mvn.w	r2, #16
 8005e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e029      	b.n	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb4:	f7fe f9d4 	bl	8004260 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e007      	b.n	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d1b5      	bne.n	8005e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f26:	d11b      	bne.n	8005f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f043 0204 	orr.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f70:	b08f      	sub	sp, #60	; 0x3c
 8005f72:	af0a      	add	r7, sp, #40	; 0x28
 8005f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e10f      	b.n	80061a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f009 fce4 	bl	800f968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f005 fd81 	bl	800bac6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	687e      	ldr	r6, [r7, #4]
 8005fcc:	466d      	mov	r5, sp
 8005fce:	f106 0410 	add.w	r4, r6, #16
 8005fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fe2:	1d33      	adds	r3, r6, #4
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	f005 fc58 	bl	800b89c <USB_CoreInit>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0d0      	b.n	80061a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f005 fd6f 	bl	800bae8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	e04a      	b.n	80060a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006010:	7bfa      	ldrb	r2, [r7, #15]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	333d      	adds	r3, #61	; 0x3d
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	333c      	adds	r3, #60	; 0x3c
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	b298      	uxth	r0, r3
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3344      	adds	r3, #68	; 0x44
 800604c:	4602      	mov	r2, r0
 800604e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3340      	adds	r3, #64	; 0x40
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	3348      	adds	r3, #72	; 0x48
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006078:	7bfa      	ldrb	r2, [r7, #15]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	334c      	adds	r3, #76	; 0x4c
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3354      	adds	r3, #84	; 0x54
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	3301      	adds	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3af      	bcc.n	8006010 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e044      	b.n	8006140 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060cc:	7bfa      	ldrb	r2, [r7, #15]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80060de:	7bfa      	ldrb	r2, [r7, #15]
 80060e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060f8:	7bfa      	ldrb	r2, [r7, #15]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	3301      	adds	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	7bfa      	ldrb	r2, [r7, #15]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d3b5      	bcc.n	80060b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	687e      	ldr	r6, [r7, #4]
 8006152:	466d      	mov	r5, sp
 8006154:	f106 0410 	add.w	r4, r6, #16
 8006158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800615c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006164:	e885 0003 	stmia.w	r5, {r0, r1}
 8006168:	1d33      	adds	r3, r6, #4
 800616a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800616c:	6838      	ldr	r0, [r7, #0]
 800616e:	f005 fd07 	bl	800bb80 <USB_DevInit>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e00d      	b.n	80061a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f006 fe56 	bl	800ce4a <USB_DevDisconnect>

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_PCD_Start+0x1c>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e020      	b.n	8006206 <HAL_PCD_Start+0x5e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d109      	bne.n	80061e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d005      	beq.n	80061e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f005 fc59 	bl	800baa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f006 fe06 	bl	800ce08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800620e:	b590      	push	{r4, r7, lr}
 8006210:	b08d      	sub	sp, #52	; 0x34
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f006 fec4 	bl	800cfb2 <USB_GetMode>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 848a 	bne.w	8006b46 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f006 fe28 	bl	800ce8c <USB_ReadInterrupts>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8480 	beq.w	8006b44 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f006 fe15 	bl	800ce8c <USB_ReadInterrupts>
 8006262:	4603      	mov	r3, r0
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d107      	bne.n	800627c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695a      	ldr	r2, [r3, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f002 0202 	and.w	r2, r2, #2
 800627a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f006 fe03 	bl	800ce8c <USB_ReadInterrupts>
 8006286:	4603      	mov	r3, r0
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d161      	bne.n	8006354 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0210 	bic.w	r2, r2, #16
 800629e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	3304      	adds	r3, #4
 80062be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	0c5b      	lsrs	r3, r3, #17
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d124      	bne.n	8006316 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d035      	beq.n	8006344 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	6a38      	ldr	r0, [r7, #32]
 80062ec:	f006 fc3a 	bl	800cb64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062fc:	441a      	add	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630e:	441a      	add	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	621a      	str	r2, [r3, #32]
 8006314:	e016      	b.n	8006344 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	0c5b      	lsrs	r3, r3, #17
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	2b06      	cmp	r3, #6
 8006320:	d110      	bne.n	8006344 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006328:	2208      	movs	r2, #8
 800632a:	4619      	mov	r1, r3
 800632c:	6a38      	ldr	r0, [r7, #32]
 800632e:	f006 fc19 	bl	800cb64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800633e:	441a      	add	r2, r3
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0210 	orr.w	r2, r2, #16
 8006352:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f006 fd97 	bl	800ce8c <USB_ReadInterrupts>
 800635e:	4603      	mov	r3, r0
 8006360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006368:	f040 80a7 	bne.w	80064ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f006 fd9c 	bl	800ceb2 <USB_ReadDevAllOutEpInterrupt>
 800637a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800637c:	e099      	b.n	80064b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 808e 	beq.w	80064a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f006 fdc0 	bl	800cf1a <USB_ReadDevOutEPInterrupt>
 800639a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	2301      	movs	r3, #1
 80063b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fec2 	bl	8007144 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	461a      	mov	r2, r3
 80063d8:	2308      	movs	r3, #8
 80063da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 ff98 	bl	8007314 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	2310      	movs	r3, #16
 80063fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d030      	beq.n	800646c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d109      	bne.n	800642a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006428:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	4613      	mov	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d108      	bne.n	800645a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f009 fb8d 	bl	800fb74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	461a      	mov	r2, r3
 8006468:	2302      	movs	r3, #2
 800646a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	461a      	mov	r2, r3
 8006484:	2320      	movs	r3, #32
 8006486:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	461a      	mov	r2, r3
 80064a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	3301      	adds	r3, #1
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f af62 	bne.w	800637e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f006 fce4 	bl	800ce8c <USB_ReadInterrupts>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ce:	f040 80db 	bne.w	8006688 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f006 fd05 	bl	800cee6 <USB_ReadDevAllInEpInterrupt>
 80064dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80064e2:	e0cd      	b.n	8006680 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80c2 	beq.w	8006674 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f006 fd2b 	bl	800cf56 <USB_ReadDevInEPInterrupt>
 8006500:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d057      	beq.n	80065bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	2201      	movs	r2, #1
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	43db      	mvns	r3, r3
 8006526:	69f9      	ldr	r1, [r7, #28]
 8006528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800652c:	4013      	ands	r3, r2
 800652e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	2301      	movs	r3, #1
 8006540:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d132      	bne.n	80065b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	4613      	mov	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	334c      	adds	r3, #76	; 0x4c
 800655a:	6819      	ldr	r1, [r3, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4403      	add	r3, r0
 800656a:	3348      	adds	r3, #72	; 0x48
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4419      	add	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4403      	add	r3, r0
 800657e:	334c      	adds	r3, #76	; 0x4c
 8006580:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d113      	bne.n	80065b0 <HAL_PCD_IRQHandler+0x3a2>
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	3354      	adds	r3, #84	; 0x54
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d108      	bne.n	80065b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065a8:	461a      	mov	r2, r3
 80065aa:	2101      	movs	r1, #1
 80065ac:	f006 fd32 	bl	800d014 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f009 fa57 	bl	800fa6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	461a      	mov	r2, r3
 80065d4:	2308      	movs	r3, #8
 80065d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	461a      	mov	r2, r3
 80065f0:	2310      	movs	r3, #16
 80065f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	461a      	mov	r2, r3
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d023      	beq.n	8006662 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800661a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800661c:	6a38      	ldr	r0, [r7, #32]
 800661e:	f005 fc13 	bl	800be48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	3338      	adds	r3, #56	; 0x38
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	3304      	adds	r3, #4
 8006634:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d108      	bne.n	8006650 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2200      	movs	r2, #0
 8006642:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	b2db      	uxtb	r3, r3
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f009 faa4 	bl	800fb98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	461a      	mov	r2, r3
 800665e:	2302      	movs	r3, #2
 8006660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800666c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fcdb 	bl	800702a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	3301      	adds	r3, #1
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	f47f af2e 	bne.w	80064e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f006 fbfd 	bl	800ce8c <USB_ReadInterrupts>
 8006692:	4603      	mov	r3, r0
 8006694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800669c:	d122      	bne.n	80066e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d108      	bne.n	80066ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066c4:	2100      	movs	r1, #0
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fec2 	bl	8007450 <HAL_PCDEx_LPM_Callback>
 80066cc:	e002      	b.n	80066d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f009 fa42 	bl	800fb58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80066e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f006 fbcf 	bl	800ce8c <USB_ReadInterrupts>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f8:	d112      	bne.n	8006720 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d102      	bne.n	8006710 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f009 f9fe 	bl	800fb0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695a      	ldr	r2, [r3, #20]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800671e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f006 fbb1 	bl	800ce8c <USB_ReadInterrupts>
 800672a:	4603      	mov	r3, r0
 800672c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	f040 80b7 	bne.w	80068a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2110      	movs	r1, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f005 fb78 	bl	800be48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006758:	2300      	movs	r3, #0
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675c:	e046      	b.n	80067ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676a:	461a      	mov	r2, r3
 800676c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006770:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006790:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	461a      	mov	r2, r3
 80067a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	3301      	adds	r3, #1
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d3b3      	bcc.n	800675e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006804:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006808:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	2b00      	cmp	r3, #0
 8006810:	d016      	beq.n	8006840 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006822:	f043 030b 	orr.w	r3, r3, #11
 8006826:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006838:	f043 030b 	orr.w	r3, r3, #11
 800683c:	6453      	str	r3, [r2, #68]	; 0x44
 800683e:	e015      	b.n	800686c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006852:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006856:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006866:	f043 030b 	orr.w	r3, r3, #11
 800686a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800687e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006890:	461a      	mov	r2, r3
 8006892:	f006 fbbf 	bl	800d014 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695a      	ldr	r2, [r3, #20]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80068a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f006 faee 	bl	800ce8c <USB_ReadInterrupts>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ba:	d124      	bne.n	8006906 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f006 fb84 	bl	800cfce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f005 fb39 	bl	800bf42 <USB_GetDevSpeed>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681c      	ldr	r4, [r3, #0]
 80068dc:	f001 f9e8 	bl	8007cb0 <HAL_RCC_GetHCLKFreq>
 80068e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	4620      	mov	r0, r4
 80068ec:	f005 f838 	bl	800b960 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f009 f8e2 	bl	800faba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006904:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f006 fabe 	bl	800ce8c <USB_ReadInterrupts>
 8006910:	4603      	mov	r3, r0
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b08      	cmp	r3, #8
 8006918:	d10a      	bne.n	8006930 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f009 f8bf 	bl	800fa9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f002 0208 	and.w	r2, r2, #8
 800692e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f006 faa9 	bl	800ce8c <USB_ReadInterrupts>
 800693a:	4603      	mov	r3, r0
 800693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d122      	bne.n	800698a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006950:	2301      	movs	r3, #1
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
 8006954:	e014      	b.n	8006980 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	4613      	mov	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d105      	bne.n	800697a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	b2db      	uxtb	r3, r3
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb27 	bl	8006fc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	3301      	adds	r3, #1
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006986:	429a      	cmp	r2, r3
 8006988:	d3e5      	bcc.n	8006956 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f006 fa7c 	bl	800ce8c <USB_ReadInterrupts>
 8006994:	4603      	mov	r3, r0
 8006996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d13b      	bne.n	8006a18 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069a0:	2301      	movs	r3, #1
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
 80069a4:	e02b      	b.n	80069fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	4613      	mov	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3340      	adds	r3, #64	; 0x40
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d115      	bne.n	80069f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80069cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da12      	bge.n	80069f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	333f      	adds	r3, #63	; 0x3f
 80069e2:	2201      	movs	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fae8 	bl	8006fc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	3301      	adds	r3, #1
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d3ce      	bcc.n	80069a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f006 fa35 	bl	800ce8c <USB_ReadInterrupts>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a2c:	d155      	bne.n	8006ada <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a2e:	2301      	movs	r3, #1
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	e045      	b.n	8006ac0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d12e      	bne.n	8006aba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da2b      	bge.n	8006aba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006a6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d121      	bne.n	8006aba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006a88:	2201      	movs	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ab6:	6053      	str	r3, [r2, #4]
            break;
 8006ab8:	e007      	b.n	8006aca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	3301      	adds	r3, #1
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d3b4      	bcc.n	8006a34 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695a      	ldr	r2, [r3, #20]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f006 f9d4 	bl	800ce8c <USB_ReadInterrupts>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aee:	d10a      	bne.n	8006b06 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f009 f863 	bl	800fbbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f006 f9be 	bl	800ce8c <USB_ReadInterrupts>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d115      	bne.n	8006b46 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f009 f853 	bl	800fbd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	e000      	b.n	8006b46 <HAL_PCD_IRQHandler+0x938>
      return;
 8006b44:	bf00      	nop
    }
  }
}
 8006b46:	3734      	adds	r7, #52	; 0x34
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd90      	pop	{r4, r7, pc}

08006b4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_PCD_SetAddress+0x1a>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e013      	b.n	8006b8e <HAL_PCD_SetAddress+0x42>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f006 f91c 	bl	800cdbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	4608      	mov	r0, r1
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	70fb      	strb	r3, [r7, #3]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	803b      	strh	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da0f      	bge.n	8006bdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	f003 020f 	and.w	r2, r3, #15
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	3338      	adds	r3, #56	; 0x38
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4413      	add	r3, r2
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	705a      	strb	r2, [r3, #1]
 8006bda:	e00f      	b.n	8006bfc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	f003 020f 	and.w	r2, r3, #15
 8006be2:	4613      	mov	r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c08:	883a      	ldrh	r2, [r7, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	78ba      	ldrb	r2, [r7, #2]
 8006c12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c26:	78bb      	ldrb	r3, [r7, #2]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d102      	bne.n	8006c32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_PCD_EP_Open+0xaa>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e00e      	b.n	8006c5e <HAL_PCD_EP_Open+0xc8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68f9      	ldr	r1, [r7, #12]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f005 f99c 	bl	800bf8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da0f      	bge.n	8006c9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	3338      	adds	r3, #56	; 0x38
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3304      	adds	r3, #4
 8006c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	705a      	strb	r2, [r3, #1]
 8006c98:	e00f      	b.n	8006cba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	f003 020f 	and.w	r2, r3, #15
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_PCD_EP_Close+0x6e>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e00e      	b.n	8006cf2 <HAL_PCD_EP_Close+0x8c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f005 f9da 	bl	800c09c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
 8006d06:	460b      	mov	r3, r1
 8006d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	3304      	adds	r3, #4
 8006d22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2200      	movs	r2, #0
 8006d34:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d102      	bne.n	8006d56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6979      	ldr	r1, [r7, #20]
 8006d6e:	f005 fcb9 	bl	800c6e4 <USB_EP0StartXfer>
 8006d72:	e008      	b.n	8006d86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6979      	ldr	r1, [r7, #20]
 8006d82:	f005 fa67 	bl	800c254 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	f003 020f 	and.w	r2, r3, #15
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006db2:	681b      	ldr	r3, [r3, #0]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	f003 020f 	and.w	r2, r3, #15
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	3338      	adds	r3, #56	; 0x38
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	3304      	adds	r3, #4
 8006de6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2200      	movs	r2, #0
 8006df8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d102      	bne.n	8006e1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6979      	ldr	r1, [r7, #20]
 8006e32:	f005 fc57 	bl	800c6e4 <USB_EP0StartXfer>
 8006e36:	e008      	b.n	8006e4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	6979      	ldr	r1, [r7, #20]
 8006e46:	f005 fa05 	bl	800c254 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	f003 020f 	and.w	r2, r3, #15
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d901      	bls.n	8006e72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e050      	b.n	8006f14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da0f      	bge.n	8006e9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	3338      	adds	r3, #56	; 0x38
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3304      	adds	r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	705a      	strb	r2, [r3, #1]
 8006e98:	e00d      	b.n	8006eb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	3304      	adds	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_PCD_EP_SetStall+0x82>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e01e      	b.n	8006f14 <HAL_PCD_EP_SetStall+0xc0>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68f9      	ldr	r1, [r7, #12]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f005 fe95 	bl	800cc14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	b2d9      	uxtb	r1, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f04:	461a      	mov	r2, r3
 8006f06:	f006 f885 	bl	800d014 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	f003 020f 	and.w	r2, r3, #15
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d901      	bls.n	8006f3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e042      	b.n	8006fc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da0f      	bge.n	8006f62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 020f 	and.w	r2, r3, #15
 8006f48:	4613      	mov	r3, r2
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	3338      	adds	r3, #56	; 0x38
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4413      	add	r3, r2
 8006f56:	3304      	adds	r3, #4
 8006f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	705a      	strb	r2, [r3, #1]
 8006f60:	e00f      	b.n	8006f82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	3304      	adds	r3, #4
 8006f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_PCD_EP_ClrStall+0x86>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e00e      	b.n	8006fc0 <HAL_PCD_EP_ClrStall+0xa4>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f005 fe9d 	bl	800ccf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	da0c      	bge.n	8006ff6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	3338      	adds	r3, #56	; 0x38
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4413      	add	r3, r2
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e00c      	b.n	8007010 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	f003 020f 	and.w	r2, r3, #15
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68f9      	ldr	r1, [r7, #12]
 8007016:	4618      	mov	r0, r3
 8007018:	f005 fcbc 	bl	800c994 <USB_EPStopXfer>
 800701c:	4603      	mov	r3, r0
 800701e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007020:	7afb      	ldrb	r3, [r7, #11]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b08a      	sub	sp, #40	; 0x28
 800702e:	af02      	add	r7, sp, #8
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	3338      	adds	r3, #56	; 0x38
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	3304      	adds	r3, #4
 8007050:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	429a      	cmp	r2, r3
 800705c:	d901      	bls.n	8007062 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e06c      	b.n	800713c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	429a      	cmp	r2, r3
 8007076:	d902      	bls.n	800707e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	3303      	adds	r3, #3
 8007082:	089b      	lsrs	r3, r3, #2
 8007084:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007086:	e02b      	b.n	80070e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	429a      	cmp	r2, r3
 800709c:	d902      	bls.n	80070a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3303      	adds	r3, #3
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6919      	ldr	r1, [r3, #16]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	4603      	mov	r3, r0
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f005 fd10 	bl	800cae8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	441a      	add	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d809      	bhi.n	800710a <PCD_WriteEmptyTxFifo+0xe0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a1a      	ldr	r2, [r3, #32]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070fe:	429a      	cmp	r2, r3
 8007100:	d203      	bcs.n	800710a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1be      	bne.n	8007088 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699a      	ldr	r2, [r3, #24]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	429a      	cmp	r2, r3
 8007114:	d811      	bhi.n	800713a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	2201      	movs	r2, #1
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	43db      	mvns	r3, r3
 8007130:	6939      	ldr	r1, [r7, #16]
 8007132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007136:	4013      	ands	r3, r2
 8007138:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	333c      	adds	r3, #60	; 0x3c
 800715c:	3304      	adds	r3, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d17b      	bne.n	8007272 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d015      	beq.n	80071b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	4a61      	ldr	r2, [pc, #388]	; (800730c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	f240 80b9 	bls.w	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80b3 	beq.w	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a6:	461a      	mov	r2, r3
 80071a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ac:	6093      	str	r3, [r2, #8]
 80071ae:	e0a7      	b.n	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c6:	461a      	mov	r2, r3
 80071c8:	2320      	movs	r3, #32
 80071ca:	6093      	str	r3, [r2, #8]
 80071cc:	e098      	b.n	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 8093 	bne.w	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4a4b      	ldr	r2, [pc, #300]	; (800730c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d90f      	bls.n	8007202 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	461a      	mov	r2, r3
 80071fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fe:	6093      	str	r3, [r2, #8]
 8007200:	e07e      	b.n	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	4413      	add	r3, r2
 8007214:	3304      	adds	r3, #4
 8007216:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	0159      	lsls	r1, r3, #5
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	440b      	add	r3, r1
 8007224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d114      	bne.n	8007264 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800724c:	461a      	mov	r2, r3
 800724e:	2101      	movs	r1, #1
 8007250:	f005 fee0 	bl	800d014 <USB_EP0_OutStart>
 8007254:	e006      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	441a      	add	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f008 fbe2 	bl	800fa34 <HAL_PCD_DataOutStageCallback>
 8007270:	e046      	b.n	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4a26      	ldr	r2, [pc, #152]	; (8007310 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d124      	bne.n	80072c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	461a      	mov	r2, r3
 8007292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007296:	6093      	str	r3, [r2, #8]
 8007298:	e032      	b.n	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	461a      	mov	r2, r3
 80072b2:	2320      	movs	r3, #32
 80072b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f008 fbb9 	bl	800fa34 <HAL_PCD_DataOutStageCallback>
 80072c2:	e01d      	b.n	8007300 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d114      	bne.n	80072f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	4613      	mov	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d108      	bne.n	80072f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072ec:	461a      	mov	r2, r3
 80072ee:	2100      	movs	r1, #0
 80072f0:	f005 fe90 	bl	800d014 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f008 fb9a 	bl	800fa34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	4f54300a 	.word	0x4f54300a
 8007310:	4f54310a 	.word	0x4f54310a

08007314 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	333c      	adds	r3, #60	; 0x3c
 800732c:	3304      	adds	r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a15      	ldr	r2, [pc, #84]	; (800739c <PCD_EP_OutSetupPacket_int+0x88>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d90e      	bls.n	8007368 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	461a      	mov	r2, r3
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f008 fb51 	bl	800fa10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <PCD_EP_OutSetupPacket_int+0x88>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d90c      	bls.n	8007390 <PCD_EP_OutSetupPacket_int+0x7c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d108      	bne.n	8007390 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007388:	461a      	mov	r2, r3
 800738a:	2101      	movs	r1, #1
 800738c:	f005 fe42 	bl	800d014 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	4f54300a 	.word	0x4f54300a

080073a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
 80073ac:	4613      	mov	r3, r2
 80073ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d107      	bne.n	80073ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80073be:	883b      	ldrh	r3, [r7, #0]
 80073c0:	0419      	lsls	r1, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28
 80073cc:	e028      	b.n	8007420 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e00d      	b.n	80073fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	3340      	adds	r3, #64	; 0x40
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	3301      	adds	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	3b01      	subs	r3, #1
 8007404:	429a      	cmp	r2, r3
 8007406:	d3ec      	bcc.n	80073e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007408:	883b      	ldrh	r3, [r7, #0]
 800740a:	0418      	lsls	r0, r3, #16
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	3b01      	subs	r3, #1
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4302      	orrs	r2, r0
 8007418:	3340      	adds	r3, #64	; 0x40
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	887a      	ldrh	r2, [r7, #2]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e267      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d075      	beq.n	8007572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007486:	4b88      	ldr	r3, [pc, #544]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	2b04      	cmp	r3, #4
 8007490:	d00c      	beq.n	80074ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007492:	4b85      	ldr	r3, [pc, #532]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749a:	2b08      	cmp	r3, #8
 800749c:	d112      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800749e:	4b82      	ldr	r3, [pc, #520]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074aa:	d10b      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ac:	4b7e      	ldr	r3, [pc, #504]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05b      	beq.n	8007570 <HAL_RCC_OscConfig+0x108>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d157      	bne.n	8007570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e242      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d106      	bne.n	80074dc <HAL_RCC_OscConfig+0x74>
 80074ce:	4b76      	ldr	r3, [pc, #472]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e01d      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x98>
 80074e6:	4b70      	ldr	r3, [pc, #448]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6f      	ldr	r2, [pc, #444]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	4b6d      	ldr	r3, [pc, #436]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a6c      	ldr	r2, [pc, #432]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e00b      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 8007500:	4b69      	ldr	r3, [pc, #420]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a68      	ldr	r2, [pc, #416]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	4b66      	ldr	r3, [pc, #408]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a65      	ldr	r2, [pc, #404]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d013      	beq.n	8007548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007520:	f7fc fe9e 	bl	8004260 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007528:	f7fc fe9a 	bl	8004260 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	; 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e207      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753a:	4b5b      	ldr	r3, [pc, #364]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0xc0>
 8007546:	e014      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fc fe8a 	bl	8004260 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fc fe86 	bl	8004260 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	; 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e1f3      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007562:	4b51      	ldr	r3, [pc, #324]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0xe8>
 800756e:	e000      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d063      	beq.n	8007646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800757e:	4b4a      	ldr	r3, [pc, #296]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758a:	4b47      	ldr	r3, [pc, #284]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007592:	2b08      	cmp	r3, #8
 8007594:	d11c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007596:	4b44      	ldr	r3, [pc, #272]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a2:	4b41      	ldr	r3, [pc, #260]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e1c7      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ba:	4b3b      	ldr	r3, [pc, #236]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4937      	ldr	r1, [pc, #220]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ce:	e03a      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d8:	4b34      	ldr	r3, [pc, #208]	; (80076ac <HAL_RCC_OscConfig+0x244>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fc fe3f 	bl	8004260 <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e4:	e008      	b.n	80075f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e6:	f7fc fe3b 	bl	8004260 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e1a8      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f8:	4b2b      	ldr	r3, [pc, #172]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007604:	4b28      	ldr	r3, [pc, #160]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4925      	ldr	r1, [pc, #148]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]
 8007618:	e015      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <HAL_RCC_OscConfig+0x244>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fc fe1e 	bl	8004260 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007628:	f7fc fe1a 	bl	8004260 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e187      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763a:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d036      	beq.n	80076c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <HAL_RCC_OscConfig+0x248>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007660:	f7fc fdfe 	bl	8004260 <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007668:	f7fc fdfa 	bl	8004260 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e167      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <HAL_RCC_OscConfig+0x240>)
 800767c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x200>
 8007686:	e01b      	b.n	80076c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007688:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <HAL_RCC_OscConfig+0x248>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fc fde7 	bl	8004260 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007694:	e00e      	b.n	80076b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007696:	f7fc fde3 	bl	8004260 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d907      	bls.n	80076b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e150      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
 80076a8:	40023800 	.word	0x40023800
 80076ac:	42470000 	.word	0x42470000
 80076b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b4:	4b88      	ldr	r3, [pc, #544]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ea      	bne.n	8007696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8097 	beq.w	80077fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076d2:	4b81      	ldr	r3, [pc, #516]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	4b7d      	ldr	r3, [pc, #500]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a7c      	ldr	r2, [pc, #496]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
 80076ee:	4b7a      	ldr	r3, [pc, #488]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fe:	4b77      	ldr	r3, [pc, #476]	; (80078dc <HAL_RCC_OscConfig+0x474>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d118      	bne.n	800773c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800770a:	4b74      	ldr	r3, [pc, #464]	; (80078dc <HAL_RCC_OscConfig+0x474>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a73      	ldr	r2, [pc, #460]	; (80078dc <HAL_RCC_OscConfig+0x474>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007716:	f7fc fda3 	bl	8004260 <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771e:	f7fc fd9f 	bl	8004260 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e10c      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007730:	4b6a      	ldr	r3, [pc, #424]	; (80078dc <HAL_RCC_OscConfig+0x474>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <HAL_RCC_OscConfig+0x2ea>
 8007744:	4b64      	ldr	r3, [pc, #400]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007748:	4a63      	ldr	r2, [pc, #396]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6713      	str	r3, [r2, #112]	; 0x70
 8007750:	e01c      	b.n	800778c <HAL_RCC_OscConfig+0x324>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b05      	cmp	r3, #5
 8007758:	d10c      	bne.n	8007774 <HAL_RCC_OscConfig+0x30c>
 800775a:	4b5f      	ldr	r3, [pc, #380]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775e:	4a5e      	ldr	r2, [pc, #376]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	6713      	str	r3, [r2, #112]	; 0x70
 8007766:	4b5c      	ldr	r3, [pc, #368]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776a:	4a5b      	ldr	r2, [pc, #364]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	6713      	str	r3, [r2, #112]	; 0x70
 8007772:	e00b      	b.n	800778c <HAL_RCC_OscConfig+0x324>
 8007774:	4b58      	ldr	r3, [pc, #352]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	4a57      	ldr	r2, [pc, #348]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	6713      	str	r3, [r2, #112]	; 0x70
 8007780:	4b55      	ldr	r3, [pc, #340]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007784:	4a54      	ldr	r2, [pc, #336]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007786:	f023 0304 	bic.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fc fd64 	bl	8004260 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800779a:	e00a      	b.n	80077b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800779c:	f7fc fd60 	bl	8004260 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e0cb      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b2:	4b49      	ldr	r3, [pc, #292]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0ee      	beq.n	800779c <HAL_RCC_OscConfig+0x334>
 80077be:	e014      	b.n	80077ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c0:	f7fc fd4e 	bl	8004260 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077c6:	e00a      	b.n	80077de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c8:	f7fc fd4a 	bl	8004260 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e0b5      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077de:	4b3e      	ldr	r3, [pc, #248]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ee      	bne.n	80077c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d105      	bne.n	80077fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f0:	4b39      	ldr	r3, [pc, #228]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	4a38      	ldr	r2, [pc, #224]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80a1 	beq.w	8007948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007806:	4b34      	ldr	r3, [pc, #208]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b08      	cmp	r3, #8
 8007810:	d05c      	beq.n	80078cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d141      	bne.n	800789e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781a:	4b31      	ldr	r3, [pc, #196]	; (80078e0 <HAL_RCC_OscConfig+0x478>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fc fd1e 	bl	8004260 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007828:	f7fc fd1a 	bl	8004260 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e087      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783a:	4b27      	ldr	r3, [pc, #156]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	3b01      	subs	r3, #1
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	491b      	ldr	r1, [pc, #108]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 800786c:	4313      	orrs	r3, r2
 800786e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007870:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <HAL_RCC_OscConfig+0x478>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007876:	f7fc fcf3 	bl	8004260 <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800787e:	f7fc fcef 	bl	8004260 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e05c      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007890:	4b11      	ldr	r3, [pc, #68]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x416>
 800789c:	e054      	b.n	8007948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <HAL_RCC_OscConfig+0x478>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a4:	f7fc fcdc 	bl	8004260 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ac:	f7fc fcd8 	bl	8004260 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e045      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <HAL_RCC_OscConfig+0x470>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f0      	bne.n	80078ac <HAL_RCC_OscConfig+0x444>
 80078ca:	e03d      	b.n	8007948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d107      	bne.n	80078e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e038      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	40007000 	.word	0x40007000
 80078e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078e4:	4b1b      	ldr	r3, [pc, #108]	; (8007954 <HAL_RCC_OscConfig+0x4ec>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d028      	beq.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d121      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d11a      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007914:	4013      	ands	r3, r2
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800791a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800791c:	4293      	cmp	r3, r2
 800791e:	d111      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	085b      	lsrs	r3, r3, #1
 800792c:	3b01      	subs	r3, #1
 800792e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007930:	429a      	cmp	r2, r3
 8007932:	d107      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007940:	429a      	cmp	r2, r3
 8007942:	d001      	beq.n	8007948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800

08007958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e0cc      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800796c:	4b68      	ldr	r3, [pc, #416]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d90c      	bls.n	8007994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797a:	4b65      	ldr	r3, [pc, #404]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b63      	ldr	r3, [pc, #396]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0b8      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d020      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079ac:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4a58      	ldr	r2, [pc, #352]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079c4:	4b53      	ldr	r3, [pc, #332]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4a52      	ldr	r2, [pc, #328]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d0:	4b50      	ldr	r3, [pc, #320]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	494d      	ldr	r1, [pc, #308]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d044      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d107      	bne.n	8007a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f6:	4b47      	ldr	r3, [pc, #284]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d119      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e07f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d107      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a16:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e06f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a26:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e067      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a36:	4b37      	ldr	r3, [pc, #220]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f023 0203 	bic.w	r2, r3, #3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4934      	ldr	r1, [pc, #208]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a48:	f7fc fc0a 	bl	8004260 <HAL_GetTick>
 8007a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4e:	e00a      	b.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a50:	f7fc fc06 	bl	8004260 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e04f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	4b2b      	ldr	r3, [pc, #172]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 020c 	and.w	r2, r3, #12
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1eb      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a78:	4b25      	ldr	r3, [pc, #148]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d20c      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	4b22      	ldr	r3, [pc, #136]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8e:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e032      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aac:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4916      	ldr	r1, [pc, #88]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	490e      	ldr	r1, [pc, #56]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ade:	f000 f821 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	490a      	ldr	r1, [pc, #40]	; (8007b18 <HAL_RCC_ClockConfig+0x1c0>)
 8007af0:	5ccb      	ldrb	r3, [r1, r3]
 8007af2:	fa22 f303 	lsr.w	r3, r2, r3
 8007af6:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <HAL_RCC_ClockConfig+0x1c8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fc fb6a 	bl	80041d8 <HAL_InitTick>

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40023c00 	.word	0x40023c00
 8007b14:	40023800 	.word	0x40023800
 8007b18:	08013040 	.word	0x08013040
 8007b1c:	20000150 	.word	0x20000150
 8007b20:	200001b4 	.word	0x200001b4

08007b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b28:	b090      	sub	sp, #64	; 0x40
 8007b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	2300      	movs	r3, #0
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b34:	2300      	movs	r3, #0
 8007b36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b3c:	4b59      	ldr	r3, [pc, #356]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 030c 	and.w	r3, r3, #12
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d00d      	beq.n	8007b64 <HAL_RCC_GetSysClockFreq+0x40>
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	f200 80a1 	bhi.w	8007c90 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_RCC_GetSysClockFreq+0x34>
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d003      	beq.n	8007b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8007b56:	e09b      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b58:	4b53      	ldr	r3, [pc, #332]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b5c:	e09b      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b5e:	4b53      	ldr	r3, [pc, #332]	; (8007cac <HAL_RCC_GetSysClockFreq+0x188>)
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b62:	e098      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b64:	4b4f      	ldr	r3, [pc, #316]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b6e:	4b4d      	ldr	r3, [pc, #308]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d028      	beq.n	8007bcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b7a:	4b4a      	ldr	r3, [pc, #296]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	099b      	lsrs	r3, r3, #6
 8007b80:	2200      	movs	r2, #0
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	627a      	str	r2, [r7, #36]	; 0x24
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4b47      	ldr	r3, [pc, #284]	; (8007cac <HAL_RCC_GetSysClockFreq+0x188>)
 8007b90:	fb03 f201 	mul.w	r2, r3, r1
 8007b94:	2300      	movs	r3, #0
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	4a43      	ldr	r2, [pc, #268]	; (8007cac <HAL_RCC_GetSysClockFreq+0x188>)
 8007b9e:	fba0 1202 	umull	r1, r2, r0, r2
 8007ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ba4:	460a      	mov	r2, r1
 8007ba6:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007baa:	4413      	add	r3, r2
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	61fa      	str	r2, [r7, #28]
 8007bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007bbe:	f7f9 f843 	bl	8000c48 <__aeabi_uldivmod>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bca:	e053      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bcc:	4b35      	ldr	r3, [pc, #212]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	099b      	lsrs	r3, r3, #6
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	617a      	str	r2, [r7, #20]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bde:	f04f 0b00 	mov.w	fp, #0
 8007be2:	4652      	mov	r2, sl
 8007be4:	465b      	mov	r3, fp
 8007be6:	f04f 0000 	mov.w	r0, #0
 8007bea:	f04f 0100 	mov.w	r1, #0
 8007bee:	0159      	lsls	r1, r3, #5
 8007bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bf4:	0150      	lsls	r0, r2, #5
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	ebb2 080a 	subs.w	r8, r2, sl
 8007bfe:	eb63 090b 	sbc.w	r9, r3, fp
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c16:	ebb2 0408 	subs.w	r4, r2, r8
 8007c1a:	eb63 0509 	sbc.w	r5, r3, r9
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	00eb      	lsls	r3, r5, #3
 8007c28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c2c:	00e2      	lsls	r2, r4, #3
 8007c2e:	4614      	mov	r4, r2
 8007c30:	461d      	mov	r5, r3
 8007c32:	eb14 030a 	adds.w	r3, r4, sl
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	eb45 030b 	adc.w	r3, r5, fp
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	028b      	lsls	r3, r1, #10
 8007c4e:	4621      	mov	r1, r4
 8007c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c54:	4621      	mov	r1, r4
 8007c56:	028a      	lsls	r2, r1, #10
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	2200      	movs	r2, #0
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	60fa      	str	r2, [r7, #12]
 8007c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c68:	f7f8 ffee 	bl	8000c48 <__aeabi_uldivmod>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4613      	mov	r3, r2
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c74:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	3301      	adds	r3, #1
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c8e:	e002      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3740      	adds	r7, #64	; 0x40
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	00f42400 	.word	0x00f42400
 8007cac:	00b71b00 	.word	0x00b71b00

08007cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000150 	.word	0x20000150

08007cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ccc:	f7ff fff0 	bl	8007cb0 <HAL_RCC_GetHCLKFreq>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	0a9b      	lsrs	r3, r3, #10
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	4903      	ldr	r1, [pc, #12]	; (8007cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cde:	5ccb      	ldrb	r3, [r1, r3]
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	08013050 	.word	0x08013050

08007cf0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e022      	b.n	8007d48 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d105      	bne.n	8007d1a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fb f975 	bl	8003004 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f814 	bl	8007d50 <HAL_SD_InitCard>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e00a      	b.n	8007d48 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d50:	b5b0      	push	{r4, r5, r7, lr}
 8007d52:	b08e      	sub	sp, #56	; 0x38
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007d6c:	2376      	movs	r3, #118	; 0x76
 8007d6e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681d      	ldr	r5, [r3, #0]
 8007d74:	466c      	mov	r4, sp
 8007d76:	f107 0314 	add.w	r3, r7, #20
 8007d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d82:	f107 0308 	add.w	r3, r7, #8
 8007d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f003 f813 	bl	800adb4 <SDIO_Init>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e04f      	b.n	8007e40 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007da0:	4b29      	ldr	r3, [pc, #164]	; (8007e48 <HAL_SD_InitCard+0xf8>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f003 f84b 	bl	800ae46 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <HAL_SD_InitCard+0xf8>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007db6:	2002      	movs	r0, #2
 8007db8:	f7fc fa5e 	bl	8004278 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 f805 	bl	8008dcc <SD_PowerON>
 8007dc2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e02e      	b.n	8007e40 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 ff24 	bl	8008c30 <SD_InitCard>
 8007de8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e01b      	b.n	8007e40 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e10:	4618      	mov	r0, r3
 8007e12:	f003 f8aa 	bl	800af6a <SDMMC_CmdBlockLength>
 8007e16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00f      	beq.n	8007e3e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <HAL_SD_InitCard+0xfc>)
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3728      	adds	r7, #40	; 0x28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bdb0      	pop	{r4, r5, r7, pc}
 8007e48:	422580a0 	.word	0x422580a0
 8007e4c:	004005ff 	.word	0x004005ff

08007e50 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e0c0      	b.n	8007ffa <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	f040 80b9 	bne.w	8007ff8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d907      	bls.n	8007eaa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e0a7      	b.n	8007ffa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2203      	movs	r2, #3
 8007eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007ec8:	f043 0302 	orr.w	r3, r3, #2
 8007ecc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	4a4c      	ldr	r2, [pc, #304]	; (8008004 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	4a4b      	ldr	r2, [pc, #300]	; (8008008 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007edc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	2200      	movs	r2, #0
 8007eec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3380      	adds	r3, #128	; 0x80
 8007f14:	4619      	mov	r1, r3
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	025b      	lsls	r3, r3, #9
 8007f1c:	089b      	lsrs	r3, r3, #2
 8007f1e:	f7fc fb8f 	bl	8004640 <HAL_DMA_Start_IT>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d017      	beq.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007f36:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a33      	ldr	r2, [pc, #204]	; (800800c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e050      	b.n	8007ffa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f58:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d002      	beq.n	8007f6c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	025b      	lsls	r3, r3, #9
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f70:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	025b      	lsls	r3, r3, #9
 8007f76:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007f78:	2390      	movs	r3, #144	; 0x90
 8007f7a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007f84:	2301      	movs	r3, #1
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f107 0210 	add.w	r2, r7, #16
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f002 ffbd 	bl	800af12 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d90a      	bls.n	8007fb4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2282      	movs	r2, #130	; 0x82
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007faa:	4618      	mov	r0, r3
 8007fac:	f003 f821 	bl	800aff2 <SDMMC_CmdReadMultiBlock>
 8007fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fb2:	e009      	b.n	8007fc8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2281      	movs	r2, #129	; 0x81
 8007fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f002 fff4 	bl	800afae <SDMMC_CmdReadSingleBlock>
 8007fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d012      	beq.n	8007ff4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a0e      	ldr	r2, [pc, #56]	; (800800c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e002      	b.n	8007ffa <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e000      	b.n	8007ffa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ff8:	2302      	movs	r3, #2
  }
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3730      	adds	r7, #48	; 0x30
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	08008a3f 	.word	0x08008a3f
 8008008:	08008ab1 	.word	0x08008ab1
 800800c:	004005ff 	.word	0x004005ff
 8008010:	4225858c 	.word	0x4225858c

08008014 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08c      	sub	sp, #48	; 0x30
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d107      	bne.n	800803c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e0c5      	b.n	80081c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b01      	cmp	r3, #1
 8008046:	f040 80be 	bne.w	80081c6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	441a      	add	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	429a      	cmp	r2, r3
 800805c:	d907      	bls.n	800806e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e0ac      	b.n	80081c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2203      	movs	r2, #3
 8008072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008096:	4a4e      	ldr	r2, [pc, #312]	; (80081d0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	4a4d      	ldr	r2, [pc, #308]	; (80081d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80080a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a6:	2200      	movs	r2, #0
 80080a8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d002      	beq.n	80080b8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	025b      	lsls	r3, r3, #9
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d90a      	bls.n	80080d4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	22a0      	movs	r2, #160	; 0xa0
 80080c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ca:	4618      	mov	r0, r3
 80080cc:	f002 ffd5 	bl	800b07a <SDMMC_CmdWriteMultiBlock>
 80080d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080d2:	e009      	b.n	80080e8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2290      	movs	r2, #144	; 0x90
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e0:	4618      	mov	r0, r3
 80080e2:	f002 ffa8 	bl	800b036 <SDMMC_CmdWriteSingleBlock>
 80080e6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d012      	beq.n	8008114 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a39      	ldr	r2, [pc, #228]	; (80081d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e059      	b.n	80081c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008114:	4b31      	ldr	r3, [pc, #196]	; (80081dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008116:	2201      	movs	r2, #1
 8008118:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	2240      	movs	r2, #64	; 0x40
 8008120:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3380      	adds	r3, #128	; 0x80
 800814a:	461a      	mov	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	025b      	lsls	r3, r3, #9
 8008150:	089b      	lsrs	r3, r3, #2
 8008152:	f7fc fa75 	bl	8004640 <HAL_DMA_Start_IT>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01c      	beq.n	8008196 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800816a:	f023 0302 	bic.w	r3, r3, #2
 800816e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e018      	b.n	80081c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295
 800819a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	025b      	lsls	r3, r3, #9
 80081a0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80081a2:	2390      	movs	r3, #144	; 0x90
 80081a4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80081ae:	2301      	movs	r3, #1
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f107 0210 	add.w	r2, r7, #16
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f002 fea8 	bl	800af12 <SDIO_ConfigData>

      return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e000      	b.n	80081c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
  }
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3730      	adds	r7, #48	; 0x30
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	08008a15 	.word	0x08008a15
 80081d4:	08008ab1 	.word	0x08008ab1
 80081d8:	004005ff 	.word	0x004005ff
 80081dc:	4225858c 	.word	0x4225858c

080081e0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d008      	beq.n	800820e <HAL_SD_IRQHandler+0x2e>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 ffff 	bl	800920a <SD_Read_IT>
 800820c:	e165      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 808f 	beq.w	800833c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008226:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8008236:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800823a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0201 	bic.w	r2, r2, #1
 800824a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d039      	beq.n	80082ca <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <HAL_SD_IRQHandler+0x8a>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d011      	beq.n	800828e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f002 ff26 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 8008274:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d008      	beq.n	800828e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f92f 	bl	80084ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f240 523a 	movw	r2, #1338	; 0x53a
 8008296:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <HAL_SD_IRQHandler+0xda>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f004 ffda 	bl	800d274 <HAL_SD_RxCpltCallback>
 80082c0:	e10b      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f004 ffcc 	bl	800d260 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082c8:	e107      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8102 	beq.w	80084da <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d011      	beq.n	8008304 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f002 feeb 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 80082ea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8f4 	bl	80084ec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	f040 80e5 	bne.w	80084da <HAL_SD_IRQHandler+0x2fa>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 80df 	bne.w	80084da <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0208 	bic.w	r2, r2, #8
 800832a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f004 ff93 	bl	800d260 <HAL_SD_TxCpltCallback>
}
 800833a:	e0ce      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d008      	beq.n	800835c <HAL_SD_IRQHandler+0x17c>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 ffa9 	bl	80092ac <SD_Write_IT>
 800835a:	e0be      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008362:	f240 233a 	movw	r3, #570	; 0x23a
 8008366:	4013      	ands	r3, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80b6 	beq.w	80084da <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	f043 0202 	orr.w	r2, r3, #2
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	f043 0208 	orr.w	r2, r3, #8
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	f043 0220 	orr.w	r2, r3, #32
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d005      	beq.n	80083d6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	f043 0210 	orr.w	r2, r3, #16
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	f043 0208 	orr.w	r2, r3, #8
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f240 723a 	movw	r2, #1850	; 0x73a
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008408:	f023 0302 	bic.w	r3, r3, #2
 800840c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f002 fe54 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 8008418:	4602      	mov	r2, r0
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f855 	bl	80084ec <HAL_SD_ErrorCallback>
}
 8008442:	e04a      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844a:	2b00      	cmp	r3, #0
 800844c:	d045      	beq.n	80084da <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d104      	bne.n	8008462 <HAL_SD_IRQHandler+0x282>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	d011      	beq.n	8008486 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	4a1f      	ldr	r2, [pc, #124]	; (80084e4 <HAL_SD_IRQHandler+0x304>)
 8008468:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846e:	4618      	mov	r0, r3
 8008470:	f7fc f93e 	bl	80046f0 <HAL_DMA_Abort_IT>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d02f      	beq.n	80084da <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fb68 	bl	8008b54 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008484:	e029      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_SD_IRQHandler+0x2ba>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d011      	beq.n	80084be <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	4a12      	ldr	r2, [pc, #72]	; (80084e8 <HAL_SD_IRQHandler+0x308>)
 80084a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fc f922 	bl	80046f0 <HAL_DMA_Abort_IT>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d013      	beq.n	80084da <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fb83 	bl	8008bc2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084bc:	e00d      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f004 feba 	bl	800d24c <HAL_SD_AbortCallback>
}
 80084d8:	e7ff      	b.n	80084da <HAL_SD_IRQHandler+0x2fa>
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	08008b55 	.word	0x08008b55
 80084e8:	08008bc3 	.word	0x08008bc3

080084ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800850e:	0f9b      	lsrs	r3, r3, #30
 8008510:	b2da      	uxtb	r2, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800851a:	0e9b      	lsrs	r3, r3, #26
 800851c:	b2db      	uxtb	r3, r3
 800851e:	f003 030f 	and.w	r3, r3, #15
 8008522:	b2da      	uxtb	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852c:	0e1b      	lsrs	r3, r3, #24
 800852e:	b2db      	uxtb	r3, r3
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	b2da      	uxtb	r2, r3
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800853e:	0c1b      	lsrs	r3, r3, #16
 8008540:	b2da      	uxtb	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	b2da      	uxtb	r2, r3
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008556:	b2da      	uxtb	r2, r3
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008560:	0d1b      	lsrs	r3, r3, #20
 8008562:	b29a      	uxth	r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800856c:	0c1b      	lsrs	r3, r3, #16
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	b2da      	uxtb	r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800857e:	0bdb      	lsrs	r3, r3, #15
 8008580:	b2db      	uxtb	r3, r3
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	b2da      	uxtb	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008590:	0b9b      	lsrs	r3, r3, #14
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	b2da      	uxtb	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a2:	0b5b      	lsrs	r3, r3, #13
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b4:	0b1b      	lsrs	r3, r3, #12
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2200      	movs	r2, #0
 80085c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d163      	bne.n	8008698 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d4:	009a      	lsls	r2, r3, #2
 80085d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80085da:	4013      	ands	r3, r2
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80085e0:	0f92      	lsrs	r2, r2, #30
 80085e2:	431a      	orrs	r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ec:	0edb      	lsrs	r3, r3, #27
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fe:	0e1b      	lsrs	r3, r3, #24
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	b2da      	uxtb	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008610:	0d5b      	lsrs	r3, r3, #21
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	b2da      	uxtb	r2, r3
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008622:	0c9b      	lsrs	r3, r3, #18
 8008624:	b2db      	uxtb	r3, r3
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	b2da      	uxtb	r2, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008634:	0bdb      	lsrs	r3, r3, #15
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	b2da      	uxtb	r2, r3
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	7e1b      	ldrb	r3, [r3, #24]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	3302      	adds	r3, #2
 8008658:	2201      	movs	r2, #1
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008662:	fb03 f202 	mul.w	r2, r3, r2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	7a1b      	ldrb	r3, [r3, #8]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	2201      	movs	r2, #1
 8008676:	409a      	lsls	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008684:	0a52      	lsrs	r2, r2, #9
 8008686:	fb03 f202 	mul.w	r2, r3, r2
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008694:	661a      	str	r2, [r3, #96]	; 0x60
 8008696:	e031      	b.n	80086fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869c:	2b01      	cmp	r3, #1
 800869e:	d11d      	bne.n	80086dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a4:	041b      	lsls	r3, r3, #16
 80086a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ae:	0c1b      	lsrs	r3, r3, #16
 80086b0:	431a      	orrs	r2, r3
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	3301      	adds	r3, #1
 80086bc:	029a      	lsls	r2, r3, #10
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	661a      	str	r2, [r3, #96]	; 0x60
 80086da:	e00f      	b.n	80086fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a58      	ldr	r2, [pc, #352]	; (8008844 <HAL_SD_GetCardCSD+0x344>)
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e09d      	b.n	8008838 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008700:	0b9b      	lsrs	r3, r3, #14
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	b2da      	uxtb	r2, r3
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008712:	09db      	lsrs	r3, r3, #7
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871a:	b2da      	uxtb	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872a:	b2da      	uxtb	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008734:	0fdb      	lsrs	r3, r3, #31
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008740:	0f5b      	lsrs	r3, r3, #29
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	b2da      	uxtb	r2, r3
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008752:	0e9b      	lsrs	r3, r3, #26
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	b2da      	uxtb	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	0d9b      	lsrs	r3, r3, #22
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	b2da      	uxtb	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	0d5b      	lsrs	r3, r3, #21
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	0bdb      	lsrs	r3, r3, #15
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	0b9b      	lsrs	r3, r3, #14
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	0b5b      	lsrs	r3, r3, #13
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e2:	0b1b      	lsrs	r3, r3, #12
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f6:	0a9b      	lsrs	r3, r3, #10
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008826:	b2da      	uxtb	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	004005ff 	.word	0x004005ff

08008848 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80088a0:	b5b0      	push	{r4, r5, r7, lr}
 80088a2:	b08e      	sub	sp, #56	; 0x38
 80088a4:	af04      	add	r7, sp, #16
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2203      	movs	r2, #3
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d02e      	beq.n	800891e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c6:	d106      	bne.n	80088d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
 80088d4:	e029      	b.n	800892a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088dc:	d10a      	bne.n	80088f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fb2a 	bl	8008f38 <SD_WideBus_Enable>
 80088e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
 80088f2:	e01a      	b.n	800892a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fb67 	bl	8008fce <SD_WideBus_Disable>
 8008900:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	639a      	str	r2, [r3, #56]	; 0x38
 800890e:	e00c      	b.n	800892a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	639a      	str	r2, [r3, #56]	; 0x38
 800891c:	e005      	b.n	800892a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a26      	ldr	r2, [pc, #152]	; (80089d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008948:	e01f      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681d      	ldr	r5, [r3, #0]
 8008970:	466c      	mov	r4, sp
 8008972:	f107 0314 	add.w	r3, r7, #20
 8008976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800897a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800897e:	f107 0308 	add.w	r3, r7, #8
 8008982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008984:	4628      	mov	r0, r5
 8008986:	f002 fa15 	bl	800adb4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008992:	4618      	mov	r0, r3
 8008994:	f002 fae9 	bl	800af6a <SDMMC_CmdBlockLength>
 8008998:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00c      	beq.n	80089ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80089a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80089c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3728      	adds	r7, #40	; 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bdb0      	pop	{r4, r5, r7, pc}
 80089ce:	bf00      	nop
 80089d0:	004005ff 	.word	0x004005ff

080089d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80089e0:	f107 030c 	add.w	r3, r7, #12
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa7e 	bl	8008ee8 <SD_SendStatus>
 80089ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	0a5b      	lsrs	r3, r3, #9
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a0a:	693b      	ldr	r3, [r7, #16]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a50:	2b82      	cmp	r3, #130	; 0x82
 8008a52:	d111      	bne.n	8008a78 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f002 fb31 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 8008a5e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f7ff fd3a 	bl	80084ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0208 	bic.w	r2, r2, #8
 8008a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f004 fbe7 	bl	800d274 <HAL_SD_RxCpltCallback>
#endif
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fb ffc2 	bl	8004a48 <HAL_DMA_GetError>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d03e      	beq.n	8008b48 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d002      	beq.n	8008ae6 <SD_DMAError+0x36>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d12d      	bne.n	8008b42 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a19      	ldr	r2, [pc, #100]	; (8008b50 <SD_DMAError+0xa0>)
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008afc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008b0a:	6978      	ldr	r0, [r7, #20]
 8008b0c:	f7ff ff62 	bl	80089d4 <HAL_SD_GetCardState>
 8008b10:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b06      	cmp	r3, #6
 8008b16:	d002      	beq.n	8008b1e <SD_DMAError+0x6e>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	d10a      	bne.n	8008b34 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f002 facc 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff fcd2 	bl	80084ec <HAL_SD_ErrorCallback>
#endif
  }
}
 8008b48:	bf00      	nop
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	004005ff 	.word	0x004005ff

08008b54 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff ff31 	bl	80089d4 <HAL_SD_GetCardState>
 8008b72:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b06      	cmp	r3, #6
 8008b86:	d002      	beq.n	8008b8e <SD_DMATxAbort+0x3a>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	d10a      	bne.n	8008ba4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f002 fa94 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f004 fb4d 	bl	800d24c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008bb2:	e002      	b.n	8008bba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7ff fc99 	bl	80084ec <HAL_SD_ErrorCallback>
}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f7ff fefa 	bl	80089d4 <HAL_SD_GetCardState>
 8008be0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	d002      	beq.n	8008bfc <SD_DMARxAbort+0x3a>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	d10a      	bne.n	8008c12 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f002 fa5d 	bl	800b0c0 <SDMMC_CmdStopTransfer>
 8008c06:	4602      	mov	r2, r0
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d103      	bne.n	8008c22 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f004 fb16 	bl	800d24c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008c20:	e002      	b.n	8008c28 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f7ff fc62 	bl	80084ec <HAL_SD_ErrorCallback>
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	b094      	sub	sp, #80	; 0x50
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f002 f90e 	bl	800ae62 <SDIO_GetPowerState>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c50:	e0b8      	b.n	8008dc4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d02f      	beq.n	8008cba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 fb38 	bl	800b2d4 <SDMMC_CmdSendCID>
 8008c64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <SD_InitCard+0x40>
    {
      return errorstate;
 8008c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6e:	e0a9      	b.n	8008dc4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 f938 	bl	800aeec <SDIO_GetResponse>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2104      	movs	r1, #4
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f002 f92f 	bl	800aeec <SDIO_GetResponse>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2108      	movs	r1, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f002 f926 	bl	800aeec <SDIO_GetResponse>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	210c      	movs	r1, #12
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 f91d 	bl	800aeec <SDIO_GetResponse>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d00d      	beq.n	8008cde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f107 020e 	add.w	r2, r7, #14
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 fb3e 	bl	800b34e <SDMMC_CmdSetRelAdd>
 8008cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <SD_InitCard+0xae>
    {
      return errorstate;
 8008cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cdc:	e072      	b.n	8008dc4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d036      	beq.n	8008d54 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ce6:	89fb      	ldrh	r3, [r7, #14]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf6:	041b      	lsls	r3, r3, #16
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f002 fb08 	bl	800b310 <SDMMC_CmdSendCSD>
 8008d00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0a:	e05b      	b.n	8008dc4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2100      	movs	r1, #0
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 f8ea 	bl	800aeec <SDIO_GetResponse>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2104      	movs	r1, #4
 8008d24:	4618      	mov	r0, r3
 8008d26:	f002 f8e1 	bl	800aeec <SDIO_GetResponse>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2108      	movs	r1, #8
 8008d36:	4618      	mov	r0, r3
 8008d38:	f002 f8d8 	bl	800aeec <SDIO_GetResponse>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	210c      	movs	r1, #12
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f002 f8cf 	bl	800aeec <SDIO_GetResponse>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2104      	movs	r1, #4
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 f8c6 	bl	800aeec <SDIO_GetResponse>
 8008d60:	4603      	mov	r3, r0
 8008d62:	0d1a      	lsrs	r2, r3, #20
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d68:	f107 0310 	add.w	r3, r7, #16
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fbc6 	bl	8008500 <HAL_SD_GetCardCSD>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d7e:	e021      	b.n	8008dc4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6819      	ldr	r1, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d88:	041b      	lsls	r3, r3, #16
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	461c      	mov	r4, r3
 8008d8e:	4615      	mov	r5, r2
 8008d90:	4622      	mov	r2, r4
 8008d92:	462b      	mov	r3, r5
 8008d94:	4608      	mov	r0, r1
 8008d96:	f002 f9b5 	bl	800b104 <SDMMC_CmdSelDesel>
 8008d9a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <SD_InitCard+0x176>
  {
    return errorstate;
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	e00e      	b.n	8008dc4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681d      	ldr	r5, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	466c      	mov	r4, sp
 8008dae:	f103 0210 	add.w	r2, r3, #16
 8008db2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008db8:	3304      	adds	r3, #4
 8008dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f001 fff9 	bl	800adb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3740      	adds	r7, #64	; 0x40
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bdb0      	pop	{r4, r5, r7, pc}

08008dcc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 f9b0 	bl	800b14a <SDMMC_CmdGoIdleState>
 8008dea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	e072      	b.n	8008edc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 f9c3 	bl	800b186 <SDMMC_CmdOperCond>
 8008e00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00d      	beq.n	8008e24 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f002 f999 	bl	800b14a <SDMMC_CmdGoIdleState>
 8008e18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	e05b      	b.n	8008edc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d137      	bne.n	8008ea2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2100      	movs	r1, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 f9c3 	bl	800b1c4 <SDMMC_CmdAppCommand>
 8008e3e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d02d      	beq.n	8008ea2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e4a:	e047      	b.n	8008edc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 f9b6 	bl	800b1c4 <SDMMC_CmdAppCommand>
 8008e58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <SD_PowerON+0x98>
    {
      return errorstate;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	e03b      	b.n	8008edc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	491e      	ldr	r1, [pc, #120]	; (8008ee4 <SD_PowerON+0x118>)
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f002 f9cc 	bl	800b208 <SDMMC_CmdAppOperCommand>
 8008e70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e7c:	e02e      	b.n	8008edc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f002 f831 	bl	800aeec <SDIO_GetResponse>
 8008e8a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	0fdb      	lsrs	r3, r3, #31
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <SD_PowerON+0xcc>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <SD_PowerON+0xce>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	613b      	str	r3, [r7, #16]

    count++;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d802      	bhi.n	8008eb2 <SD_PowerON+0xe6>
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0cc      	beq.n	8008e4c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d902      	bls.n	8008ec2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ec0:	e00c      	b.n	8008edc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
 8008ed2:	e002      	b.n	8008eda <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	c1100000 	.word	0xc1100000

08008ee8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008efc:	e018      	b.n	8008f30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	041b      	lsls	r3, r3, #16
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f002 fa40 	bl	800b390 <SDMMC_CmdSendStatus>
 8008f10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	e009      	b.n	8008f30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2100      	movs	r1, #0
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 ffe2 	bl	800aeec <SDIO_GetResponse>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 ffcc 	bl	800aeec <SDIO_GetResponse>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f5e:	d102      	bne.n	8008f66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f64:	e02f      	b.n	8008fc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f879 	bl	8009064 <SD_FindSCR>
 8008f72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	e023      	b.n	8008fc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01c      	beq.n	8008fc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f90:	041b      	lsls	r3, r3, #16
 8008f92:	4619      	mov	r1, r3
 8008f94:	4610      	mov	r0, r2
 8008f96:	f002 f915 	bl	800b1c4 <SDMMC_CmdAppCommand>
 8008f9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	e00f      	b.n	8008fc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2102      	movs	r1, #2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 f94e 	bl	800b24e <SDMMC_CmdBusWidth>
 8008fb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	e003      	b.n	8008fc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e001      	b.n	8008fc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f001 ff81 	bl	800aeec <SDIO_GetResponse>
 8008fea:	4603      	mov	r3, r0
 8008fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ff4:	d102      	bne.n	8008ffc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ffa:	e02f      	b.n	800905c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ffc:	f107 030c 	add.w	r3, r7, #12
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f82e 	bl	8009064 <SD_FindSCR>
 8009008:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	e023      	b.n	800905c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01c      	beq.n	8009058 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009026:	041b      	lsls	r3, r3, #16
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f002 f8ca 	bl	800b1c4 <SDMMC_CmdAppCommand>
 8009030:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	e00f      	b.n	800905c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f002 f903 	bl	800b24e <SDMMC_CmdBusWidth>
 8009048:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	e003      	b.n	800905c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009054:	2300      	movs	r3, #0
 8009056:	e001      	b.n	800905c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009058:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009064:	b590      	push	{r4, r7, lr}
 8009066:	b08f      	sub	sp, #60	; 0x3c
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800906e:	f7fb f8f7 	bl	8004260 <HAL_GetTick>
 8009072:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009078:	2300      	movs	r3, #0
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	2300      	movs	r3, #0
 800907e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2108      	movs	r1, #8
 800908a:	4618      	mov	r0, r3
 800908c:	f001 ff6d 	bl	800af6a <SDMMC_CmdBlockLength>
 8009090:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	e0b2      	b.n	8009202 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a4:	041b      	lsls	r3, r3, #16
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f002 f88b 	bl	800b1c4 <SDMMC_CmdAppCommand>
 80090ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	e0a3      	b.n	8009202 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ba:	f04f 33ff 	mov.w	r3, #4294967295
 80090be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80090c0:	2308      	movs	r3, #8
 80090c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80090c4:	2330      	movs	r3, #48	; 0x30
 80090c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80090c8:	2302      	movs	r3, #2
 80090ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f107 0210 	add.w	r2, r7, #16
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f001 ff17 	bl	800af12 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 f8d2 	bl	800b292 <SDMMC_CmdSendSCR>
 80090ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02a      	beq.n	800914c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	e083      	b.n	8009202 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00f      	beq.n	8009128 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6819      	ldr	r1, [r3, #0]
 800910c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	f107 0208 	add.w	r2, r7, #8
 8009114:	18d4      	adds	r4, r2, r3
 8009116:	4608      	mov	r0, r1
 8009118:	f001 fe77 	bl	800ae0a <SDIO_ReadFIFO>
 800911c:	4603      	mov	r3, r0
 800911e:	6023      	str	r3, [r4, #0]
      index++;
 8009120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009122:	3301      	adds	r3, #1
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
 8009126:	e006      	b.n	8009136 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d012      	beq.n	800915c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009136:	f7fb f893 	bl	8004260 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d102      	bne.n	800914c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009146:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800914a:	e05a      	b.n	8009202 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009152:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0cf      	beq.n	80090fa <SD_FindSCR+0x96>
 800915a:	e000      	b.n	800915e <SD_FindSCR+0xfa>
      break;
 800915c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2208      	movs	r2, #8
 8009172:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009174:	2308      	movs	r3, #8
 8009176:	e044      	b.n	8009202 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917e:	f003 0302 	and.w	r3, r3, #2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2202      	movs	r2, #2
 800918c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800918e:	2302      	movs	r3, #2
 8009190:	e037      	b.n	8009202 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2220      	movs	r2, #32
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80091a8:	2320      	movs	r3, #32
 80091aa:	e02a      	b.n	8009202 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	061a      	lsls	r2, r3, #24
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	0a1b      	lsrs	r3, r3, #8
 80091c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	0e1b      	lsrs	r3, r3, #24
 80091d2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	601a      	str	r2, [r3, #0]
    scr++;
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	3304      	adds	r3, #4
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	061a      	lsls	r2, r3, #24
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	0e1b      	lsrs	r3, r3, #24
 80091fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	373c      	adds	r7, #60	; 0x3c
 8009206:	46bd      	mov	sp, r7
 8009208:	bd90      	pop	{r4, r7, pc}

0800920a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b086      	sub	sp, #24
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d03f      	beq.n	80092a4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e033      	b.n	8009292 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f001 fdeb 	bl	800ae0a <SDIO_ReadFIFO>
 8009234:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3b01      	subs	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	b2da      	uxtb	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	3b01      	subs	r3, #1
 800925e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	0c1b      	lsrs	r3, r3, #16
 8009264:	b2da      	uxtb	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	701a      	strb	r2, [r3, #0]
      tmp++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	3b01      	subs	r3, #1
 8009274:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	0e1b      	lsrs	r3, r3, #24
 800927a:	b2da      	uxtb	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3301      	adds	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3b01      	subs	r3, #1
 800928a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	3301      	adds	r3, #1
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b07      	cmp	r3, #7
 8009296:	d9c8      	bls.n	800922a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80092a4:	bf00      	nop
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d043      	beq.n	800934e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e037      	b.n	800933c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3b01      	subs	r3, #1
 80092dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	021a      	lsls	r2, r3, #8
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3301      	adds	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	041a      	lsls	r2, r3, #16
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3b01      	subs	r3, #1
 800930c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	061a      	lsls	r2, r3, #24
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4313      	orrs	r3, r2
 8009318:	60bb      	str	r3, [r7, #8]
      tmp++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3301      	adds	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	3b01      	subs	r3, #1
 8009324:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f107 0208 	add.w	r2, r7, #8
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fd77 	bl	800ae24 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	3301      	adds	r3, #1
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b07      	cmp	r3, #7
 8009340:	d9c4      	bls.n	80092cc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800934e:	bf00      	nop
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e041      	b.n	80093ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7f9 ff41 	bl	8003204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2202      	movs	r2, #2
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3304      	adds	r3, #4
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f000 fff1 	bl	800a37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	d001      	beq.n	800940c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e046      	b.n	800949a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a23      	ldr	r2, [pc, #140]	; (80094a8 <HAL_TIM_Base_Start+0xb4>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d022      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d01d      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a1f      	ldr	r2, [pc, #124]	; (80094ac <HAL_TIM_Base_Start+0xb8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d018      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1e      	ldr	r2, [pc, #120]	; (80094b0 <HAL_TIM_Base_Start+0xbc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d013      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1c      	ldr	r2, [pc, #112]	; (80094b4 <HAL_TIM_Base_Start+0xc0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00e      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1b      	ldr	r2, [pc, #108]	; (80094b8 <HAL_TIM_Base_Start+0xc4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d009      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a19      	ldr	r2, [pc, #100]	; (80094bc <HAL_TIM_Base_Start+0xc8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d004      	beq.n	8009464 <HAL_TIM_Base_Start+0x70>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <HAL_TIM_Base_Start+0xcc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d111      	bne.n	8009488 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b06      	cmp	r3, #6
 8009474:	d010      	beq.n	8009498 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0201 	orr.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009486:	e007      	b.n	8009498 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40010400 	.word	0x40010400
 80094bc:	40014000 	.word	0x40014000
 80094c0:	40001800 	.word	0x40001800

080094c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e041      	b.n	800955a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f839 	bl	8009562 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f000 ff3a 	bl	800a37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
	...

08009578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d109      	bne.n	800959c <HAL_TIM_PWM_Start+0x24>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b01      	cmp	r3, #1
 8009592:	bf14      	ite	ne
 8009594:	2301      	movne	r3, #1
 8009596:	2300      	moveq	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	e022      	b.n	80095e2 <HAL_TIM_PWM_Start+0x6a>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d109      	bne.n	80095b6 <HAL_TIM_PWM_Start+0x3e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	bf14      	ite	ne
 80095ae:	2301      	movne	r3, #1
 80095b0:	2300      	moveq	r3, #0
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	e015      	b.n	80095e2 <HAL_TIM_PWM_Start+0x6a>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d109      	bne.n	80095d0 <HAL_TIM_PWM_Start+0x58>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	bf14      	ite	ne
 80095c8:	2301      	movne	r3, #1
 80095ca:	2300      	moveq	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	e008      	b.n	80095e2 <HAL_TIM_PWM_Start+0x6a>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b01      	cmp	r3, #1
 80095da:	bf14      	ite	ne
 80095dc:	2301      	movne	r3, #1
 80095de:	2300      	moveq	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e07c      	b.n	80096e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <HAL_TIM_PWM_Start+0x82>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095f8:	e013      	b.n	8009622 <HAL_TIM_PWM_Start+0xaa>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d104      	bne.n	800960a <HAL_TIM_PWM_Start+0x92>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009608:	e00b      	b.n	8009622 <HAL_TIM_PWM_Start+0xaa>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b08      	cmp	r3, #8
 800960e:	d104      	bne.n	800961a <HAL_TIM_PWM_Start+0xa2>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009618:	e003      	b.n	8009622 <HAL_TIM_PWM_Start+0xaa>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2201      	movs	r2, #1
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f001 faba 	bl	800aba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a2d      	ldr	r2, [pc, #180]	; (80096ec <HAL_TIM_PWM_Start+0x174>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_TIM_PWM_Start+0xcc>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <HAL_TIM_PWM_Start+0x178>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d101      	bne.n	8009648 <HAL_TIM_PWM_Start+0xd0>
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <HAL_TIM_PWM_Start+0xd2>
 8009648:	2300      	movs	r3, #0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800965c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a22      	ldr	r2, [pc, #136]	; (80096ec <HAL_TIM_PWM_Start+0x174>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d022      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009670:	d01d      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1f      	ldr	r2, [pc, #124]	; (80096f4 <HAL_TIM_PWM_Start+0x17c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d018      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a1d      	ldr	r2, [pc, #116]	; (80096f8 <HAL_TIM_PWM_Start+0x180>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a1c      	ldr	r2, [pc, #112]	; (80096fc <HAL_TIM_PWM_Start+0x184>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00e      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a16      	ldr	r2, [pc, #88]	; (80096f0 <HAL_TIM_PWM_Start+0x178>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d009      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a18      	ldr	r2, [pc, #96]	; (8009700 <HAL_TIM_PWM_Start+0x188>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d004      	beq.n	80096ae <HAL_TIM_PWM_Start+0x136>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a16      	ldr	r2, [pc, #88]	; (8009704 <HAL_TIM_PWM_Start+0x18c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d111      	bne.n	80096d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b06      	cmp	r3, #6
 80096be:	d010      	beq.n	80096e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d0:	e007      	b.n	80096e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0201 	orr.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40010400 	.word	0x40010400
 80096f4:	40000400 	.word	0x40000400
 80096f8:	40000800 	.word	0x40000800
 80096fc:	40000c00 	.word	0x40000c00
 8009700:	40014000 	.word	0x40014000
 8009704:	40001800 	.word	0x40001800

08009708 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f001 fa42 	bl	800aba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a2e      	ldr	r2, [pc, #184]	; (80097e0 <HAL_TIM_PWM_Stop+0xd8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d004      	beq.n	8009734 <HAL_TIM_PWM_Stop+0x2c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a2d      	ldr	r2, [pc, #180]	; (80097e4 <HAL_TIM_PWM_Stop+0xdc>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d101      	bne.n	8009738 <HAL_TIM_PWM_Stop+0x30>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <HAL_TIM_PWM_Stop+0x32>
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d017      	beq.n	800976e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6a1a      	ldr	r2, [r3, #32]
 8009744:	f241 1311 	movw	r3, #4369	; 0x1111
 8009748:	4013      	ands	r3, r2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10f      	bne.n	800976e <HAL_TIM_PWM_Stop+0x66>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6a1a      	ldr	r2, [r3, #32]
 8009754:	f240 4344 	movw	r3, #1092	; 0x444
 8009758:	4013      	ands	r3, r2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d107      	bne.n	800976e <HAL_TIM_PWM_Stop+0x66>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800976c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	f241 1311 	movw	r3, #4369	; 0x1111
 8009778:	4013      	ands	r3, r2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10f      	bne.n	800979e <HAL_TIM_PWM_Stop+0x96>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6a1a      	ldr	r2, [r3, #32]
 8009784:	f240 4344 	movw	r3, #1092	; 0x444
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d107      	bne.n	800979e <HAL_TIM_PWM_Stop+0x96>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0201 	bic.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <HAL_TIM_PWM_Stop+0xa6>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ac:	e013      	b.n	80097d6 <HAL_TIM_PWM_Stop+0xce>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d104      	bne.n	80097be <HAL_TIM_PWM_Stop+0xb6>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097bc:	e00b      	b.n	80097d6 <HAL_TIM_PWM_Stop+0xce>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_PWM_Stop+0xc6>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097cc:	e003      	b.n	80097d6 <HAL_TIM_PWM_Stop+0xce>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	40010000 	.word	0x40010000
 80097e4:	40010400 	.word	0x40010400

080097e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e041      	b.n	800987e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f839 	bl	8009886 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f000 fda8 	bl	800a37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
	...

0800989c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <HAL_TIM_IC_Start_IT+0x1e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	e013      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x46>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d104      	bne.n	80098ca <HAL_TIM_IC_Start_IT+0x2e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	e00b      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x46>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d104      	bne.n	80098da <HAL_TIM_IC_Start_IT+0x3e>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	e003      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x46>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d104      	bne.n	80098f4 <HAL_TIM_IC_Start_IT+0x58>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	e013      	b.n	800991c <HAL_TIM_IC_Start_IT+0x80>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d104      	bne.n	8009904 <HAL_TIM_IC_Start_IT+0x68>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e00b      	b.n	800991c <HAL_TIM_IC_Start_IT+0x80>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b08      	cmp	r3, #8
 8009908:	d104      	bne.n	8009914 <HAL_TIM_IC_Start_IT+0x78>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009910:	b2db      	uxtb	r3, r3
 8009912:	e003      	b.n	800991c <HAL_TIM_IC_Start_IT+0x80>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800991a:	b2db      	uxtb	r3, r3
 800991c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d102      	bne.n	800992a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009924:	7b7b      	ldrb	r3, [r7, #13]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d001      	beq.n	800992e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e0cc      	b.n	8009ac8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <HAL_TIM_IC_Start_IT+0xa2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800993c:	e013      	b.n	8009966 <HAL_TIM_IC_Start_IT+0xca>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d104      	bne.n	800994e <HAL_TIM_IC_Start_IT+0xb2>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800994c:	e00b      	b.n	8009966 <HAL_TIM_IC_Start_IT+0xca>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b08      	cmp	r3, #8
 8009952:	d104      	bne.n	800995e <HAL_TIM_IC_Start_IT+0xc2>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800995c:	e003      	b.n	8009966 <HAL_TIM_IC_Start_IT+0xca>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <HAL_TIM_IC_Start_IT+0xda>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009974:	e013      	b.n	800999e <HAL_TIM_IC_Start_IT+0x102>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d104      	bne.n	8009986 <HAL_TIM_IC_Start_IT+0xea>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009984:	e00b      	b.n	800999e <HAL_TIM_IC_Start_IT+0x102>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d104      	bne.n	8009996 <HAL_TIM_IC_Start_IT+0xfa>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009994:	e003      	b.n	800999e <HAL_TIM_IC_Start_IT+0x102>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b0c      	cmp	r3, #12
 80099a2:	d841      	bhi.n	8009a28 <HAL_TIM_IC_Start_IT+0x18c>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <HAL_TIM_IC_Start_IT+0x110>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099e1 	.word	0x080099e1
 80099b0:	08009a29 	.word	0x08009a29
 80099b4:	08009a29 	.word	0x08009a29
 80099b8:	08009a29 	.word	0x08009a29
 80099bc:	080099f3 	.word	0x080099f3
 80099c0:	08009a29 	.word	0x08009a29
 80099c4:	08009a29 	.word	0x08009a29
 80099c8:	08009a29 	.word	0x08009a29
 80099cc:	08009a05 	.word	0x08009a05
 80099d0:	08009a29 	.word	0x08009a29
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	08009a29 	.word	0x08009a29
 80099dc:	08009a17 	.word	0x08009a17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0202 	orr.w	r2, r2, #2
 80099ee:	60da      	str	r2, [r3, #12]
      break;
 80099f0:	e01d      	b.n	8009a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0204 	orr.w	r2, r2, #4
 8009a00:	60da      	str	r2, [r3, #12]
      break;
 8009a02:	e014      	b.n	8009a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0208 	orr.w	r2, r2, #8
 8009a12:	60da      	str	r2, [r3, #12]
      break;
 8009a14:	e00b      	b.n	8009a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0210 	orr.w	r2, r2, #16
 8009a24:	60da      	str	r2, [r3, #12]
      break;
 8009a26:	e002      	b.n	8009a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d148      	bne.n	8009ac6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 f8b1 	bl	800aba4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a22      	ldr	r2, [pc, #136]	; (8009ad0 <HAL_TIM_IC_Start_IT+0x234>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d022      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a54:	d01d      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ad4 <HAL_TIM_IC_Start_IT+0x238>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d018      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1c      	ldr	r2, [pc, #112]	; (8009ad8 <HAL_TIM_IC_Start_IT+0x23c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d013      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1b      	ldr	r2, [pc, #108]	; (8009adc <HAL_TIM_IC_Start_IT+0x240>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00e      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a19      	ldr	r2, [pc, #100]	; (8009ae0 <HAL_TIM_IC_Start_IT+0x244>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d009      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a18      	ldr	r2, [pc, #96]	; (8009ae4 <HAL_TIM_IC_Start_IT+0x248>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d004      	beq.n	8009a92 <HAL_TIM_IC_Start_IT+0x1f6>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a16      	ldr	r2, [pc, #88]	; (8009ae8 <HAL_TIM_IC_Start_IT+0x24c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d111      	bne.n	8009ab6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f003 0307 	and.w	r3, r3, #7
 8009a9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	d010      	beq.n	8009ac6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0201 	orr.w	r2, r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab4:	e007      	b.n	8009ac6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0201 	orr.w	r2, r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40000400 	.word	0x40000400
 8009ad8:	40000800 	.word	0x40000800
 8009adc:	40000c00 	.word	0x40000c00
 8009ae0:	40010400 	.word	0x40010400
 8009ae4:	40014000 	.word	0x40014000
 8009ae8:	40001800 	.word	0x40001800

08009aec <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b0c      	cmp	r3, #12
 8009afe:	d841      	bhi.n	8009b84 <HAL_TIM_IC_Stop_IT+0x98>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_TIM_IC_Stop_IT+0x1c>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b3d 	.word	0x08009b3d
 8009b0c:	08009b85 	.word	0x08009b85
 8009b10:	08009b85 	.word	0x08009b85
 8009b14:	08009b85 	.word	0x08009b85
 8009b18:	08009b4f 	.word	0x08009b4f
 8009b1c:	08009b85 	.word	0x08009b85
 8009b20:	08009b85 	.word	0x08009b85
 8009b24:	08009b85 	.word	0x08009b85
 8009b28:	08009b61 	.word	0x08009b61
 8009b2c:	08009b85 	.word	0x08009b85
 8009b30:	08009b85 	.word	0x08009b85
 8009b34:	08009b85 	.word	0x08009b85
 8009b38:	08009b73 	.word	0x08009b73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0202 	bic.w	r2, r2, #2
 8009b4a:	60da      	str	r2, [r3, #12]
      break;
 8009b4c:	e01d      	b.n	8009b8a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0204 	bic.w	r2, r2, #4
 8009b5c:	60da      	str	r2, [r3, #12]
      break;
 8009b5e:	e014      	b.n	8009b8a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f022 0208 	bic.w	r2, r2, #8
 8009b6e:	60da      	str	r2, [r3, #12]
      break;
 8009b70:	e00b      	b.n	8009b8a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0210 	bic.w	r2, r2, #16
 8009b80:	60da      	str	r2, [r3, #12]
      break;
 8009b82:	e002      	b.n	8009b8a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	73fb      	strb	r3, [r7, #15]
      break;
 8009b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d156      	bne.n	8009c3e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2200      	movs	r2, #0
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 f803 	bl	800aba4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6a1a      	ldr	r2, [r3, #32]
 8009ba4:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ba8:	4013      	ands	r3, r2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10f      	bne.n	8009bce <HAL_TIM_IC_Stop_IT+0xe2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6a1a      	ldr	r2, [r3, #32]
 8009bb4:	f240 4344 	movw	r3, #1092	; 0x444
 8009bb8:	4013      	ands	r3, r2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d107      	bne.n	8009bce <HAL_TIM_IC_Stop_IT+0xe2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0201 	bic.w	r2, r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <HAL_TIM_IC_Stop_IT+0xf2>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bdc:	e013      	b.n	8009c06 <HAL_TIM_IC_Stop_IT+0x11a>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d104      	bne.n	8009bee <HAL_TIM_IC_Stop_IT+0x102>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bec:	e00b      	b.n	8009c06 <HAL_TIM_IC_Stop_IT+0x11a>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d104      	bne.n	8009bfe <HAL_TIM_IC_Stop_IT+0x112>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bfc:	e003      	b.n	8009c06 <HAL_TIM_IC_Stop_IT+0x11a>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <HAL_TIM_IC_Stop_IT+0x12a>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c14:	e013      	b.n	8009c3e <HAL_TIM_IC_Stop_IT+0x152>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d104      	bne.n	8009c26 <HAL_TIM_IC_Stop_IT+0x13a>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c24:	e00b      	b.n	8009c3e <HAL_TIM_IC_Stop_IT+0x152>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d104      	bne.n	8009c36 <HAL_TIM_IC_Stop_IT+0x14a>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c34:	e003      	b.n	8009c3e <HAL_TIM_IC_Stop_IT+0x152>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d122      	bne.n	8009ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d11b      	bne.n	8009ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f06f 0202 	mvn.w	r2, #2
 8009c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f9 f93a 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8009c90:	e005      	b.n	8009c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb54 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fb5b 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f003 0304 	and.w	r3, r3, #4
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d122      	bne.n	8009cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d11b      	bne.n	8009cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f06f 0204 	mvn.w	r2, #4
 8009cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f9 f910 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8009ce4:	e005      	b.n	8009cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fb2a 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fb31 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0308 	and.w	r3, r3, #8
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d122      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d11b      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0208 	mvn.w	r2, #8
 8009d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2204      	movs	r2, #4
 8009d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7f9 f8e6 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8009d38:	e005      	b.n	8009d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fb00 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fb07 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b10      	cmp	r3, #16
 8009d58:	d122      	bne.n	8009da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b10      	cmp	r3, #16
 8009d66:	d11b      	bne.n	8009da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0210 	mvn.w	r2, #16
 8009d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2208      	movs	r2, #8
 8009d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7f9 f8bc 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8009d8c:	e005      	b.n	8009d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fad6 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fadd 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d10e      	bne.n	8009dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d107      	bne.n	8009dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f06f 0201 	mvn.w	r2, #1
 8009dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fab0 	bl	800a32c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd6:	2b80      	cmp	r3, #128	; 0x80
 8009dd8:	d10e      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de4:	2b80      	cmp	r3, #128	; 0x80
 8009de6:	d107      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 ffd4 	bl	800ada0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	d10e      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e10:	2b40      	cmp	r3, #64	; 0x40
 8009e12:	d107      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 faa2 	bl	800a368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f003 0320 	and.w	r3, r3, #32
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d10e      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d107      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f06f 0220 	mvn.w	r2, #32
 8009e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 ff9e 	bl	800ad8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009e72:	2302      	movs	r3, #2
 8009e74:	e088      	b.n	8009f88 <HAL_TIM_IC_ConfigChannel+0x130>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d11b      	bne.n	8009ebc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6819      	ldr	r1, [r3, #0]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f000 fcc2 	bl	800a81c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 020c 	bic.w	r2, r2, #12
 8009ea6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6999      	ldr	r1, [r3, #24]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	619a      	str	r2, [r3, #24]
 8009eba:	e060      	b.n	8009f7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d11c      	bne.n	8009efc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f000 fd46 	bl	800a962 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ee4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6999      	ldr	r1, [r3, #24]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	021a      	lsls	r2, r3, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	619a      	str	r2, [r3, #24]
 8009efa:	e040      	b.n	8009f7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d11b      	bne.n	8009f3a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	6819      	ldr	r1, [r3, #0]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f000 fd93 	bl	800aa3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69da      	ldr	r2, [r3, #28]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 020c 	bic.w	r2, r2, #12
 8009f24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69d9      	ldr	r1, [r3, #28]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	61da      	str	r2, [r3, #28]
 8009f38:	e021      	b.n	8009f7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b0c      	cmp	r3, #12
 8009f3e:	d11c      	bne.n	8009f7a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	6819      	ldr	r1, [r3, #0]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f000 fdb0 	bl	800aab4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	69da      	ldr	r2, [r3, #28]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69d9      	ldr	r1, [r3, #28]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	021a      	lsls	r2, r3, #8
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	430a      	orrs	r2, r1
 8009f76:	61da      	str	r2, [r3, #28]
 8009f78:	e001      	b.n	8009f7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e0ae      	b.n	800a10c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b0c      	cmp	r3, #12
 8009fba:	f200 809f 	bhi.w	800a0fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009ff9 	.word	0x08009ff9
 8009fc8:	0800a0fd 	.word	0x0800a0fd
 8009fcc:	0800a0fd 	.word	0x0800a0fd
 8009fd0:	0800a0fd 	.word	0x0800a0fd
 8009fd4:	0800a039 	.word	0x0800a039
 8009fd8:	0800a0fd 	.word	0x0800a0fd
 8009fdc:	0800a0fd 	.word	0x0800a0fd
 8009fe0:	0800a0fd 	.word	0x0800a0fd
 8009fe4:	0800a07b 	.word	0x0800a07b
 8009fe8:	0800a0fd 	.word	0x0800a0fd
 8009fec:	0800a0fd 	.word	0x0800a0fd
 8009ff0:	0800a0fd 	.word	0x0800a0fd
 8009ff4:	0800a0bb 	.word	0x0800a0bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68b9      	ldr	r1, [r7, #8]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fa5c 	bl	800a4bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f042 0208 	orr.w	r2, r2, #8
 800a012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699a      	ldr	r2, [r3, #24]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0204 	bic.w	r2, r2, #4
 800a022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6999      	ldr	r1, [r3, #24]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	619a      	str	r2, [r3, #24]
      break;
 800a036:	e064      	b.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 faac 	bl	800a59c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699a      	ldr	r2, [r3, #24]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6999      	ldr	r1, [r3, #24]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	021a      	lsls	r2, r3, #8
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	619a      	str	r2, [r3, #24]
      break;
 800a078:	e043      	b.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68b9      	ldr	r1, [r7, #8]
 800a080:	4618      	mov	r0, r3
 800a082:	f000 fb01 	bl	800a688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69da      	ldr	r2, [r3, #28]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0208 	orr.w	r2, r2, #8
 800a094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 0204 	bic.w	r2, r2, #4
 800a0a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	69d9      	ldr	r1, [r3, #28]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	691a      	ldr	r2, [r3, #16]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	61da      	str	r2, [r3, #28]
      break;
 800a0b8:	e023      	b.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fb55 	bl	800a770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69da      	ldr	r2, [r3, #28]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69d9      	ldr	r1, [r3, #28]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	021a      	lsls	r2, r3, #8
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	61da      	str	r2, [r3, #28]
      break;
 800a0fa:	e002      	b.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d101      	bne.n	800a130 <HAL_TIM_ConfigClockSource+0x1c>
 800a12c:	2302      	movs	r3, #2
 800a12e:	e0b4      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x186>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a14e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a168:	d03e      	beq.n	800a1e8 <HAL_TIM_ConfigClockSource+0xd4>
 800a16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16e:	f200 8087 	bhi.w	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a176:	f000 8086 	beq.w	800a286 <HAL_TIM_ConfigClockSource+0x172>
 800a17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17e:	d87f      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a180:	2b70      	cmp	r3, #112	; 0x70
 800a182:	d01a      	beq.n	800a1ba <HAL_TIM_ConfigClockSource+0xa6>
 800a184:	2b70      	cmp	r3, #112	; 0x70
 800a186:	d87b      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a188:	2b60      	cmp	r3, #96	; 0x60
 800a18a:	d050      	beq.n	800a22e <HAL_TIM_ConfigClockSource+0x11a>
 800a18c:	2b60      	cmp	r3, #96	; 0x60
 800a18e:	d877      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a190:	2b50      	cmp	r3, #80	; 0x50
 800a192:	d03c      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0xfa>
 800a194:	2b50      	cmp	r3, #80	; 0x50
 800a196:	d873      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a198:	2b40      	cmp	r3, #64	; 0x40
 800a19a:	d058      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x13a>
 800a19c:	2b40      	cmp	r3, #64	; 0x40
 800a19e:	d86f      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a0:	2b30      	cmp	r3, #48	; 0x30
 800a1a2:	d064      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0x15a>
 800a1a4:	2b30      	cmp	r3, #48	; 0x30
 800a1a6:	d86b      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d060      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0x15a>
 800a1ac:	2b20      	cmp	r3, #32
 800a1ae:	d867      	bhi.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d05c      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0x15a>
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	d05a      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0x15a>
 800a1b8:	e062      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	6899      	ldr	r1, [r3, #8]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f000 fccb 	bl	800ab64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	609a      	str	r2, [r3, #8]
      break;
 800a1e6:	e04f      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	6899      	ldr	r1, [r3, #8]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f000 fcb4 	bl	800ab64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a20a:	609a      	str	r2, [r3, #8]
      break;
 800a20c:	e03c      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6859      	ldr	r1, [r3, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f000 fb72 	bl	800a904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2150      	movs	r1, #80	; 0x50
 800a226:	4618      	mov	r0, r3
 800a228:	f000 fc81 	bl	800ab2e <TIM_ITRx_SetConfig>
      break;
 800a22c:	e02c      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6859      	ldr	r1, [r3, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	461a      	mov	r2, r3
 800a23c:	f000 fbce 	bl	800a9dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2160      	movs	r1, #96	; 0x60
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fc71 	bl	800ab2e <TIM_ITRx_SetConfig>
      break;
 800a24c:	e01c      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	6859      	ldr	r1, [r3, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	461a      	mov	r2, r3
 800a25c:	f000 fb52 	bl	800a904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2140      	movs	r1, #64	; 0x40
 800a266:	4618      	mov	r0, r3
 800a268:	f000 fc61 	bl	800ab2e <TIM_ITRx_SetConfig>
      break;
 800a26c:	e00c      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4619      	mov	r1, r3
 800a278:	4610      	mov	r0, r2
 800a27a:	f000 fc58 	bl	800ab2e <TIM_ITRx_SetConfig>
      break;
 800a27e:	e003      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	73fb      	strb	r3, [r7, #15]
      break;
 800a284:	e000      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b0c      	cmp	r3, #12
 800a2b6:	d831      	bhi.n	800a31c <HAL_TIM_ReadCapturedValue+0x78>
 800a2b8:	a201      	add	r2, pc, #4	; (adr r2, 800a2c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2be:	bf00      	nop
 800a2c0:	0800a2f5 	.word	0x0800a2f5
 800a2c4:	0800a31d 	.word	0x0800a31d
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a31d 	.word	0x0800a31d
 800a2d0:	0800a2ff 	.word	0x0800a2ff
 800a2d4:	0800a31d 	.word	0x0800a31d
 800a2d8:	0800a31d 	.word	0x0800a31d
 800a2dc:	0800a31d 	.word	0x0800a31d
 800a2e0:	0800a309 	.word	0x0800a309
 800a2e4:	0800a31d 	.word	0x0800a31d
 800a2e8:	0800a31d 	.word	0x0800a31d
 800a2ec:	0800a31d 	.word	0x0800a31d
 800a2f0:	0800a313 	.word	0x0800a313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fa:	60fb      	str	r3, [r7, #12]

      break;
 800a2fc:	e00f      	b.n	800a31e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	60fb      	str	r3, [r7, #12]

      break;
 800a306:	e00a      	b.n	800a31e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30e:	60fb      	str	r3, [r7, #12]

      break;
 800a310:	e005      	b.n	800a31e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	60fb      	str	r3, [r7, #12]

      break;
 800a31a:	e000      	b.n	800a31e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a31c:	bf00      	nop
  }

  return tmpreg;
 800a31e:	68fb      	ldr	r3, [r7, #12]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a40      	ldr	r2, [pc, #256]	; (800a490 <TIM_Base_SetConfig+0x114>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d013      	beq.n	800a3bc <TIM_Base_SetConfig+0x40>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39a:	d00f      	beq.n	800a3bc <TIM_Base_SetConfig+0x40>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a3d      	ldr	r2, [pc, #244]	; (800a494 <TIM_Base_SetConfig+0x118>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00b      	beq.n	800a3bc <TIM_Base_SetConfig+0x40>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a3c      	ldr	r2, [pc, #240]	; (800a498 <TIM_Base_SetConfig+0x11c>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d007      	beq.n	800a3bc <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a3b      	ldr	r2, [pc, #236]	; (800a49c <TIM_Base_SetConfig+0x120>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d003      	beq.n	800a3bc <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a3a      	ldr	r2, [pc, #232]	; (800a4a0 <TIM_Base_SetConfig+0x124>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d108      	bne.n	800a3ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a2f      	ldr	r2, [pc, #188]	; (800a490 <TIM_Base_SetConfig+0x114>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d02b      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3dc:	d027      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a2c      	ldr	r2, [pc, #176]	; (800a494 <TIM_Base_SetConfig+0x118>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d023      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a2b      	ldr	r2, [pc, #172]	; (800a498 <TIM_Base_SetConfig+0x11c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d01f      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a2a      	ldr	r2, [pc, #168]	; (800a49c <TIM_Base_SetConfig+0x120>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d01b      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a29      	ldr	r2, [pc, #164]	; (800a4a0 <TIM_Base_SetConfig+0x124>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d017      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a28      	ldr	r2, [pc, #160]	; (800a4a4 <TIM_Base_SetConfig+0x128>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d013      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a27      	ldr	r2, [pc, #156]	; (800a4a8 <TIM_Base_SetConfig+0x12c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d00f      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a26      	ldr	r2, [pc, #152]	; (800a4ac <TIM_Base_SetConfig+0x130>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00b      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a25      	ldr	r2, [pc, #148]	; (800a4b0 <TIM_Base_SetConfig+0x134>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d007      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a24      	ldr	r2, [pc, #144]	; (800a4b4 <TIM_Base_SetConfig+0x138>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d003      	beq.n	800a42e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a23      	ldr	r2, [pc, #140]	; (800a4b8 <TIM_Base_SetConfig+0x13c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d108      	bne.n	800a440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a0a      	ldr	r2, [pc, #40]	; (800a490 <TIM_Base_SetConfig+0x114>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_Base_SetConfig+0xf8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a0c      	ldr	r2, [pc, #48]	; (800a4a0 <TIM_Base_SetConfig+0x124>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d103      	bne.n	800a47c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	691a      	ldr	r2, [r3, #16]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	615a      	str	r2, [r3, #20]
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40010000 	.word	0x40010000
 800a494:	40000400 	.word	0x40000400
 800a498:	40000800 	.word	0x40000800
 800a49c:	40000c00 	.word	0x40000c00
 800a4a0:	40010400 	.word	0x40010400
 800a4a4:	40014000 	.word	0x40014000
 800a4a8:	40014400 	.word	0x40014400
 800a4ac:	40014800 	.word	0x40014800
 800a4b0:	40001800 	.word	0x40001800
 800a4b4:	40001c00 	.word	0x40001c00
 800a4b8:	40002000 	.word	0x40002000

0800a4bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f023 0201 	bic.w	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f023 0302 	bic.w	r3, r3, #2
 800a504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a20      	ldr	r2, [pc, #128]	; (800a594 <TIM_OC1_SetConfig+0xd8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d003      	beq.n	800a520 <TIM_OC1_SetConfig+0x64>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <TIM_OC1_SetConfig+0xdc>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10c      	bne.n	800a53a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f023 0308 	bic.w	r3, r3, #8
 800a526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f023 0304 	bic.w	r3, r3, #4
 800a538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a15      	ldr	r2, [pc, #84]	; (800a594 <TIM_OC1_SetConfig+0xd8>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d003      	beq.n	800a54a <TIM_OC1_SetConfig+0x8e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a14      	ldr	r2, [pc, #80]	; (800a598 <TIM_OC1_SetConfig+0xdc>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d111      	bne.n	800a56e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	4313      	orrs	r3, r2
 800a562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	621a      	str	r2, [r3, #32]
}
 800a588:	bf00      	nop
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	40010000 	.word	0x40010000
 800a598:	40010400 	.word	0x40010400

0800a59c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f023 0210 	bic.w	r2, r3, #16
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f023 0320 	bic.w	r3, r3, #32
 800a5e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a22      	ldr	r2, [pc, #136]	; (800a680 <TIM_OC2_SetConfig+0xe4>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_OC2_SetConfig+0x68>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a21      	ldr	r2, [pc, #132]	; (800a684 <TIM_OC2_SetConfig+0xe8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d10d      	bne.n	800a620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a60a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a61e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a17      	ldr	r2, [pc, #92]	; (800a680 <TIM_OC2_SetConfig+0xe4>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d003      	beq.n	800a630 <TIM_OC2_SetConfig+0x94>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a16      	ldr	r2, [pc, #88]	; (800a684 <TIM_OC2_SetConfig+0xe8>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d113      	bne.n	800a658 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a63e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4313      	orrs	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	621a      	str	r2, [r3, #32]
}
 800a672:	bf00      	nop
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	40010000 	.word	0x40010000
 800a684:	40010400 	.word	0x40010400

0800a688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 0303 	bic.w	r3, r3, #3
 800a6be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	021b      	lsls	r3, r3, #8
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a21      	ldr	r2, [pc, #132]	; (800a768 <TIM_OC3_SetConfig+0xe0>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d003      	beq.n	800a6ee <TIM_OC3_SetConfig+0x66>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a20      	ldr	r2, [pc, #128]	; (800a76c <TIM_OC3_SetConfig+0xe4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d10d      	bne.n	800a70a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	021b      	lsls	r3, r3, #8
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a16      	ldr	r2, [pc, #88]	; (800a768 <TIM_OC3_SetConfig+0xe0>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d003      	beq.n	800a71a <TIM_OC3_SetConfig+0x92>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a15      	ldr	r2, [pc, #84]	; (800a76c <TIM_OC3_SetConfig+0xe4>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d113      	bne.n	800a742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4313      	orrs	r3, r2
 800a734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	4313      	orrs	r3, r2
 800a740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	621a      	str	r2, [r3, #32]
}
 800a75c:	bf00      	nop
 800a75e:	371c      	adds	r7, #28
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	40010000 	.word	0x40010000
 800a76c:	40010400 	.word	0x40010400

0800a770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a770:	b480      	push	{r7}
 800a772:	b087      	sub	sp, #28
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	021b      	lsls	r3, r3, #8
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	031b      	lsls	r3, r3, #12
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a12      	ldr	r2, [pc, #72]	; (800a814 <TIM_OC4_SetConfig+0xa4>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d003      	beq.n	800a7d8 <TIM_OC4_SetConfig+0x68>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a11      	ldr	r2, [pc, #68]	; (800a818 <TIM_OC4_SetConfig+0xa8>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d109      	bne.n	800a7ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	019b      	lsls	r3, r3, #6
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	621a      	str	r2, [r3, #32]
}
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	40010000 	.word	0x40010000
 800a818:	40010400 	.word	0x40010400

0800a81c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f023 0201 	bic.w	r2, r3, #1
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4a28      	ldr	r2, [pc, #160]	; (800a8e8 <TIM_TI1_SetConfig+0xcc>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d01b      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a850:	d017      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	4a25      	ldr	r2, [pc, #148]	; (800a8ec <TIM_TI1_SetConfig+0xd0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d013      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4a24      	ldr	r2, [pc, #144]	; (800a8f0 <TIM_TI1_SetConfig+0xd4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00f      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4a23      	ldr	r2, [pc, #140]	; (800a8f4 <TIM_TI1_SetConfig+0xd8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d00b      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	4a22      	ldr	r2, [pc, #136]	; (800a8f8 <TIM_TI1_SetConfig+0xdc>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d007      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4a21      	ldr	r2, [pc, #132]	; (800a8fc <TIM_TI1_SetConfig+0xe0>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d003      	beq.n	800a882 <TIM_TI1_SetConfig+0x66>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4a20      	ldr	r2, [pc, #128]	; (800a900 <TIM_TI1_SetConfig+0xe4>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d101      	bne.n	800a886 <TIM_TI1_SetConfig+0x6a>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <TIM_TI1_SetConfig+0x6c>
 800a886:	2300      	movs	r3, #0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d008      	beq.n	800a89e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e003      	b.n	800a8a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f043 0301 	orr.w	r3, r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f023 030a 	bic.w	r3, r3, #10
 800a8c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f003 030a 	and.w	r3, r3, #10
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	621a      	str	r2, [r3, #32]
}
 800a8da:	bf00      	nop
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40010000 	.word	0x40010000
 800a8ec:	40000400 	.word	0x40000400
 800a8f0:	40000800 	.word	0x40000800
 800a8f4:	40000c00 	.word	0x40000c00
 800a8f8:	40010400 	.word	0x40010400
 800a8fc:	40014000 	.word	0x40014000
 800a900:	40001800 	.word	0x40001800

0800a904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	f023 0201 	bic.w	r2, r3, #1
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	4313      	orrs	r3, r2
 800a938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f023 030a 	bic.w	r3, r3, #10
 800a940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	4313      	orrs	r3, r2
 800a948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	621a      	str	r2, [r3, #32]
}
 800a956:	bf00      	nop
 800a958:	371c      	adds	r7, #28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a962:	b480      	push	{r7}
 800a964:	b087      	sub	sp, #28
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	f023 0210 	bic.w	r2, r3, #16
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a98e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	031b      	lsls	r3, r3, #12
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	011b      	lsls	r3, r3, #4
 800a9ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	621a      	str	r2, [r3, #32]
}
 800a9d0:	bf00      	nop
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	f023 0210 	bic.w	r2, r3, #16
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	031b      	lsls	r3, r3, #12
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	621a      	str	r2, [r3, #32]
}
 800aa30:	bf00      	nop
 800aa32:	371c      	adds	r7, #28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f023 0303 	bic.w	r3, r3, #3
 800aa68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aa8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	021b      	lsls	r3, r3, #8
 800aa92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	621a      	str	r2, [r3, #32]
}
 800aaa8:	bf00      	nop
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aaf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	031b      	lsls	r3, r3, #12
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ab06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	031b      	lsls	r3, r3, #12
 800ab0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	621a      	str	r2, [r3, #32]
}
 800ab22:	bf00      	nop
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b085      	sub	sp, #20
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	f043 0307 	orr.w	r3, r3, #7
 800ab50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	609a      	str	r2, [r3, #8]
}
 800ab58:	bf00      	nop
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	021a      	lsls	r2, r3, #8
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	431a      	orrs	r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	609a      	str	r2, [r3, #8]
}
 800ab98:	bf00      	nop
 800ab9a:	371c      	adds	r7, #28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f003 031f 	and.w	r3, r3, #31
 800abb6:	2201      	movs	r2, #1
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6a1a      	ldr	r2, [r3, #32]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	43db      	mvns	r3, r3
 800abc6:	401a      	ands	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a1a      	ldr	r2, [r3, #32]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f003 031f 	and.w	r3, r3, #31
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	fa01 f303 	lsl.w	r3, r1, r3
 800abdc:	431a      	orrs	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	621a      	str	r2, [r3, #32]
}
 800abe2:	bf00      	nop
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
	...

0800abf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d101      	bne.n	800ac08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac04:	2302      	movs	r3, #2
 800ac06:	e05a      	b.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a21      	ldr	r2, [pc, #132]	; (800accc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d022      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac54:	d01d      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a1d      	ldr	r2, [pc, #116]	; (800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d018      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a1b      	ldr	r2, [pc, #108]	; (800acd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d013      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a1a      	ldr	r2, [pc, #104]	; (800acd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00e      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a18      	ldr	r2, [pc, #96]	; (800acdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d009      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a17      	ldr	r2, [pc, #92]	; (800ace0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d004      	beq.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a15      	ldr	r2, [pc, #84]	; (800ace4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d10c      	bne.n	800acac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	40010000 	.word	0x40010000
 800acd0:	40000400 	.word	0x40000400
 800acd4:	40000800 	.word	0x40000800
 800acd8:	40000c00 	.word	0x40000c00
 800acdc:	40010400 	.word	0x40010400
 800ace0:	40014000 	.word	0x40014000
 800ace4:	40001800 	.word	0x40001800

0800ace8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e03d      	b.n	800ad80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	695b      	ldr	r3, [r3, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800adb4:	b084      	sub	sp, #16
 800adb6:	b480      	push	{r7}
 800adb8:	b085      	sub	sp, #20
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	f107 001c 	add.w	r0, r7, #28
 800adc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800adca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800adcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800adce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800add2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800add6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800adda:	431a      	orrs	r2, r3
             Init.ClockDiv
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800adde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800adee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	431a      	orrs	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	b004      	add	sp, #16
 800ae08:	4770      	bx	lr

0800ae0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2203      	movs	r2, #3
 800ae52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0303 	and.w	r3, r3, #3
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b085      	sub	sp, #20
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aea2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aea8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aeb8:	f023 030f 	bic.w	r3, r3, #15
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	b2db      	uxtb	r3, r3
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3314      	adds	r3, #20
 800aefa:	461a      	mov	r2, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	4413      	add	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
}  
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af38:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800af3e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800af44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	431a      	orrs	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0

}
 800af5e:	4618      	mov	r0, r3
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b088      	sub	sp, #32
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af78:	2310      	movs	r3, #16
 800af7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af7c:	2340      	movs	r3, #64	; 0x40
 800af7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af8a:	f107 0308 	add.w	r3, r7, #8
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff ff74 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800af96:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9a:	2110      	movs	r1, #16
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fa19 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800afa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afa4:	69fb      	ldr	r3, [r7, #28]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3720      	adds	r7, #32
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b088      	sub	sp, #32
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800afbc:	2311      	movs	r3, #17
 800afbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afc0:	2340      	movs	r3, #64	; 0x40
 800afc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afc4:	2300      	movs	r3, #0
 800afc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afce:	f107 0308 	add.w	r3, r7, #8
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ff52 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800afda:	f241 3288 	movw	r2, #5000	; 0x1388
 800afde:	2111      	movs	r1, #17
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f9f7 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800afe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afe8:	69fb      	ldr	r3, [r7, #28]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b088      	sub	sp, #32
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b000:	2312      	movs	r3, #18
 800b002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b004:	2340      	movs	r3, #64	; 0x40
 800b006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b008:	2300      	movs	r3, #0
 800b00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b00c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b010:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b012:	f107 0308 	add.w	r3, r7, #8
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff ff30 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b01e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b022:	2112      	movs	r1, #18
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9d5 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b02c:	69fb      	ldr	r3, [r7, #28]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b088      	sub	sp, #32
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b044:	2318      	movs	r3, #24
 800b046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b048:	2340      	movs	r3, #64	; 0x40
 800b04a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b054:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b056:	f107 0308 	add.w	r3, r7, #8
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff ff0e 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b062:	f241 3288 	movw	r2, #5000	; 0x1388
 800b066:	2118      	movs	r1, #24
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f9b3 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b06e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b070:	69fb      	ldr	r3, [r7, #28]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3720      	adds	r7, #32
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b088      	sub	sp, #32
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b088:	2319      	movs	r3, #25
 800b08a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b090:	2300      	movs	r3, #0
 800b092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b098:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b09a:	f107 0308 	add.w	r3, r7, #8
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7ff feec 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0aa:	2119      	movs	r1, #25
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f991 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b0b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3720      	adds	r7, #32
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b0cc:	230c      	movs	r3, #12
 800b0ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0d0:	2340      	movs	r3, #64	; 0x40
 800b0d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0de:	f107 0308 	add.w	r3, r7, #8
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7ff feca 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b0ea:	4a05      	ldr	r2, [pc, #20]	; (800b100 <SDMMC_CmdStopTransfer+0x40>)
 800b0ec:	210c      	movs	r1, #12
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f970 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3720      	adds	r7, #32
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	05f5e100 	.word	0x05f5e100

0800b104 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08a      	sub	sp, #40	; 0x28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b114:	2307      	movs	r3, #7
 800b116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b118:	2340      	movs	r3, #64	; 0x40
 800b11a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b124:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b126:	f107 0310 	add.w	r3, r7, #16
 800b12a:	4619      	mov	r1, r3
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f7ff fea6 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b132:	f241 3288 	movw	r2, #5000	; 0x1388
 800b136:	2107      	movs	r1, #7
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 f94b 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b13e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b142:	4618      	mov	r0, r3
 800b144:	3728      	adds	r7, #40	; 0x28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b088      	sub	sp, #32
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b15a:	2300      	movs	r3, #0
 800b15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b15e:	2300      	movs	r3, #0
 800b160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7ff fe85 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fb65 	bl	800b844 <SDMMC_GetCmdError>
 800b17a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b17c:	69fb      	ldr	r3, [r7, #28]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b088      	sub	sp, #32
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b18e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b194:	2308      	movs	r3, #8
 800b196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b198:	2340      	movs	r3, #64	; 0x40
 800b19a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b19c:	2300      	movs	r3, #0
 800b19e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1a6:	f107 0308 	add.w	r3, r7, #8
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff fe66 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 faf8 	bl	800b7a8 <SDMMC_GetCmdResp7>
 800b1b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ba:	69fb      	ldr	r3, [r7, #28]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3720      	adds	r7, #32
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b088      	sub	sp, #32
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b1d2:	2337      	movs	r3, #55	; 0x37
 800b1d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1d6:	2340      	movs	r3, #64	; 0x40
 800b1d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1e4:	f107 0308 	add.w	r3, r7, #8
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fe47 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	2137      	movs	r1, #55	; 0x37
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f8ec 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b1fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3720      	adds	r7, #32
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b21e:	2329      	movs	r3, #41	; 0x29
 800b220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b222:	2340      	movs	r3, #64	; 0x40
 800b224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fe21 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f9ff 	bl	800b640 <SDMMC_GetCmdResp3>
 800b242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b244:	69fb      	ldr	r3, [r7, #28]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3720      	adds	r7, #32
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b088      	sub	sp, #32
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b25c:	2306      	movs	r3, #6
 800b25e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b26c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff fe02 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27e:	2106      	movs	r1, #6
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f8a7 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b288:	69fb      	ldr	r3, [r7, #28]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b088      	sub	sp, #32
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b29e:	2333      	movs	r3, #51	; 0x33
 800b2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2b0:	f107 0308 	add.w	r3, r7, #8
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff fde1 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c0:	2133      	movs	r1, #51	; 0x33
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f886 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ca:	69fb      	ldr	r3, [r7, #28]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b2e4:	23c0      	movs	r3, #192	; 0xc0
 800b2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2f2:	f107 0308 	add.w	r3, r7, #8
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff fdc0 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f956 	bl	800b5b0 <SDMMC_GetCmdResp2>
 800b304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b306:	69fb      	ldr	r3, [r7, #28]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b31e:	2309      	movs	r3, #9
 800b320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b322:	23c0      	movs	r3, #192	; 0xc0
 800b324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff fda1 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f937 	bl	800b5b0 <SDMMC_GetCmdResp2>
 800b342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b344:	69fb      	ldr	r3, [r7, #28]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b088      	sub	sp, #32
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b35c:	2303      	movs	r3, #3
 800b35e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b360:	2340      	movs	r3, #64	; 0x40
 800b362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b36e:	f107 0308 	add.w	r3, r7, #8
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fd82 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	2103      	movs	r1, #3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f99c 	bl	800b6bc <SDMMC_GetCmdResp6>
 800b384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b386:	69fb      	ldr	r3, [r7, #28]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b39e:	230d      	movs	r3, #13
 800b3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3b0:	f107 0308 	add.w	r3, r7, #8
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff fd61 	bl	800ae7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3c0:	210d      	movs	r1, #13
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f806 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ca:	69fb      	ldr	r3, [r7, #28]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3e2:	4b70      	ldr	r3, [pc, #448]	; (800b5a4 <SDMMC_GetCmdResp1+0x1d0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a70      	ldr	r2, [pc, #448]	; (800b5a8 <SDMMC_GetCmdResp1+0x1d4>)
 800b3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ec:	0a5a      	lsrs	r2, r3, #9
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	fb02 f303 	mul.w	r3, r2, r3
 800b3f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	1e5a      	subs	r2, r3, #1
 800b3fa:	61fa      	str	r2, [r7, #28]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d102      	bne.n	800b406 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b404:	e0c9      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0ef      	beq.n	800b3f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1ea      	bne.n	800b3f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2204      	movs	r2, #4
 800b430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b432:	2304      	movs	r3, #4
 800b434:	e0b1      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2201      	movs	r2, #1
 800b446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b448:	2301      	movs	r3, #1
 800b44a:	e0a6      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	22c5      	movs	r2, #197	; 0xc5
 800b450:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff fd3d 	bl	800aed2 <SDIO_GetCommandResponse>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	4293      	cmp	r3, r2
 800b460:	d001      	beq.n	800b466 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b462:	2301      	movs	r3, #1
 800b464:	e099      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b466:	2100      	movs	r1, #0
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fd3f 	bl	800aeec <SDIO_GetResponse>
 800b46e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	4b4e      	ldr	r3, [pc, #312]	; (800b5ac <SDMMC_GetCmdResp1+0x1d8>)
 800b474:	4013      	ands	r3, r2
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e08d      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2b00      	cmp	r3, #0
 800b482:	da02      	bge.n	800b48a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b488:	e087      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b494:	2340      	movs	r3, #64	; 0x40
 800b496:	e080      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b4a2:	2380      	movs	r3, #128	; 0x80
 800b4a4:	e079      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b4b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b4:	e071      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4c4:	e069      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d4:	e061      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4e4:	e059      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4f4:	e051      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b504:	e049      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b514:	e041      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b524:	e039      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b534:	e031      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b544:	e029      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b554:	e021      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b564:	e019      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b574:	e011      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b584:	e009      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f003 0308 	and.w	r3, r3, #8
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b590:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b594:	e001      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000150 	.word	0x20000150
 800b5a8:	10624dd3 	.word	0x10624dd3
 800b5ac:	fdffe008 	.word	0xfdffe008

0800b5b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5b8:	4b1f      	ldr	r3, [pc, #124]	; (800b638 <SDMMC_GetCmdResp2+0x88>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a1f      	ldr	r2, [pc, #124]	; (800b63c <SDMMC_GetCmdResp2+0x8c>)
 800b5be:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c2:	0a5b      	lsrs	r3, r3, #9
 800b5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c8:	fb02 f303 	mul.w	r3, r2, r3
 800b5cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1e5a      	subs	r2, r3, #1
 800b5d2:	60fa      	str	r2, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5dc:	e026      	b.n	800b62c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0ef      	beq.n	800b5ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1ea      	bne.n	800b5ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2204      	movs	r2, #4
 800b608:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b60a:	2304      	movs	r3, #4
 800b60c:	e00e      	b.n	800b62c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b00      	cmp	r3, #0
 800b618:	d004      	beq.n	800b624 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b620:	2301      	movs	r3, #1
 800b622:	e003      	b.n	800b62c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	22c5      	movs	r2, #197	; 0xc5
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	20000150 	.word	0x20000150
 800b63c:	10624dd3 	.word	0x10624dd3

0800b640 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b648:	4b1a      	ldr	r3, [pc, #104]	; (800b6b4 <SDMMC_GetCmdResp3+0x74>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a1a      	ldr	r2, [pc, #104]	; (800b6b8 <SDMMC_GetCmdResp3+0x78>)
 800b64e:	fba2 2303 	umull	r2, r3, r2, r3
 800b652:	0a5b      	lsrs	r3, r3, #9
 800b654:	f241 3288 	movw	r2, #5000	; 0x1388
 800b658:	fb02 f303 	mul.w	r3, r2, r3
 800b65c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	60fa      	str	r2, [r7, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b66c:	e01b      	b.n	800b6a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b672:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d0ef      	beq.n	800b65e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1ea      	bne.n	800b65e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2204      	movs	r2, #4
 800b698:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b69a:	2304      	movs	r3, #4
 800b69c:	e003      	b.n	800b6a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	22c5      	movs	r2, #197	; 0xc5
 800b6a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000150 	.word	0x20000150
 800b6b8:	10624dd3 	.word	0x10624dd3

0800b6bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6ca:	4b35      	ldr	r3, [pc, #212]	; (800b7a0 <SDMMC_GetCmdResp6+0xe4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a35      	ldr	r2, [pc, #212]	; (800b7a4 <SDMMC_GetCmdResp6+0xe8>)
 800b6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d4:	0a5b      	lsrs	r3, r3, #9
 800b6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6da:	fb02 f303 	mul.w	r3, r2, r3
 800b6de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	1e5a      	subs	r2, r3, #1
 800b6e4:	61fa      	str	r2, [r7, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d102      	bne.n	800b6f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6ee:	e052      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0ef      	beq.n	800b6e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1ea      	bne.n	800b6e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70e:	f003 0304 	and.w	r3, r3, #4
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2204      	movs	r2, #4
 800b71a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b71c:	2304      	movs	r3, #4
 800b71e:	e03a      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b732:	2301      	movs	r3, #1
 800b734:	e02f      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fbcb 	bl	800aed2 <SDIO_GetCommandResponse>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	4293      	cmp	r3, r2
 800b744:	d001      	beq.n	800b74a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b746:	2301      	movs	r3, #1
 800b748:	e025      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	22c5      	movs	r2, #197	; 0xc5
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b750:	2100      	movs	r1, #0
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f7ff fbca 	bl	800aeec <SDIO_GetResponse>
 800b758:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	0c1b      	lsrs	r3, r3, #16
 800b768:	b29a      	uxth	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	e011      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b77c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b780:	e009      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b78c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b790:	e001      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b796:	4618      	mov	r0, r3
 800b798:	3720      	adds	r7, #32
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000150 	.word	0x20000150
 800b7a4:	10624dd3 	.word	0x10624dd3

0800b7a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7b0:	4b22      	ldr	r3, [pc, #136]	; (800b83c <SDMMC_GetCmdResp7+0x94>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a22      	ldr	r2, [pc, #136]	; (800b840 <SDMMC_GetCmdResp7+0x98>)
 800b7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ba:	0a5b      	lsrs	r3, r3, #9
 800b7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c0:	fb02 f303 	mul.w	r3, r2, r3
 800b7c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	1e5a      	subs	r2, r3, #1
 800b7ca:	60fa      	str	r2, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d102      	bne.n	800b7d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7d4:	e02c      	b.n	800b830 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0ef      	beq.n	800b7c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1ea      	bne.n	800b7c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2204      	movs	r2, #4
 800b800:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b802:	2304      	movs	r3, #4
 800b804:	e014      	b.n	800b830 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b818:	2301      	movs	r3, #1
 800b81a:	e009      	b.n	800b830 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2240      	movs	r2, #64	; 0x40
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b82e:	2300      	movs	r3, #0
  
}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000150 	.word	0x20000150
 800b840:	10624dd3 	.word	0x10624dd3

0800b844 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b84c:	4b11      	ldr	r3, [pc, #68]	; (800b894 <SDMMC_GetCmdError+0x50>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a11      	ldr	r2, [pc, #68]	; (800b898 <SDMMC_GetCmdError+0x54>)
 800b852:	fba2 2303 	umull	r2, r3, r2, r3
 800b856:	0a5b      	lsrs	r3, r3, #9
 800b858:	f241 3288 	movw	r2, #5000	; 0x1388
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	1e5a      	subs	r2, r3, #1
 800b866:	60fa      	str	r2, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d102      	bne.n	800b872 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b86c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b870:	e009      	b.n	800b886 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0f1      	beq.n	800b862 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	22c5      	movs	r2, #197	; 0xc5
 800b882:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20000150 	.word	0x20000150
 800b898:	10624dd3 	.word	0x10624dd3

0800b89c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b89c:	b084      	sub	sp, #16
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	f107 001c 	add.w	r0, r7, #28
 800b8aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d122      	bne.n	800b8fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b8c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d105      	bne.n	800b8ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 fbee 	bl	800d0d0 <USB_CoreReset>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73fb      	strb	r3, [r7, #15]
 800b8f8:	e01a      	b.n	800b930 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f001 fbe2 	bl	800d0d0 <USB_CoreReset>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	639a      	str	r2, [r3, #56]	; 0x38
 800b922:	e005      	b.n	800b930 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	2b01      	cmp	r3, #1
 800b934:	d10b      	bne.n	800b94e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f043 0206 	orr.w	r2, r3, #6
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f043 0220 	orr.w	r2, r3, #32
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b95a:	b004      	add	sp, #16
 800b95c:	4770      	bx	lr
	...

0800b960 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	2b02      	cmp	r3, #2
 800b972:	d165      	bne.n	800ba40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	4a41      	ldr	r2, [pc, #260]	; (800ba7c <USB_SetTurnaroundTime+0x11c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d906      	bls.n	800b98a <USB_SetTurnaroundTime+0x2a>
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	4a40      	ldr	r2, [pc, #256]	; (800ba80 <USB_SetTurnaroundTime+0x120>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d202      	bcs.n	800b98a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b984:	230f      	movs	r3, #15
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	e062      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	4a3c      	ldr	r2, [pc, #240]	; (800ba80 <USB_SetTurnaroundTime+0x120>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d306      	bcc.n	800b9a0 <USB_SetTurnaroundTime+0x40>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	4a3b      	ldr	r2, [pc, #236]	; (800ba84 <USB_SetTurnaroundTime+0x124>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d202      	bcs.n	800b9a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b99a:	230e      	movs	r3, #14
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	e057      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4a38      	ldr	r2, [pc, #224]	; (800ba84 <USB_SetTurnaroundTime+0x124>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d306      	bcc.n	800b9b6 <USB_SetTurnaroundTime+0x56>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	4a37      	ldr	r2, [pc, #220]	; (800ba88 <USB_SetTurnaroundTime+0x128>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d202      	bcs.n	800b9b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b9b0:	230d      	movs	r3, #13
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	e04c      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	4a33      	ldr	r2, [pc, #204]	; (800ba88 <USB_SetTurnaroundTime+0x128>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d306      	bcc.n	800b9cc <USB_SetTurnaroundTime+0x6c>
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	4a32      	ldr	r2, [pc, #200]	; (800ba8c <USB_SetTurnaroundTime+0x12c>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d802      	bhi.n	800b9cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b9c6:	230c      	movs	r3, #12
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	e041      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4a2f      	ldr	r2, [pc, #188]	; (800ba8c <USB_SetTurnaroundTime+0x12c>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d906      	bls.n	800b9e2 <USB_SetTurnaroundTime+0x82>
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	4a2e      	ldr	r2, [pc, #184]	; (800ba90 <USB_SetTurnaroundTime+0x130>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d802      	bhi.n	800b9e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b9dc:	230b      	movs	r3, #11
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e036      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	4a2a      	ldr	r2, [pc, #168]	; (800ba90 <USB_SetTurnaroundTime+0x130>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d906      	bls.n	800b9f8 <USB_SetTurnaroundTime+0x98>
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <USB_SetTurnaroundTime+0x134>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d802      	bhi.n	800b9f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b9f2:	230a      	movs	r3, #10
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e02b      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	4a26      	ldr	r2, [pc, #152]	; (800ba94 <USB_SetTurnaroundTime+0x134>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d906      	bls.n	800ba0e <USB_SetTurnaroundTime+0xae>
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4a25      	ldr	r2, [pc, #148]	; (800ba98 <USB_SetTurnaroundTime+0x138>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d202      	bcs.n	800ba0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ba08:	2309      	movs	r3, #9
 800ba0a:	617b      	str	r3, [r7, #20]
 800ba0c:	e020      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4a21      	ldr	r2, [pc, #132]	; (800ba98 <USB_SetTurnaroundTime+0x138>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d306      	bcc.n	800ba24 <USB_SetTurnaroundTime+0xc4>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	4a20      	ldr	r2, [pc, #128]	; (800ba9c <USB_SetTurnaroundTime+0x13c>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d802      	bhi.n	800ba24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ba1e:	2308      	movs	r3, #8
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	e015      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	4a1d      	ldr	r2, [pc, #116]	; (800ba9c <USB_SetTurnaroundTime+0x13c>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d906      	bls.n	800ba3a <USB_SetTurnaroundTime+0xda>
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	4a1c      	ldr	r2, [pc, #112]	; (800baa0 <USB_SetTurnaroundTime+0x140>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d202      	bcs.n	800ba3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ba34:	2307      	movs	r3, #7
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	e00a      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ba3a:	2306      	movs	r3, #6
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	e007      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d102      	bne.n	800ba4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ba46:	2309      	movs	r3, #9
 800ba48:	617b      	str	r3, [r7, #20]
 800ba4a:	e001      	b.n	800ba50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ba4c:	2309      	movs	r3, #9
 800ba4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68da      	ldr	r2, [r3, #12]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	029b      	lsls	r3, r3, #10
 800ba64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	371c      	adds	r7, #28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	00d8acbf 	.word	0x00d8acbf
 800ba80:	00e4e1c0 	.word	0x00e4e1c0
 800ba84:	00f42400 	.word	0x00f42400
 800ba88:	01067380 	.word	0x01067380
 800ba8c:	011a499f 	.word	0x011a499f
 800ba90:	01312cff 	.word	0x01312cff
 800ba94:	014ca43f 	.word	0x014ca43f
 800ba98:	016e3600 	.word	0x016e3600
 800ba9c:	01a6ab1f 	.word	0x01a6ab1f
 800baa0:	01e84800 	.word	0x01e84800

0800baa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f043 0201 	orr.w	r2, r3, #1
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f023 0201 	bic.w	r2, r3, #1
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb04:	78fb      	ldrb	r3, [r7, #3]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d115      	bne.n	800bb36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb16:	2001      	movs	r0, #1
 800bb18:	f7f8 fbae 	bl	8004278 <HAL_Delay>
      ms++;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 fa45 	bl	800cfb2 <USB_GetMode>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d01e      	beq.n	800bb6c <USB_SetCurrentMode+0x84>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b31      	cmp	r3, #49	; 0x31
 800bb32:	d9f0      	bls.n	800bb16 <USB_SetCurrentMode+0x2e>
 800bb34:	e01a      	b.n	800bb6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d115      	bne.n	800bb68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb48:	2001      	movs	r0, #1
 800bb4a:	f7f8 fb95 	bl	8004278 <HAL_Delay>
      ms++;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3301      	adds	r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f001 fa2c 	bl	800cfb2 <USB_GetMode>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d005      	beq.n	800bb6c <USB_SetCurrentMode+0x84>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b31      	cmp	r3, #49	; 0x31
 800bb64:	d9f0      	bls.n	800bb48 <USB_SetCurrentMode+0x60>
 800bb66:	e001      	b.n	800bb6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e005      	b.n	800bb78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b32      	cmp	r3, #50	; 0x32
 800bb70:	d101      	bne.n	800bb76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e000      	b.n	800bb78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb80:	b084      	sub	sp, #16
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b086      	sub	sp, #24
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	613b      	str	r3, [r7, #16]
 800bb9e:	e009      	b.n	800bbb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3340      	adds	r3, #64	; 0x40
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	2200      	movs	r2, #0
 800bbac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	613b      	str	r3, [r7, #16]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b0e      	cmp	r3, #14
 800bbb8:	d9f2      	bls.n	800bba0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d11c      	bne.n	800bbfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbce:	f043 0302 	orr.w	r3, r3, #2
 800bbd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	639a      	str	r2, [r3, #56]	; 0x38
 800bbf8:	e00b      	b.n	800bc12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc18:	461a      	mov	r2, r3
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc24:	4619      	mov	r1, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	680b      	ldr	r3, [r1, #0]
 800bc30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d10c      	bne.n	800bc52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d104      	bne.n	800bc48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f965 	bl	800bf10 <USB_SetDevSpeed>
 800bc46:	e008      	b.n	800bc5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc48:	2101      	movs	r1, #1
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f960 	bl	800bf10 <USB_SetDevSpeed>
 800bc50:	e003      	b.n	800bc5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc52:	2103      	movs	r1, #3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f95b 	bl	800bf10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc5a:	2110      	movs	r1, #16
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f8f3 	bl	800be48 <USB_FlushTxFifo>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f91f 	bl	800beb0 <USB_FlushRxFifo>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc82:	461a      	mov	r2, r3
 800bc84:	2300      	movs	r3, #0
 800bc86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bca0:	2300      	movs	r3, #0
 800bca2:	613b      	str	r3, [r7, #16]
 800bca4:	e043      	b.n	800bd2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	015a      	lsls	r2, r3, #5
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcbc:	d118      	bne.n	800bcf0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	015a      	lsls	r2, r3, #5
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	e013      	b.n	800bd02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce6:	461a      	mov	r2, r3
 800bce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	e008      	b.n	800bd02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	2300      	movs	r3, #0
 800bd00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0e:	461a      	mov	r2, r3
 800bd10:	2300      	movs	r3, #0
 800bd12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd20:	461a      	mov	r2, r3
 800bd22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	613b      	str	r3, [r7, #16]
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d3b7      	bcc.n	800bca6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	e043      	b.n	800bdc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd52:	d118      	bne.n	800bd86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10a      	bne.n	800bd70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	015a      	lsls	r2, r3, #5
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4413      	add	r3, r2
 800bd62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd66:	461a      	mov	r2, r3
 800bd68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd6c:	6013      	str	r3, [r2, #0]
 800bd6e:	e013      	b.n	800bd98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	e008      	b.n	800bd98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd92:	461a      	mov	r2, r3
 800bd94:	2300      	movs	r3, #0
 800bd96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda4:	461a      	mov	r2, r3
 800bda6:	2300      	movs	r3, #0
 800bda8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bdbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	613b      	str	r3, [r7, #16]
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d3b7      	bcc.n	800bd3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bdec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d105      	bne.n	800be00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	f043 0210 	orr.w	r2, r3, #16
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699a      	ldr	r2, [r3, #24]
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <USB_DevInit+0x2c4>)
 800be06:	4313      	orrs	r3, r2
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	f043 0208 	orr.w	r2, r3, #8
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be20:	2b01      	cmp	r3, #1
 800be22:	d107      	bne.n	800be34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be2c:	f043 0304 	orr.w	r3, r3, #4
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be34:	7dfb      	ldrb	r3, [r7, #23]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be40:	b004      	add	sp, #16
 800be42:	4770      	bx	lr
 800be44:	803c3800 	.word	0x803c3800

0800be48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3301      	adds	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4a13      	ldr	r2, [pc, #76]	; (800beac <USB_FlushTxFifo+0x64>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d901      	bls.n	800be68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e01b      	b.n	800bea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	daf2      	bge.n	800be56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	019b      	lsls	r3, r3, #6
 800be78:	f043 0220 	orr.w	r2, r3, #32
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	3301      	adds	r3, #1
 800be84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4a08      	ldr	r2, [pc, #32]	; (800beac <USB_FlushTxFifo+0x64>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d901      	bls.n	800be92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e006      	b.n	800bea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d0f0      	beq.n	800be80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	00030d40 	.word	0x00030d40

0800beb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4a11      	ldr	r2, [pc, #68]	; (800bf0c <USB_FlushRxFifo+0x5c>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d901      	bls.n	800bece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e018      	b.n	800bf00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	daf2      	bge.n	800bebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bed6:	2300      	movs	r3, #0
 800bed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2210      	movs	r2, #16
 800bede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3301      	adds	r3, #1
 800bee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4a08      	ldr	r2, [pc, #32]	; (800bf0c <USB_FlushRxFifo+0x5c>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d901      	bls.n	800bef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e006      	b.n	800bf00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0310 	and.w	r3, r3, #16
 800befa:	2b10      	cmp	r3, #16
 800befc:	d0f0      	beq.n	800bee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	00030d40 	.word	0x00030d40

0800bf10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	78fb      	ldrb	r3, [r7, #3]
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf30:	4313      	orrs	r3, r2
 800bf32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b087      	sub	sp, #28
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	f003 0306 	and.w	r3, r3, #6
 800bf5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d102      	bne.n	800bf68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bf62:	2300      	movs	r3, #0
 800bf64:	75fb      	strb	r3, [r7, #23]
 800bf66:	e00a      	b.n	800bf7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d002      	beq.n	800bf74 <USB_GetDevSpeed+0x32>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b06      	cmp	r3, #6
 800bf72:	d102      	bne.n	800bf7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bf74:	2302      	movs	r3, #2
 800bf76:	75fb      	strb	r3, [r7, #23]
 800bf78:	e001      	b.n	800bf7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bf7a:	230f      	movs	r3, #15
 800bf7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bf7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	371c      	adds	r7, #28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d13a      	bne.n	800c01e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfae:	69da      	ldr	r2, [r3, #28]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 030f 	and.w	r3, r3, #15
 800bfb8:	2101      	movs	r1, #1
 800bfba:	fa01 f303 	lsl.w	r3, r1, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	68f9      	ldr	r1, [r7, #12]
 800bfc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d155      	bne.n	800c08c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	015a      	lsls	r2, r3, #5
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	791b      	ldrb	r3, [r3, #4]
 800bffa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bffc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	059b      	lsls	r3, r3, #22
 800c002:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c004:	4313      	orrs	r3, r2
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	0151      	lsls	r1, r2, #5
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	440a      	add	r2, r1
 800c00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c01a:	6013      	str	r3, [r2, #0]
 800c01c:	e036      	b.n	800c08c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c024:	69da      	ldr	r2, [r3, #28]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	2101      	movs	r1, #1
 800c030:	fa01 f303 	lsl.w	r3, r1, r3
 800c034:	041b      	lsls	r3, r3, #16
 800c036:	68f9      	ldr	r1, [r7, #12]
 800c038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c03c:	4313      	orrs	r3, r2
 800c03e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d11a      	bne.n	800c08c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	791b      	ldrb	r3, [r3, #4]
 800c070:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c072:	430b      	orrs	r3, r1
 800c074:	4313      	orrs	r3, r2
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	0151      	lsls	r1, r2, #5
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	440a      	add	r2, r1
 800c07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c08a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
	...

0800c09c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	785b      	ldrb	r3, [r3, #1]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d161      	bne.n	800c17c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	015a      	lsls	r2, r3, #5
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0ce:	d11f      	bne.n	800c110 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	015a      	lsls	r2, r3, #5
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	0151      	lsls	r1, r2, #5
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	440a      	add	r2, r1
 800c0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	0151      	lsls	r1, r2, #5
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	440a      	add	r2, r1
 800c106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c10e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f003 030f 	and.w	r3, r3, #15
 800c120:	2101      	movs	r1, #1
 800c122:	fa01 f303 	lsl.w	r3, r1, r3
 800c126:	b29b      	uxth	r3, r3
 800c128:	43db      	mvns	r3, r3
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c130:	4013      	ands	r3, r2
 800c132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13a:	69da      	ldr	r2, [r3, #28]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	f003 030f 	and.w	r3, r3, #15
 800c144:	2101      	movs	r1, #1
 800c146:	fa01 f303 	lsl.w	r3, r1, r3
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	43db      	mvns	r3, r3
 800c14e:	68f9      	ldr	r1, [r7, #12]
 800c150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c154:	4013      	ands	r3, r2
 800c156:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	015a      	lsls	r2, r3, #5
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4413      	add	r3, r2
 800c160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	0159      	lsls	r1, r3, #5
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	440b      	add	r3, r1
 800c16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c172:	4619      	mov	r1, r3
 800c174:	4b35      	ldr	r3, [pc, #212]	; (800c24c <USB_DeactivateEndpoint+0x1b0>)
 800c176:	4013      	ands	r3, r2
 800c178:	600b      	str	r3, [r1, #0]
 800c17a:	e060      	b.n	800c23e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c18e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c192:	d11f      	bne.n	800c1d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	015a      	lsls	r2, r3, #5
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4413      	add	r3, r2
 800c19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	0151      	lsls	r1, r2, #5
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	440a      	add	r2, r1
 800c1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	0151      	lsls	r1, r2, #5
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	440a      	add	r2, r1
 800c1ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f003 030f 	and.w	r3, r3, #15
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ea:	041b      	lsls	r3, r3, #16
 800c1ec:	43db      	mvns	r3, r3
 800c1ee:	68f9      	ldr	r1, [r7, #12]
 800c1f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1fe:	69da      	ldr	r2, [r3, #28]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 030f 	and.w	r3, r3, #15
 800c208:	2101      	movs	r1, #1
 800c20a:	fa01 f303 	lsl.w	r3, r1, r3
 800c20e:	041b      	lsls	r3, r3, #16
 800c210:	43db      	mvns	r3, r3
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c218:	4013      	ands	r3, r2
 800c21a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	0159      	lsls	r1, r3, #5
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	440b      	add	r3, r1
 800c232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c236:	4619      	mov	r1, r3
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <USB_DeactivateEndpoint+0x1b4>)
 800c23a:	4013      	ands	r3, r2
 800c23c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	ec337800 	.word	0xec337800
 800c250:	eff37800 	.word	0xeff37800

0800c254 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08a      	sub	sp, #40	; 0x28
 800c258:	af02      	add	r7, sp, #8
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4613      	mov	r3, r2
 800c260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	2b01      	cmp	r3, #1
 800c272:	f040 815c 	bne.w	800c52e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d132      	bne.n	800c2e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	4413      	add	r3, r2
 800c286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	0151      	lsls	r1, r2, #5
 800c290:	69fa      	ldr	r2, [r7, #28]
 800c292:	440a      	add	r2, r1
 800c294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c29c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	015a      	lsls	r2, r3, #5
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	0151      	lsls	r1, r2, #5
 800c2b4:	69fa      	ldr	r2, [r7, #28]
 800c2b6:	440a      	add	r2, r1
 800c2b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	0151      	lsls	r1, r2, #5
 800c2d4:	69fa      	ldr	r2, [r7, #28]
 800c2d6:	440a      	add	r2, r1
 800c2d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2dc:	0cdb      	lsrs	r3, r3, #19
 800c2de:	04db      	lsls	r3, r3, #19
 800c2e0:	6113      	str	r3, [r2, #16]
 800c2e2:	e074      	b.n	800c3ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	015a      	lsls	r2, r3, #5
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	69ba      	ldr	r2, [r7, #24]
 800c2f4:	0151      	lsls	r1, r2, #5
 800c2f6:	69fa      	ldr	r2, [r7, #28]
 800c2f8:	440a      	add	r2, r1
 800c2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2fe:	0cdb      	lsrs	r3, r3, #19
 800c300:	04db      	lsls	r3, r3, #19
 800c302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	0151      	lsls	r1, r2, #5
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	440a      	add	r2, r1
 800c31a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c322:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	015a      	lsls	r2, r3, #5
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	4413      	add	r3, r2
 800c330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c334:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	6999      	ldr	r1, [r3, #24]
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	440b      	add	r3, r1
 800c340:	1e59      	subs	r1, r3, #1
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	fbb1 f3f3 	udiv	r3, r1, r3
 800c34a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c34c:	4b9d      	ldr	r3, [pc, #628]	; (800c5c4 <USB_EPStartXfer+0x370>)
 800c34e:	400b      	ands	r3, r1
 800c350:	69b9      	ldr	r1, [r7, #24]
 800c352:	0148      	lsls	r0, r1, #5
 800c354:	69f9      	ldr	r1, [r7, #28]
 800c356:	4401      	add	r1, r0
 800c358:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c35c:	4313      	orrs	r3, r2
 800c35e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36c:	691a      	ldr	r2, [r3, #16]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c376:	69b9      	ldr	r1, [r7, #24]
 800c378:	0148      	lsls	r0, r1, #5
 800c37a:	69f9      	ldr	r1, [r7, #28]
 800c37c:	4401      	add	r1, r0
 800c37e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c382:	4313      	orrs	r3, r2
 800c384:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	791b      	ldrb	r3, [r3, #4]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d11f      	bne.n	800c3ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	0151      	lsls	r1, r2, #5
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	440a      	add	r2, r1
 800c3a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c3ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d14b      	bne.n	800c46c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d009      	beq.n	800c3f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	015a      	lsls	r2, r3, #5
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	791b      	ldrb	r3, [r3, #4]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d128      	bne.n	800c44a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c404:	2b00      	cmp	r3, #0
 800c406:	d110      	bne.n	800c42a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	015a      	lsls	r2, r3, #5
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	4413      	add	r3, r2
 800c410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	0151      	lsls	r1, r2, #5
 800c41a:	69fa      	ldr	r2, [r7, #28]
 800c41c:	440a      	add	r2, r1
 800c41e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	e00f      	b.n	800c44a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c448:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	e133      	b.n	800c6d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	69ba      	ldr	r2, [r7, #24]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	69fa      	ldr	r2, [r7, #28]
 800c480:	440a      	add	r2, r1
 800c482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c48a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	791b      	ldrb	r3, [r3, #4]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d015      	beq.n	800c4c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 811b 	beq.w	800c6d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	f003 030f 	and.w	r3, r3, #15
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b4:	69f9      	ldr	r1, [r7, #28]
 800c4b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	634b      	str	r3, [r1, #52]	; 0x34
 800c4be:	e109      	b.n	800c6d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d110      	bne.n	800c4f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4ee:	6013      	str	r3, [r2, #0]
 800c4f0:	e00f      	b.n	800c512 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	69ba      	ldr	r2, [r7, #24]
 800c502:	0151      	lsls	r1, r2, #5
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	440a      	add	r2, r1
 800c508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c510:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	6919      	ldr	r1, [r3, #16]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	781a      	ldrb	r2, [r3, #0]
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	699b      	ldr	r3, [r3, #24]
 800c51e:	b298      	uxth	r0, r3
 800c520:	79fb      	ldrb	r3, [r7, #7]
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	4603      	mov	r3, r0
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 fade 	bl	800cae8 <USB_WritePacket>
 800c52c:	e0d2      	b.n	800c6d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	015a      	lsls	r2, r3, #5
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	4413      	add	r3, r2
 800c536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	0151      	lsls	r1, r2, #5
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	440a      	add	r2, r1
 800c544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c548:	0cdb      	lsrs	r3, r3, #19
 800c54a:	04db      	lsls	r3, r3, #19
 800c54c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	015a      	lsls	r2, r3, #5
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	4413      	add	r3, r2
 800c556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	69ba      	ldr	r2, [r7, #24]
 800c55e:	0151      	lsls	r1, r2, #5
 800c560:	69fa      	ldr	r2, [r7, #28]
 800c562:	440a      	add	r2, r1
 800c564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c56c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c570:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d126      	bne.n	800c5c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	4413      	add	r3, r2
 800c582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c586:	691a      	ldr	r2, [r3, #16]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c590:	69b9      	ldr	r1, [r7, #24]
 800c592:	0148      	lsls	r0, r1, #5
 800c594:	69f9      	ldr	r1, [r7, #28]
 800c596:	4401      	add	r1, r0
 800c598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c59c:	4313      	orrs	r3, r2
 800c59e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	0151      	lsls	r1, r2, #5
 800c5b2:	69fa      	ldr	r2, [r7, #28]
 800c5b4:	440a      	add	r2, r1
 800c5b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5be:	6113      	str	r3, [r2, #16]
 800c5c0:	e03a      	b.n	800c638 <USB_EPStartXfer+0x3e4>
 800c5c2:	bf00      	nop
 800c5c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	699a      	ldr	r2, [r3, #24]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	1e5a      	subs	r2, r3, #1
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	8afa      	ldrh	r2, [r7, #22]
 800c5e4:	fb03 f202 	mul.w	r2, r3, r2
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	691a      	ldr	r2, [r3, #16]
 800c5fa:	8afb      	ldrh	r3, [r7, #22]
 800c5fc:	04d9      	lsls	r1, r3, #19
 800c5fe:	4b38      	ldr	r3, [pc, #224]	; (800c6e0 <USB_EPStartXfer+0x48c>)
 800c600:	400b      	ands	r3, r1
 800c602:	69b9      	ldr	r1, [r7, #24]
 800c604:	0148      	lsls	r0, r1, #5
 800c606:	69f9      	ldr	r1, [r7, #28]
 800c608:	4401      	add	r1, r0
 800c60a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c60e:	4313      	orrs	r3, r2
 800c610:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61e:	691a      	ldr	r2, [r3, #16]
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c628:	69b9      	ldr	r1, [r7, #24]
 800c62a:	0148      	lsls	r0, r1, #5
 800c62c:	69f9      	ldr	r1, [r7, #28]
 800c62e:	4401      	add	r1, r0
 800c630:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c634:	4313      	orrs	r3, r2
 800c636:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c638:	79fb      	ldrb	r3, [r7, #7]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d10d      	bne.n	800c65a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d009      	beq.n	800c65a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	6919      	ldr	r1, [r3, #16]
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	015a      	lsls	r2, r3, #5
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	4413      	add	r3, r2
 800c652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c656:	460a      	mov	r2, r1
 800c658:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	791b      	ldrb	r3, [r3, #4]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d128      	bne.n	800c6b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d110      	bne.n	800c694 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	0151      	lsls	r1, r2, #5
 800c684:	69fa      	ldr	r2, [r7, #28]
 800c686:	440a      	add	r2, r1
 800c688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c68c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	e00f      	b.n	800c6b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	69ba      	ldr	r2, [r7, #24]
 800c6a4:	0151      	lsls	r1, r2, #5
 800c6a6:	69fa      	ldr	r2, [r7, #28]
 800c6a8:	440a      	add	r2, r1
 800c6aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	015a      	lsls	r2, r3, #5
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	69ba      	ldr	r2, [r7, #24]
 800c6c4:	0151      	lsls	r1, r2, #5
 800c6c6:	69fa      	ldr	r2, [r7, #28]
 800c6c8:	440a      	add	r2, r1
 800c6ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3720      	adds	r7, #32
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	1ff80000 	.word	0x1ff80000

0800c6e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	785b      	ldrb	r3, [r3, #1]
 800c700:	2b01      	cmp	r3, #1
 800c702:	f040 80ce 	bne.w	800c8a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d132      	bne.n	800c774 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	015a      	lsls	r2, r3, #5
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	4413      	add	r3, r2
 800c716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	0151      	lsls	r1, r2, #5
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	440a      	add	r2, r1
 800c724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c72c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	0151      	lsls	r1, r2, #5
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	440a      	add	r2, r1
 800c748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c74c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	015a      	lsls	r2, r3, #5
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	4413      	add	r3, r2
 800c75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	0151      	lsls	r1, r2, #5
 800c764:	697a      	ldr	r2, [r7, #20]
 800c766:	440a      	add	r2, r1
 800c768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c76c:	0cdb      	lsrs	r3, r3, #19
 800c76e:	04db      	lsls	r3, r3, #19
 800c770:	6113      	str	r3, [r2, #16]
 800c772:	e04e      	b.n	800c812 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	0151      	lsls	r1, r2, #5
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	440a      	add	r2, r1
 800c78a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c78e:	0cdb      	lsrs	r3, r3, #19
 800c790:	04db      	lsls	r3, r3, #19
 800c792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	0151      	lsls	r1, r2, #5
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	440a      	add	r2, r1
 800c7aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c7b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c7b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	699a      	ldr	r2, [r3, #24]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d903      	bls.n	800c7cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	015a      	lsls	r2, r3, #5
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	0151      	lsls	r1, r2, #5
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	440a      	add	r2, r1
 800c7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f8:	691a      	ldr	r2, [r3, #16]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c802:	6939      	ldr	r1, [r7, #16]
 800c804:	0148      	lsls	r0, r1, #5
 800c806:	6979      	ldr	r1, [r7, #20]
 800c808:	4401      	add	r1, r0
 800c80a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c80e:	4313      	orrs	r3, r2
 800c810:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d11e      	bne.n	800c856 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d009      	beq.n	800c834 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82c:	461a      	mov	r2, r3
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	0151      	lsls	r1, r2, #5
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	440a      	add	r2, r1
 800c84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c84e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	e097      	b.n	800c986 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	015a      	lsls	r2, r3, #5
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	0151      	lsls	r1, r2, #5
 800c868:	697a      	ldr	r2, [r7, #20]
 800c86a:	440a      	add	r2, r1
 800c86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c874:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 8083 	beq.w	800c986 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	f003 030f 	and.w	r3, r3, #15
 800c890:	2101      	movs	r1, #1
 800c892:	fa01 f303 	lsl.w	r3, r1, r3
 800c896:	6979      	ldr	r1, [r7, #20]
 800c898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c89c:	4313      	orrs	r3, r2
 800c89e:	634b      	str	r3, [r1, #52]	; 0x34
 800c8a0:	e071      	b.n	800c986 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8bc:	0cdb      	lsrs	r3, r3, #19
 800c8be:	04db      	lsls	r3, r3, #19
 800c8c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	0151      	lsls	r1, r2, #5
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d003      	beq.n	800c8f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	68da      	ldr	r2, [r3, #12]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	015a      	lsls	r2, r3, #5
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	4413      	add	r3, r2
 800c906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	0151      	lsls	r1, r2, #5
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	440a      	add	r2, r1
 800c914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c91c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	015a      	lsls	r2, r3, #5
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	4413      	add	r3, r2
 800c926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92a:	691a      	ldr	r2, [r3, #16]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c934:	6939      	ldr	r1, [r7, #16]
 800c936:	0148      	lsls	r0, r1, #5
 800c938:	6979      	ldr	r1, [r7, #20]
 800c93a:	4401      	add	r1, r0
 800c93c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c940:	4313      	orrs	r3, r2
 800c942:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d10d      	bne.n	800c966 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d009      	beq.n	800c966 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	6919      	ldr	r1, [r3, #16]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	015a      	lsls	r2, r3, #5
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	4413      	add	r3, r2
 800c95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c962:	460a      	mov	r2, r1
 800c964:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	015a      	lsls	r2, r3, #5
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	4413      	add	r3, r2
 800c96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	0151      	lsls	r1, r2, #5
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	440a      	add	r2, r1
 800c97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c980:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c984:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	785b      	ldrb	r3, [r3, #1]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d14a      	bne.n	800ca48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ca:	f040 8086 	bne.w	800cada <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	015a      	lsls	r2, r3, #5
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	7812      	ldrb	r2, [r2, #0]
 800c9e2:	0151      	lsls	r1, r2, #5
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	440a      	add	r2, r1
 800c9e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	7812      	ldrb	r2, [r2, #0]
 800ca06:	0151      	lsls	r1, r2, #5
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	440a      	add	r2, r1
 800ca0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d902      	bls.n	800ca2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	75fb      	strb	r3, [r7, #23]
          break;
 800ca2a:	e056      	b.n	800cada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	015a      	lsls	r2, r3, #5
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca44:	d0e7      	beq.n	800ca16 <USB_EPStopXfer+0x82>
 800ca46:	e048      	b.n	800cada <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	015a      	lsls	r2, r3, #5
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	4413      	add	r3, r2
 800ca52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca60:	d13b      	bne.n	800cada <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	7812      	ldrb	r2, [r2, #0]
 800ca76:	0151      	lsls	r1, r2, #5
 800ca78:	693a      	ldr	r2, [r7, #16]
 800ca7a:	440a      	add	r2, r1
 800ca7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	7812      	ldrb	r2, [r2, #0]
 800ca9a:	0151      	lsls	r1, r2, #5
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	440a      	add	r2, r1
 800caa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800caa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3301      	adds	r3, #1
 800caae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f242 7210 	movw	r2, #10000	; 0x2710
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d902      	bls.n	800cac0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	75fb      	strb	r3, [r7, #23]
          break;
 800cabe:	e00c      	b.n	800cada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cad8:	d0e7      	beq.n	800caaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cada:	7dfb      	ldrb	r3, [r7, #23]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	371c      	adds	r7, #28
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cae8:	b480      	push	{r7}
 800caea:	b089      	sub	sp, #36	; 0x24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4611      	mov	r1, r2
 800caf4:	461a      	mov	r2, r3
 800caf6:	460b      	mov	r3, r1
 800caf8:	71fb      	strb	r3, [r7, #7]
 800cafa:	4613      	mov	r3, r2
 800cafc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cb06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d123      	bne.n	800cb56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb0e:	88bb      	ldrh	r3, [r7, #4]
 800cb10:	3303      	adds	r3, #3
 800cb12:	089b      	lsrs	r3, r3, #2
 800cb14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb16:	2300      	movs	r3, #0
 800cb18:	61bb      	str	r3, [r7, #24]
 800cb1a:	e018      	b.n	800cb4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	031a      	lsls	r2, r3, #12
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb28:	461a      	mov	r2, r3
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	3301      	adds	r3, #1
 800cb34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	3301      	adds	r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d3e2      	bcc.n	800cb1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3724      	adds	r7, #36	; 0x24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b08b      	sub	sp, #44	; 0x2c
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb7a:	88fb      	ldrh	r3, [r7, #6]
 800cb7c:	089b      	lsrs	r3, r3, #2
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb82:	88fb      	ldrh	r3, [r7, #6]
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	623b      	str	r3, [r7, #32]
 800cb8e:	e014      	b.n	800cbba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	3301      	adds	r3, #1
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	3301      	adds	r3, #1
 800cba6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	3301      	adds	r3, #1
 800cbac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	623b      	str	r3, [r7, #32]
 800cbba:	6a3a      	ldr	r2, [r7, #32]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d3e6      	bcc.n	800cb90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cbc2:	8bfb      	ldrh	r3, [r7, #30]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01e      	beq.n	800cc06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	f107 0310 	add.w	r3, r7, #16
 800cbd8:	6812      	ldr	r2, [r2, #0]
 800cbda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	701a      	strb	r2, [r3, #0]
      i++;
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cbfa:	8bfb      	ldrh	r3, [r7, #30]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cc00:	8bfb      	ldrh	r3, [r7, #30]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1ea      	bne.n	800cbdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	372c      	adds	r7, #44	; 0x2c
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	785b      	ldrb	r3, [r3, #1]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d12c      	bne.n	800cc8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	015a      	lsls	r2, r3, #5
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	4413      	add	r3, r2
 800cc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	db12      	blt.n	800cc68 <USB_EPSetStall+0x54>
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00f      	beq.n	800cc68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	015a      	lsls	r2, r3, #5
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4413      	add	r3, r2
 800cc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	0151      	lsls	r1, r2, #5
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	440a      	add	r2, r1
 800cc5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	0151      	lsls	r1, r2, #5
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	440a      	add	r2, r1
 800cc7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	e02b      	b.n	800cce2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	015a      	lsls	r2, r3, #5
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4413      	add	r3, r2
 800cc92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	db12      	blt.n	800ccc2 <USB_EPSetStall+0xae>
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00f      	beq.n	800ccc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	015a      	lsls	r2, r3, #5
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4413      	add	r3, r2
 800ccaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	0151      	lsls	r1, r2, #5
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	440a      	add	r2, r1
 800ccb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ccc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	0151      	lsls	r1, r2, #5
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	440a      	add	r2, r1
 800ccd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cce0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	785b      	ldrb	r3, [r3, #1]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d128      	bne.n	800cd5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	0151      	lsls	r1, r2, #5
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	440a      	add	r2, r1
 800cd22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	791b      	ldrb	r3, [r3, #4]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d003      	beq.n	800cd3c <USB_EPClearStall+0x4c>
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	791b      	ldrb	r3, [r3, #4]
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d138      	bne.n	800cdae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	e027      	b.n	800cdae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	015a      	lsls	r2, r3, #5
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	4413      	add	r3, r2
 800cd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	0151      	lsls	r1, r2, #5
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	440a      	add	r2, r1
 800cd74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	791b      	ldrb	r3, [r3, #4]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d003      	beq.n	800cd8e <USB_EPClearStall+0x9e>
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	791b      	ldrb	r3, [r3, #4]
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d10f      	bne.n	800cdae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	015a      	lsls	r2, r3, #5
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	4413      	add	r3, r2
 800cd96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	0151      	lsls	r1, r2, #5
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	440a      	add	r2, r1
 800cda4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cda8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cdde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	011b      	lsls	r3, r3, #4
 800cdec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cdf0:	68f9      	ldr	r1, [r7, #12]
 800cdf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce36:	f023 0302 	bic.w	r3, r3, #2
 800ce3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce64:	f023 0303 	bic.w	r3, r3, #3
 800ce68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce78:	f043 0302 	orr.w	r3, r3, #2
 800ce7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	699b      	ldr	r3, [r3, #24]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	4013      	ands	r3, r2
 800cea2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cea4:	68fb      	ldr	r3, [r7, #12]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cece:	69db      	ldr	r3, [r3, #28]
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	4013      	ands	r3, r2
 800ced4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	0c1b      	lsrs	r3, r3, #16
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr

0800cee6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b085      	sub	sp, #20
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	4013      	ands	r3, r2
 800cf08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	b29b      	uxth	r3, r3
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3714      	adds	r7, #20
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b085      	sub	sp, #20
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	460b      	mov	r3, r1
 800cf24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf2a:	78fb      	ldrb	r3, [r7, #3]
 800cf2c:	015a      	lsls	r2, r3, #5
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	4413      	add	r3, r2
 800cf32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	4013      	ands	r3, r2
 800cf46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf48:	68bb      	ldr	r3, [r7, #8]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3714      	adds	r7, #20
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf56:	b480      	push	{r7}
 800cf58:	b087      	sub	sp, #28
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf7a:	78fb      	ldrb	r3, [r7, #3]
 800cf7c:	f003 030f 	and.w	r3, r3, #15
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	fa22 f303 	lsr.w	r3, r2, r3
 800cf86:	01db      	lsls	r3, r3, #7
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	693a      	ldr	r2, [r7, #16]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf90:	78fb      	ldrb	r3, [r7, #3]
 800cf92:	015a      	lsls	r2, r3, #5
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	4413      	add	r3, r2
 800cf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	693a      	ldr	r2, [r7, #16]
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	371c      	adds	r7, #28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	695b      	ldr	r3, [r3, #20]
 800cfbe:	f003 0301 	and.w	r3, r3, #1
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	370c      	adds	r7, #12
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cfec:	f023 0307 	bic.w	r3, r3, #7
 800cff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d014:	b480      	push	{r7}
 800d016:	b087      	sub	sp, #28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	460b      	mov	r3, r1
 800d01e:	607a      	str	r2, [r7, #4]
 800d020:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	333c      	adds	r3, #60	; 0x3c
 800d02a:	3304      	adds	r3, #4
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	4a26      	ldr	r2, [pc, #152]	; (800d0cc <USB_EP0_OutStart+0xb8>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d90a      	bls.n	800d04e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d048:	d101      	bne.n	800d04e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	e037      	b.n	800d0be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d054:	461a      	mov	r2, r3
 800d056:	2300      	movs	r3, #0
 800d058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d06c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d07c:	f043 0318 	orr.w	r3, r3, #24
 800d080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d090:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d094:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d096:	7afb      	ldrb	r3, [r7, #11]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d10f      	bne.n	800d0bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d0ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	4f54300a 	.word	0x4f54300a

0800d0d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	4a13      	ldr	r2, [pc, #76]	; (800d134 <USB_CoreReset+0x64>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d901      	bls.n	800d0ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e01b      	b.n	800d126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	daf2      	bge.n	800d0dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	f043 0201 	orr.w	r2, r3, #1
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3301      	adds	r3, #1
 800d10a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4a09      	ldr	r2, [pc, #36]	; (800d134 <USB_CoreReset+0x64>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d901      	bls.n	800d118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d114:	2303      	movs	r3, #3
 800d116:	e006      	b.n	800d126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	f003 0301 	and.w	r3, r3, #1
 800d120:	2b01      	cmp	r3, #1
 800d122:	d0f0      	beq.n	800d106 <USB_CoreReset+0x36>

  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	00030d40 	.word	0x00030d40

0800d138 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d13c:	4904      	ldr	r1, [pc, #16]	; (800d150 <MX_FATFS_Init+0x18>)
 800d13e:	4805      	ldr	r0, [pc, #20]	; (800d154 <MX_FATFS_Init+0x1c>)
 800d140:	f002 fa22 	bl	800f588 <FATFS_LinkDriver>
 800d144:	4603      	mov	r3, r0
 800d146:	461a      	mov	r2, r3
 800d148:	4b03      	ldr	r3, [pc, #12]	; (800d158 <MX_FATFS_Init+0x20>)
 800d14a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d14c:	bf00      	nop
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	200008ac 	.word	0x200008ac
 800d154:	08013060 	.word	0x08013060
 800d158:	200008a8 	.word	0x200008a8

0800d15c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d166:	f000 f896 	bl	800d296 <BSP_SD_IsDetected>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d001      	beq.n	800d174 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	e012      	b.n	800d19a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d174:	480b      	ldr	r0, [pc, #44]	; (800d1a4 <BSP_SD_Init+0x48>)
 800d176:	f7fa fdbb 	bl	8007cf0 <HAL_SD_Init>
 800d17a:	4603      	mov	r3, r0
 800d17c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d17e:	79fb      	ldrb	r3, [r7, #7]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d109      	bne.n	800d198 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d188:	4806      	ldr	r0, [pc, #24]	; (800d1a4 <BSP_SD_Init+0x48>)
 800d18a:	f7fb fb89 	bl	80088a0 <HAL_SD_ConfigWideBusOperation>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d198:	79fb      	ldrb	r3, [r7, #7]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20000500 	.word	0x20000500

0800d1a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	68f9      	ldr	r1, [r7, #12]
 800d1be:	4806      	ldr	r0, [pc, #24]	; (800d1d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d1c0:	f7fa fe46 	bl	8007e50 <HAL_SD_ReadBlocks_DMA>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	20000500 	.word	0x20000500

0800d1dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	68f9      	ldr	r1, [r7, #12]
 800d1f2:	4806      	ldr	r0, [pc, #24]	; (800d20c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d1f4:	f7fa ff0e 	bl	8008014 <HAL_SD_WriteBlocks_DMA>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d202:	7dfb      	ldrb	r3, [r7, #23]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	20000500 	.word	0x20000500

0800d210 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d214:	4805      	ldr	r0, [pc, #20]	; (800d22c <BSP_SD_GetCardState+0x1c>)
 800d216:	f7fb fbdd 	bl	80089d4 <HAL_SD_GetCardState>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	bf14      	ite	ne
 800d220:	2301      	movne	r3, #1
 800d222:	2300      	moveq	r3, #0
 800d224:	b2db      	uxtb	r3, r3
}
 800d226:	4618      	mov	r0, r3
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20000500 	.word	0x20000500

0800d230 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d238:	6879      	ldr	r1, [r7, #4]
 800d23a:	4803      	ldr	r0, [pc, #12]	; (800d248 <BSP_SD_GetCardInfo+0x18>)
 800d23c:	f7fb fb04 	bl	8008848 <HAL_SD_GetCardInfo>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	20000500 	.word	0x20000500

0800d24c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d254:	f000 f818 	bl	800d288 <BSP_SD_AbortCallback>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d268:	f000 f9a8 	bl	800d5bc <BSP_SD_WriteCpltCallback>
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d27c:	f000 f9aa 	bl	800d5d4 <BSP_SD_ReadCpltCallback>
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d288:	b480      	push	{r7}
 800d28a:	af00      	add	r7, sp, #0

}
 800d28c:	bf00      	nop
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d29c:	2301      	movs	r3, #1
 800d29e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d2a0:	f000 f80c 	bl	800d2bc <BSP_PlatformIsDetected>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d2ae:	79fb      	ldrb	r3, [r7, #7]
 800d2b0:	b2db      	uxtb	r3, r3
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d2c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d2ca:	4806      	ldr	r0, [pc, #24]	; (800d2e4 <BSP_PlatformIsDetected+0x28>)
 800d2cc:	f7f7 fe44 	bl	8004f58 <HAL_GPIO_ReadPin>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d2da:	79fb      	ldrb	r3, [r7, #7]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	40020400 	.word	0x40020400

0800d2e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d2f0:	f7f6 ffb6 	bl	8004260 <HAL_GetTick>
 800d2f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d2f6:	e006      	b.n	800d306 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d2f8:	f7ff ff8a 	bl	800d210 <BSP_SD_GetCardState>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d101      	bne.n	800d306 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d302:	2300      	movs	r3, #0
 800d304:	e009      	b.n	800d31a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d306:	f7f6 ffab 	bl	8004260 <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	429a      	cmp	r2, r3
 800d314:	d8f0      	bhi.n	800d2f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	4603      	mov	r3, r0
 800d32c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d32e:	4b0b      	ldr	r3, [pc, #44]	; (800d35c <SD_CheckStatus+0x38>)
 800d330:	2201      	movs	r2, #1
 800d332:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d334:	f7ff ff6c 	bl	800d210 <BSP_SD_GetCardState>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d107      	bne.n	800d34e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d33e:	4b07      	ldr	r3, [pc, #28]	; (800d35c <SD_CheckStatus+0x38>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	b2db      	uxtb	r3, r3
 800d344:	f023 0301 	bic.w	r3, r3, #1
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	4b04      	ldr	r3, [pc, #16]	; (800d35c <SD_CheckStatus+0x38>)
 800d34c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d34e:	4b03      	ldr	r3, [pc, #12]	; (800d35c <SD_CheckStatus+0x38>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	b2db      	uxtb	r3, r3
}
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	200001b9 	.word	0x200001b9

0800d360 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d36a:	f7ff fef7 	bl	800d15c <BSP_SD_Init>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d107      	bne.n	800d384 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff ffd4 	bl	800d324 <SD_CheckStatus>
 800d37c:	4603      	mov	r3, r0
 800d37e:	461a      	mov	r2, r3
 800d380:	4b04      	ldr	r3, [pc, #16]	; (800d394 <SD_initialize+0x34>)
 800d382:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d384:	4b03      	ldr	r3, [pc, #12]	; (800d394 <SD_initialize+0x34>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	b2db      	uxtb	r3, r3
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	200001b9 	.word	0x200001b9

0800d398 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff ffbd 	bl	800d324 <SD_CheckStatus>
 800d3aa:	4603      	mov	r3, r0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	607a      	str	r2, [r7, #4]
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d3c8:	f247 5030 	movw	r0, #30000	; 0x7530
 800d3cc:	f7ff ff8c 	bl	800d2e8 <SD_CheckStatusWithTimeout>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	da01      	bge.n	800d3da <SD_read+0x26>
  {
    return res;
 800d3d6:	7dfb      	ldrb	r3, [r7, #23]
 800d3d8:	e03b      	b.n	800d452 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	68b8      	ldr	r0, [r7, #8]
 800d3e0:	f7ff fee2 	bl	800d1a8 <BSP_SD_ReadBlocks_DMA>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d132      	bne.n	800d450 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d3ea:	4b1c      	ldr	r3, [pc, #112]	; (800d45c <SD_read+0xa8>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d3f0:	f7f6 ff36 	bl	8004260 <HAL_GetTick>
 800d3f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d3f6:	bf00      	nop
 800d3f8:	4b18      	ldr	r3, [pc, #96]	; (800d45c <SD_read+0xa8>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d108      	bne.n	800d412 <SD_read+0x5e>
 800d400:	f7f6 ff2e 	bl	8004260 <HAL_GetTick>
 800d404:	4602      	mov	r2, r0
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d40e:	4293      	cmp	r3, r2
 800d410:	d9f2      	bls.n	800d3f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <SD_read+0xa8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]
 800d41e:	e017      	b.n	800d450 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d420:	4b0e      	ldr	r3, [pc, #56]	; (800d45c <SD_read+0xa8>)
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d426:	f7f6 ff1b 	bl	8004260 <HAL_GetTick>
 800d42a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d42c:	e007      	b.n	800d43e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d42e:	f7ff feef 	bl	800d210 <BSP_SD_GetCardState>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d102      	bne.n	800d43e <SD_read+0x8a>
          {
            res = RES_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d43c:	e008      	b.n	800d450 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d43e:	f7f6 ff0f 	bl	8004260 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	f247 522f 	movw	r2, #29999	; 0x752f
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d9ee      	bls.n	800d42e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	200008b4 	.word	0x200008b4

0800d460 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	60b9      	str	r1, [r7, #8]
 800d468:	607a      	str	r2, [r7, #4]
 800d46a:	603b      	str	r3, [r7, #0]
 800d46c:	4603      	mov	r3, r0
 800d46e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d474:	4b24      	ldr	r3, [pc, #144]	; (800d508 <SD_write+0xa8>)
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d47a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d47e:	f7ff ff33 	bl	800d2e8 <SD_CheckStatusWithTimeout>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	da01      	bge.n	800d48c <SD_write+0x2c>
  {
    return res;
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	e038      	b.n	800d4fe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	68b8      	ldr	r0, [r7, #8]
 800d492:	f7ff fea3 	bl	800d1dc <BSP_SD_WriteBlocks_DMA>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d12f      	bne.n	800d4fc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d49c:	f7f6 fee0 	bl	8004260 <HAL_GetTick>
 800d4a0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d4a2:	bf00      	nop
 800d4a4:	4b18      	ldr	r3, [pc, #96]	; (800d508 <SD_write+0xa8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d108      	bne.n	800d4be <SD_write+0x5e>
 800d4ac:	f7f6 fed8 	bl	8004260 <HAL_GetTick>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d9f2      	bls.n	800d4a4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d4be:	4b12      	ldr	r3, [pc, #72]	; (800d508 <SD_write+0xa8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d102      	bne.n	800d4cc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	75fb      	strb	r3, [r7, #23]
 800d4ca:	e017      	b.n	800d4fc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d4cc:	4b0e      	ldr	r3, [pc, #56]	; (800d508 <SD_write+0xa8>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d4d2:	f7f6 fec5 	bl	8004260 <HAL_GetTick>
 800d4d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d4d8:	e007      	b.n	800d4ea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d4da:	f7ff fe99 	bl	800d210 <BSP_SD_GetCardState>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <SD_write+0x8a>
          {
            res = RES_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	75fb      	strb	r3, [r7, #23]
            break;
 800d4e8:	e008      	b.n	800d4fc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d4ea:	f7f6 feb9 	bl	8004260 <HAL_GetTick>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d9ee      	bls.n	800d4da <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	200008b0 	.word	0x200008b0

0800d50c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08c      	sub	sp, #48	; 0x30
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	603a      	str	r2, [r7, #0]
 800d516:	71fb      	strb	r3, [r7, #7]
 800d518:	460b      	mov	r3, r1
 800d51a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d522:	4b25      	ldr	r3, [pc, #148]	; (800d5b8 <SD_ioctl+0xac>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	b2db      	uxtb	r3, r3
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <SD_ioctl+0x28>
 800d530:	2303      	movs	r3, #3
 800d532:	e03c      	b.n	800d5ae <SD_ioctl+0xa2>

  switch (cmd)
 800d534:	79bb      	ldrb	r3, [r7, #6]
 800d536:	2b03      	cmp	r3, #3
 800d538:	d834      	bhi.n	800d5a4 <SD_ioctl+0x98>
 800d53a:	a201      	add	r2, pc, #4	; (adr r2, 800d540 <SD_ioctl+0x34>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d551 	.word	0x0800d551
 800d544:	0800d559 	.word	0x0800d559
 800d548:	0800d571 	.word	0x0800d571
 800d54c:	0800d58b 	.word	0x0800d58b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d556:	e028      	b.n	800d5aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d558:	f107 030c 	add.w	r3, r7, #12
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff fe67 	bl	800d230 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d568:	2300      	movs	r3, #0
 800d56a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d56e:	e01c      	b.n	800d5aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d570:	f107 030c 	add.w	r3, r7, #12
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fe5b 	bl	800d230 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d588:	e00f      	b.n	800d5aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d58a:	f107 030c 	add.w	r3, r7, #12
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff fe4e 	bl	800d230 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	0a5a      	lsrs	r2, r3, #9
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5a2:	e002      	b.n	800d5aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d5a4:	2304      	movs	r3, #4
 800d5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d5aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3730      	adds	r7, #48	; 0x30
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200001b9 	.word	0x200001b9

0800d5bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d5c0:	4b03      	ldr	r3, [pc, #12]	; (800d5d0 <BSP_SD_WriteCpltCallback+0x14>)
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	601a      	str	r2, [r3, #0]
}
 800d5c6:	bf00      	nop
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr
 800d5d0:	200008b0 	.word	0x200008b0

0800d5d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d5d8:	4b03      	ldr	r3, [pc, #12]	; (800d5e8 <BSP_SD_ReadCpltCallback+0x14>)
 800d5da:	2201      	movs	r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	200008b4 	.word	0x200008b4

0800d5ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d5f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d5fc:	f002 fc84 	bl	800ff08 <USBD_static_malloc>
 800d600:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d109      	bne.n	800d61c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	32b0      	adds	r2, #176	; 0xb0
 800d612:	2100      	movs	r1, #0
 800d614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d618:	2302      	movs	r3, #2
 800d61a:	e0d4      	b.n	800d7c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d61c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d620:	2100      	movs	r1, #0
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f003 fa0d 	bl	8010a42 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	32b0      	adds	r2, #176	; 0xb0
 800d632:	68f9      	ldr	r1, [r7, #12]
 800d634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	32b0      	adds	r2, #176	; 0xb0
 800d642:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7c1b      	ldrb	r3, [r3, #16]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d138      	bne.n	800d6c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d654:	4b5e      	ldr	r3, [pc, #376]	; (800d7d0 <USBD_CDC_Init+0x1e4>)
 800d656:	7819      	ldrb	r1, [r3, #0]
 800d658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d65c:	2202      	movs	r2, #2
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f002 fb2f 	bl	800fcc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d664:	4b5a      	ldr	r3, [pc, #360]	; (800d7d0 <USBD_CDC_Init+0x1e4>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	f003 020f 	and.w	r2, r3, #15
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	440b      	add	r3, r1
 800d678:	3324      	adds	r3, #36	; 0x24
 800d67a:	2201      	movs	r2, #1
 800d67c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d67e:	4b55      	ldr	r3, [pc, #340]	; (800d7d4 <USBD_CDC_Init+0x1e8>)
 800d680:	7819      	ldrb	r1, [r3, #0]
 800d682:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d686:	2202      	movs	r2, #2
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f002 fb1a 	bl	800fcc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d68e:	4b51      	ldr	r3, [pc, #324]	; (800d7d4 <USBD_CDC_Init+0x1e8>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	f003 020f 	and.w	r2, r3, #15
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	440b      	add	r3, r1
 800d6a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d6aa:	4b4b      	ldr	r3, [pc, #300]	; (800d7d8 <USBD_CDC_Init+0x1ec>)
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	f003 020f 	and.w	r2, r3, #15
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	440b      	add	r3, r1
 800d6be:	3326      	adds	r3, #38	; 0x26
 800d6c0:	2210      	movs	r2, #16
 800d6c2:	801a      	strh	r2, [r3, #0]
 800d6c4:	e035      	b.n	800d732 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d6c6:	4b42      	ldr	r3, [pc, #264]	; (800d7d0 <USBD_CDC_Init+0x1e4>)
 800d6c8:	7819      	ldrb	r1, [r3, #0]
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f002 faf7 	bl	800fcc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d6d4:	4b3e      	ldr	r3, [pc, #248]	; (800d7d0 <USBD_CDC_Init+0x1e4>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	f003 020f 	and.w	r2, r3, #15
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	440b      	add	r3, r1
 800d6e8:	3324      	adds	r3, #36	; 0x24
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d6ee:	4b39      	ldr	r3, [pc, #228]	; (800d7d4 <USBD_CDC_Init+0x1e8>)
 800d6f0:	7819      	ldrb	r1, [r3, #0]
 800d6f2:	2340      	movs	r3, #64	; 0x40
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f002 fae3 	bl	800fcc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d6fc:	4b35      	ldr	r3, [pc, #212]	; (800d7d4 <USBD_CDC_Init+0x1e8>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	f003 020f 	and.w	r2, r3, #15
 800d704:	6879      	ldr	r1, [r7, #4]
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	440b      	add	r3, r1
 800d710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d714:	2201      	movs	r2, #1
 800d716:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d718:	4b2f      	ldr	r3, [pc, #188]	; (800d7d8 <USBD_CDC_Init+0x1ec>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	f003 020f 	and.w	r2, r3, #15
 800d720:	6879      	ldr	r1, [r7, #4]
 800d722:	4613      	mov	r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4413      	add	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	440b      	add	r3, r1
 800d72c:	3326      	adds	r3, #38	; 0x26
 800d72e:	2210      	movs	r2, #16
 800d730:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d732:	4b29      	ldr	r3, [pc, #164]	; (800d7d8 <USBD_CDC_Init+0x1ec>)
 800d734:	7819      	ldrb	r1, [r3, #0]
 800d736:	2308      	movs	r3, #8
 800d738:	2203      	movs	r2, #3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f002 fac1 	bl	800fcc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d740:	4b25      	ldr	r3, [pc, #148]	; (800d7d8 <USBD_CDC_Init+0x1ec>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f003 020f 	and.w	r2, r3, #15
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	4613      	mov	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	4413      	add	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	440b      	add	r3, r1
 800d754:	3324      	adds	r3, #36	; 0x24
 800d756:	2201      	movs	r2, #1
 800d758:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	33b0      	adds	r3, #176	; 0xb0
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d790:	2302      	movs	r3, #2
 800d792:	e018      	b.n	800d7c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	7c1b      	ldrb	r3, [r3, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10a      	bne.n	800d7b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d79c:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <USBD_CDC_Init+0x1e8>)
 800d79e:	7819      	ldrb	r1, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d7a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f002 fb78 	bl	800fea0 <USBD_LL_PrepareReceive>
 800d7b0:	e008      	b.n	800d7c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d7b2:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <USBD_CDC_Init+0x1e8>)
 800d7b4:	7819      	ldrb	r1, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d7bc:	2340      	movs	r3, #64	; 0x40
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f002 fb6e 	bl	800fea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20000243 	.word	0x20000243
 800d7d4:	20000244 	.word	0x20000244
 800d7d8:	20000245 	.word	0x20000245

0800d7dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d7e8:	4b3a      	ldr	r3, [pc, #232]	; (800d8d4 <USBD_CDC_DeInit+0xf8>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f002 fa8d 	bl	800fd0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d7f4:	4b37      	ldr	r3, [pc, #220]	; (800d8d4 <USBD_CDC_DeInit+0xf8>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f003 020f 	and.w	r2, r3, #15
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	3324      	adds	r3, #36	; 0x24
 800d80a:	2200      	movs	r2, #0
 800d80c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d80e:	4b32      	ldr	r3, [pc, #200]	; (800d8d8 <USBD_CDC_DeInit+0xfc>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	4619      	mov	r1, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f002 fa7a 	bl	800fd0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d81a:	4b2f      	ldr	r3, [pc, #188]	; (800d8d8 <USBD_CDC_DeInit+0xfc>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	f003 020f 	and.w	r2, r3, #15
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	440b      	add	r3, r1
 800d82e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d832:	2200      	movs	r2, #0
 800d834:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d836:	4b29      	ldr	r3, [pc, #164]	; (800d8dc <USBD_CDC_DeInit+0x100>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f002 fa66 	bl	800fd0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d842:	4b26      	ldr	r3, [pc, #152]	; (800d8dc <USBD_CDC_DeInit+0x100>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	f003 020f 	and.w	r2, r3, #15
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	440b      	add	r3, r1
 800d856:	3324      	adds	r3, #36	; 0x24
 800d858:	2200      	movs	r2, #0
 800d85a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d85c:	4b1f      	ldr	r3, [pc, #124]	; (800d8dc <USBD_CDC_DeInit+0x100>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	f003 020f 	and.w	r2, r3, #15
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	4613      	mov	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	440b      	add	r3, r1
 800d870:	3326      	adds	r3, #38	; 0x26
 800d872:	2200      	movs	r2, #0
 800d874:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	32b0      	adds	r2, #176	; 0xb0
 800d880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01f      	beq.n	800d8c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	33b0      	adds	r3, #176	; 0xb0
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4413      	add	r3, r2
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	32b0      	adds	r2, #176	; 0xb0
 800d8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f002 fb3a 	bl	800ff24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	32b0      	adds	r2, #176	; 0xb0
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20000243 	.word	0x20000243
 800d8d8:	20000244 	.word	0x20000244
 800d8dc:	20000245 	.word	0x20000245

0800d8e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b086      	sub	sp, #24
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	32b0      	adds	r2, #176	; 0xb0
 800d8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d8fe:	2300      	movs	r3, #0
 800d900:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d90c:	2303      	movs	r3, #3
 800d90e:	e0bf      	b.n	800da90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d050      	beq.n	800d9be <USBD_CDC_Setup+0xde>
 800d91c:	2b20      	cmp	r3, #32
 800d91e:	f040 80af 	bne.w	800da80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	88db      	ldrh	r3, [r3, #6]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d03a      	beq.n	800d9a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	b25b      	sxtb	r3, r3
 800d930:	2b00      	cmp	r3, #0
 800d932:	da1b      	bge.n	800d96c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	33b0      	adds	r3, #176	; 0xb0
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	4413      	add	r3, r2
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d94a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	88d2      	ldrh	r2, [r2, #6]
 800d950:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	88db      	ldrh	r3, [r3, #6]
 800d956:	2b07      	cmp	r3, #7
 800d958:	bf28      	it	cs
 800d95a:	2307      	movcs	r3, #7
 800d95c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	89fa      	ldrh	r2, [r7, #14]
 800d962:	4619      	mov	r1, r3
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f001 fd43 	bl	800f3f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d96a:	e090      	b.n	800da8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	785a      	ldrb	r2, [r3, #1]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	88db      	ldrh	r3, [r3, #6]
 800d97a:	2b3f      	cmp	r3, #63	; 0x3f
 800d97c:	d803      	bhi.n	800d986 <USBD_CDC_Setup+0xa6>
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	88db      	ldrh	r3, [r3, #6]
 800d982:	b2da      	uxtb	r2, r3
 800d984:	e000      	b.n	800d988 <USBD_CDC_Setup+0xa8>
 800d986:	2240      	movs	r2, #64	; 0x40
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d98e:	6939      	ldr	r1, [r7, #16]
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d996:	461a      	mov	r2, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 fd55 	bl	800f448 <USBD_CtlPrepareRx>
      break;
 800d99e:	e076      	b.n	800da8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	33b0      	adds	r3, #176	; 0xb0
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	7850      	ldrb	r0, [r2, #1]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	6839      	ldr	r1, [r7, #0]
 800d9ba:	4798      	blx	r3
      break;
 800d9bc:	e067      	b.n	800da8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	785b      	ldrb	r3, [r3, #1]
 800d9c2:	2b0b      	cmp	r3, #11
 800d9c4:	d851      	bhi.n	800da6a <USBD_CDC_Setup+0x18a>
 800d9c6:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <USBD_CDC_Setup+0xec>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800d9fd 	.word	0x0800d9fd
 800d9d0:	0800da79 	.word	0x0800da79
 800d9d4:	0800da6b 	.word	0x0800da6b
 800d9d8:	0800da6b 	.word	0x0800da6b
 800d9dc:	0800da6b 	.word	0x0800da6b
 800d9e0:	0800da6b 	.word	0x0800da6b
 800d9e4:	0800da6b 	.word	0x0800da6b
 800d9e8:	0800da6b 	.word	0x0800da6b
 800d9ec:	0800da6b 	.word	0x0800da6b
 800d9f0:	0800da6b 	.word	0x0800da6b
 800d9f4:	0800da27 	.word	0x0800da27
 800d9f8:	0800da51 	.word	0x0800da51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da02:	b2db      	uxtb	r3, r3
 800da04:	2b03      	cmp	r3, #3
 800da06:	d107      	bne.n	800da18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800da08:	f107 030a 	add.w	r3, r7, #10
 800da0c:	2202      	movs	r2, #2
 800da0e:	4619      	mov	r1, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f001 fced 	bl	800f3f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da16:	e032      	b.n	800da7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f001 fc77 	bl	800f30e <USBD_CtlError>
            ret = USBD_FAIL;
 800da20:	2303      	movs	r3, #3
 800da22:	75fb      	strb	r3, [r7, #23]
          break;
 800da24:	e02b      	b.n	800da7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	2b03      	cmp	r3, #3
 800da30:	d107      	bne.n	800da42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800da32:	f107 030d 	add.w	r3, r7, #13
 800da36:	2201      	movs	r2, #1
 800da38:	4619      	mov	r1, r3
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f001 fcd8 	bl	800f3f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da40:	e01d      	b.n	800da7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f001 fc62 	bl	800f30e <USBD_CtlError>
            ret = USBD_FAIL;
 800da4a:	2303      	movs	r3, #3
 800da4c:	75fb      	strb	r3, [r7, #23]
          break;
 800da4e:	e016      	b.n	800da7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da56:	b2db      	uxtb	r3, r3
 800da58:	2b03      	cmp	r3, #3
 800da5a:	d00f      	beq.n	800da7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800da5c:	6839      	ldr	r1, [r7, #0]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f001 fc55 	bl	800f30e <USBD_CtlError>
            ret = USBD_FAIL;
 800da64:	2303      	movs	r3, #3
 800da66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800da68:	e008      	b.n	800da7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f001 fc4e 	bl	800f30e <USBD_CtlError>
          ret = USBD_FAIL;
 800da72:	2303      	movs	r3, #3
 800da74:	75fb      	strb	r3, [r7, #23]
          break;
 800da76:	e002      	b.n	800da7e <USBD_CDC_Setup+0x19e>
          break;
 800da78:	bf00      	nop
 800da7a:	e008      	b.n	800da8e <USBD_CDC_Setup+0x1ae>
          break;
 800da7c:	bf00      	nop
      }
      break;
 800da7e:	e006      	b.n	800da8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f001 fc43 	bl	800f30e <USBD_CtlError>
      ret = USBD_FAIL;
 800da88:	2303      	movs	r3, #3
 800da8a:	75fb      	strb	r3, [r7, #23]
      break;
 800da8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800da8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800daaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	32b0      	adds	r2, #176	; 0xb0
 800dab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dabe:	2303      	movs	r3, #3
 800dac0:	e065      	b.n	800db8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	32b0      	adds	r2, #176	; 0xb0
 800dacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	f003 020f 	and.w	r2, r3, #15
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	440b      	add	r3, r1
 800dae4:	3318      	adds	r3, #24
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d02f      	beq.n	800db4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800daec:	78fb      	ldrb	r3, [r7, #3]
 800daee:	f003 020f 	and.w	r2, r3, #15
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	4613      	mov	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	440b      	add	r3, r1
 800dafe:	3318      	adds	r3, #24
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	f003 010f 	and.w	r1, r3, #15
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	460b      	mov	r3, r1
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	440b      	add	r3, r1
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4403      	add	r3, r0
 800db14:	3348      	adds	r3, #72	; 0x48
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	fbb2 f1f3 	udiv	r1, r2, r3
 800db1c:	fb01 f303 	mul.w	r3, r1, r3
 800db20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800db22:	2b00      	cmp	r3, #0
 800db24:	d112      	bne.n	800db4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800db26:	78fb      	ldrb	r3, [r7, #3]
 800db28:	f003 020f 	and.w	r2, r3, #15
 800db2c:	6879      	ldr	r1, [r7, #4]
 800db2e:	4613      	mov	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	440b      	add	r3, r1
 800db38:	3318      	adds	r3, #24
 800db3a:	2200      	movs	r2, #0
 800db3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800db3e:	78f9      	ldrb	r1, [r7, #3]
 800db40:	2300      	movs	r3, #0
 800db42:	2200      	movs	r2, #0
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f002 f98a 	bl	800fe5e <USBD_LL_Transmit>
 800db4a:	e01f      	b.n	800db8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2200      	movs	r2, #0
 800db50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	33b0      	adds	r3, #176	; 0xb0
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d010      	beq.n	800db8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	33b0      	adds	r3, #176	; 0xb0
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800db88:	78fa      	ldrb	r2, [r7, #3]
 800db8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b084      	sub	sp, #16
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	32b0      	adds	r2, #176	; 0xb0
 800dbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	32b0      	adds	r2, #176	; 0xb0
 800dbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	e01a      	b.n	800dbfe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f002 f988 	bl	800fee2 <USBD_LL_GetRxDataSize>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	33b0      	adds	r3, #176	; 0xb0
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4413      	add	r3, r2
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	32b0      	adds	r2, #176	; 0xb0
 800dc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e025      	b.n	800dc74 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	33b0      	adds	r3, #176	; 0xb0
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4413      	add	r3, r2
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01a      	beq.n	800dc72 <USBD_CDC_EP0_RxReady+0x6c>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dc42:	2bff      	cmp	r3, #255	; 0xff
 800dc44:	d015      	beq.n	800dc72 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	33b0      	adds	r3, #176	; 0xb0
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800dc5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dc66:	b292      	uxth	r2, r2
 800dc68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	22ff      	movs	r2, #255	; 0xff
 800dc6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc84:	2182      	movs	r1, #130	; 0x82
 800dc86:	4818      	ldr	r0, [pc, #96]	; (800dce8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc88:	f000 fd09 	bl	800e69e <USBD_GetEpDesc>
 800dc8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc8e:	2101      	movs	r1, #1
 800dc90:	4815      	ldr	r0, [pc, #84]	; (800dce8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc92:	f000 fd04 	bl	800e69e <USBD_GetEpDesc>
 800dc96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc98:	2181      	movs	r1, #129	; 0x81
 800dc9a:	4813      	ldr	r0, [pc, #76]	; (800dce8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc9c:	f000 fcff 	bl	800e69e <USBD_GetEpDesc>
 800dca0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	2210      	movs	r2, #16
 800dcac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d006      	beq.n	800dcc2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcbc:	711a      	strb	r2, [r3, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d006      	beq.n	800dcd6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcd0:	711a      	strb	r2, [r3, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2243      	movs	r2, #67	; 0x43
 800dcda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dcdc:	4b02      	ldr	r3, [pc, #8]	; (800dce8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20000200 	.word	0x20000200

0800dcec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dcf4:	2182      	movs	r1, #130	; 0x82
 800dcf6:	4818      	ldr	r0, [pc, #96]	; (800dd58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dcf8:	f000 fcd1 	bl	800e69e <USBD_GetEpDesc>
 800dcfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dcfe:	2101      	movs	r1, #1
 800dd00:	4815      	ldr	r0, [pc, #84]	; (800dd58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dd02:	f000 fccc 	bl	800e69e <USBD_GetEpDesc>
 800dd06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dd08:	2181      	movs	r1, #129	; 0x81
 800dd0a:	4813      	ldr	r0, [pc, #76]	; (800dd58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dd0c:	f000 fcc7 	bl	800e69e <USBD_GetEpDesc>
 800dd10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2210      	movs	r2, #16
 800dd1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d006      	beq.n	800dd32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2200      	movs	r2, #0
 800dd28:	711a      	strb	r2, [r3, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f042 0202 	orr.w	r2, r2, #2
 800dd30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d006      	beq.n	800dd46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	711a      	strb	r2, [r3, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f042 0202 	orr.w	r2, r2, #2
 800dd44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2243      	movs	r2, #67	; 0x43
 800dd4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dd4c:	4b02      	ldr	r3, [pc, #8]	; (800dd58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20000200 	.word	0x20000200

0800dd5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dd64:	2182      	movs	r1, #130	; 0x82
 800dd66:	4818      	ldr	r0, [pc, #96]	; (800ddc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dd68:	f000 fc99 	bl	800e69e <USBD_GetEpDesc>
 800dd6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dd6e:	2101      	movs	r1, #1
 800dd70:	4815      	ldr	r0, [pc, #84]	; (800ddc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dd72:	f000 fc94 	bl	800e69e <USBD_GetEpDesc>
 800dd76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dd78:	2181      	movs	r1, #129	; 0x81
 800dd7a:	4813      	ldr	r0, [pc, #76]	; (800ddc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dd7c:	f000 fc8f 	bl	800e69e <USBD_GetEpDesc>
 800dd80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2210      	movs	r2, #16
 800dd8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d006      	beq.n	800dda2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd9c:	711a      	strb	r2, [r3, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d006      	beq.n	800ddb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddb0:	711a      	strb	r2, [r3, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2243      	movs	r2, #67	; 0x43
 800ddba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ddbc:	4b02      	ldr	r3, [pc, #8]	; (800ddc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3718      	adds	r7, #24
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000200 	.word	0x20000200

0800ddcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	220a      	movs	r2, #10
 800ddd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ddda:	4b03      	ldr	r3, [pc, #12]	; (800dde8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	200001bc 	.word	0x200001bc

0800ddec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e009      	b.n	800de14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	33b0      	adds	r3, #176	; 0xb0
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	32b0      	adds	r2, #176	; 0xb0
 800de36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800de42:	2303      	movs	r3, #3
 800de44:	e008      	b.n	800de58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	32b0      	adds	r2, #176	; 0xb0
 800de78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800de84:	2303      	movs	r3, #3
 800de86:	e004      	b.n	800de92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
	...

0800dea0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	32b0      	adds	r2, #176	; 0xb0
 800deb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	32b0      	adds	r2, #176	; 0xb0
 800dec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800deca:	2303      	movs	r3, #3
 800decc:	e018      	b.n	800df00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	7c1b      	ldrb	r3, [r3, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10a      	bne.n	800deec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ded6:	4b0c      	ldr	r3, [pc, #48]	; (800df08 <USBD_CDC_ReceivePacket+0x68>)
 800ded8:	7819      	ldrb	r1, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 ffdb 	bl	800fea0 <USBD_LL_PrepareReceive>
 800deea:	e008      	b.n	800defe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800deec:	4b06      	ldr	r3, [pc, #24]	; (800df08 <USBD_CDC_ReceivePacket+0x68>)
 800deee:	7819      	ldrb	r1, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800def6:	2340      	movs	r3, #64	; 0x40
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f001 ffd1 	bl	800fea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	20000244 	.word	0x20000244

0800df0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4613      	mov	r3, r2
 800df18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d101      	bne.n	800df24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800df20:	2303      	movs	r3, #3
 800df22:	e01f      	b.n	800df64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2200      	movs	r2, #0
 800df30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2201      	movs	r2, #1
 800df4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	79fa      	ldrb	r2, [r7, #7]
 800df56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f001 fe4b 	bl	800fbf4 <USBD_LL_Init>
 800df5e:	4603      	mov	r3, r0
 800df60:	75fb      	strb	r3, [r7, #23]

  return ret;
 800df62:	7dfb      	ldrb	r3, [r7, #23]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3718      	adds	r7, #24
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df76:	2300      	movs	r3, #0
 800df78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800df80:	2303      	movs	r3, #3
 800df82:	e025      	b.n	800dfd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	683a      	ldr	r2, [r7, #0]
 800df88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	32ae      	adds	r2, #174	; 0xae
 800df96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00f      	beq.n	800dfc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	32ae      	adds	r2, #174	; 0xae
 800dfaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	f107 020e 	add.w	r2, r7, #14
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	4798      	blx	r3
 800dfb8:	4602      	mov	r2, r0
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dfc6:	1c5a      	adds	r2, r3, #1
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f001 fe53 	bl	800fc8c <USBD_LL_Start>
 800dfe6:	4603      	mov	r3, r0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dff8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	460b      	mov	r3, r1
 800e010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e012:	2300      	movs	r3, #0
 800e014:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d009      	beq.n	800e034 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	4611      	mov	r1, r2
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	4798      	blx	r3
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e034:	7bfb      	ldrb	r3, [r7, #15]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b084      	sub	sp, #16
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	460b      	mov	r3, r1
 800e048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e04a:	2300      	movs	r3, #0
 800e04c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	78fa      	ldrb	r2, [r7, #3]
 800e058:	4611      	mov	r1, r2
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	4798      	blx	r3
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e064:	2303      	movs	r3, #3
 800e066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f001 f908 	bl	800f29a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e098:	461a      	mov	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0a6:	f003 031f 	and.w	r3, r3, #31
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d01a      	beq.n	800e0e4 <USBD_LL_SetupStage+0x72>
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d822      	bhi.n	800e0f8 <USBD_LL_SetupStage+0x86>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d002      	beq.n	800e0bc <USBD_LL_SetupStage+0x4a>
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d00a      	beq.n	800e0d0 <USBD_LL_SetupStage+0x5e>
 800e0ba:	e01d      	b.n	800e0f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fb5f 	bl	800e788 <USBD_StdDevReq>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ce:	e020      	b.n	800e112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fbc7 	bl	800e86c <USBD_StdItfReq>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e0e2:	e016      	b.n	800e112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 fc29 	bl	800e944 <USBD_StdEPReq>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e0f6:	e00c      	b.n	800e112 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e102:	b2db      	uxtb	r3, r3
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f001 fe20 	bl	800fd4c <USBD_LL_StallEP>
 800e10c:	4603      	mov	r3, r0
 800e10e:	73fb      	strb	r3, [r7, #15]
      break;
 800e110:	bf00      	nop
  }

  return ret;
 800e112:	7bfb      	ldrb	r3, [r7, #15]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b086      	sub	sp, #24
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	460b      	mov	r3, r1
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e12a:	2300      	movs	r3, #0
 800e12c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e12e:	7afb      	ldrb	r3, [r7, #11]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d16e      	bne.n	800e212 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e13a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e142:	2b03      	cmp	r3, #3
 800e144:	f040 8098 	bne.w	800e278 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	689a      	ldr	r2, [r3, #8]
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	429a      	cmp	r2, r3
 800e152:	d913      	bls.n	800e17c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	689a      	ldr	r2, [r3, #8]
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	1ad2      	subs	r2, r2, r3
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	4293      	cmp	r3, r2
 800e16c:	bf28      	it	cs
 800e16e:	4613      	movcs	r3, r2
 800e170:	461a      	mov	r2, r3
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f001 f984 	bl	800f482 <USBD_CtlContinueRx>
 800e17a:	e07d      	b.n	800e278 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e182:	f003 031f 	and.w	r3, r3, #31
 800e186:	2b02      	cmp	r3, #2
 800e188:	d014      	beq.n	800e1b4 <USBD_LL_DataOutStage+0x98>
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	d81d      	bhi.n	800e1ca <USBD_LL_DataOutStage+0xae>
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d002      	beq.n	800e198 <USBD_LL_DataOutStage+0x7c>
 800e192:	2b01      	cmp	r3, #1
 800e194:	d003      	beq.n	800e19e <USBD_LL_DataOutStage+0x82>
 800e196:	e018      	b.n	800e1ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e198:	2300      	movs	r3, #0
 800e19a:	75bb      	strb	r3, [r7, #22]
            break;
 800e19c:	e018      	b.n	800e1d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f000 fa5e 	bl	800e66a <USBD_CoreFindIF>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	75bb      	strb	r3, [r7, #22]
            break;
 800e1b2:	e00d      	b.n	800e1d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	4619      	mov	r1, r3
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 fa60 	bl	800e684 <USBD_CoreFindEP>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	75bb      	strb	r3, [r7, #22]
            break;
 800e1c8:	e002      	b.n	800e1d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	75bb      	strb	r3, [r7, #22]
            break;
 800e1ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e1d0:	7dbb      	ldrb	r3, [r7, #22]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d119      	bne.n	800e20a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b03      	cmp	r3, #3
 800e1e0:	d113      	bne.n	800e20a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e1e2:	7dba      	ldrb	r2, [r7, #22]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	32ae      	adds	r2, #174	; 0xae
 800e1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00b      	beq.n	800e20a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e1f2:	7dba      	ldrb	r2, [r7, #22]
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e1fa:	7dba      	ldrb	r2, [r7, #22]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	32ae      	adds	r2, #174	; 0xae
 800e200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f001 f94a 	bl	800f4a4 <USBD_CtlSendStatus>
 800e210:	e032      	b.n	800e278 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e212:	7afb      	ldrb	r3, [r7, #11]
 800e214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	4619      	mov	r1, r3
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f000 fa31 	bl	800e684 <USBD_CoreFindEP>
 800e222:	4603      	mov	r3, r0
 800e224:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e226:	7dbb      	ldrb	r3, [r7, #22]
 800e228:	2bff      	cmp	r3, #255	; 0xff
 800e22a:	d025      	beq.n	800e278 <USBD_LL_DataOutStage+0x15c>
 800e22c:	7dbb      	ldrb	r3, [r7, #22]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d122      	bne.n	800e278 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d117      	bne.n	800e26e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e23e:	7dba      	ldrb	r2, [r7, #22]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	32ae      	adds	r2, #174	; 0xae
 800e244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00f      	beq.n	800e26e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e24e:	7dba      	ldrb	r2, [r7, #22]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e256:	7dba      	ldrb	r2, [r7, #22]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	32ae      	adds	r2, #174	; 0xae
 800e25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	7afa      	ldrb	r2, [r7, #11]
 800e264:	4611      	mov	r1, r2
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	4798      	blx	r3
 800e26a:	4603      	mov	r3, r0
 800e26c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e26e:	7dfb      	ldrb	r3, [r7, #23]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d001      	beq.n	800e278 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e274:	7dfb      	ldrb	r3, [r7, #23]
 800e276:	e000      	b.n	800e27a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b086      	sub	sp, #24
 800e286:	af00      	add	r7, sp, #0
 800e288:	60f8      	str	r0, [r7, #12]
 800e28a:	460b      	mov	r3, r1
 800e28c:	607a      	str	r2, [r7, #4]
 800e28e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e290:	7afb      	ldrb	r3, [r7, #11]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d16f      	bne.n	800e376 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3314      	adds	r3, #20
 800e29a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d15a      	bne.n	800e35c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	689a      	ldr	r2, [r3, #8]
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d914      	bls.n	800e2dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	689a      	ldr	r2, [r3, #8]
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	1ad2      	subs	r2, r2, r3
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f001 f8ac 	bl	800f426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f001 fde3 	bl	800fea0 <USBD_LL_PrepareReceive>
 800e2da:	e03f      	b.n	800e35c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	68da      	ldr	r2, [r3, #12]
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	689b      	ldr	r3, [r3, #8]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d11c      	bne.n	800e322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	685a      	ldr	r2, [r3, #4]
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d316      	bcc.n	800e322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	685a      	ldr	r2, [r3, #4]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d20f      	bcs.n	800e322 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e302:	2200      	movs	r2, #0
 800e304:	2100      	movs	r1, #0
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f001 f88d 	bl	800f426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2200      	movs	r2, #0
 800e310:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e314:	2300      	movs	r3, #0
 800e316:	2200      	movs	r2, #0
 800e318:	2100      	movs	r1, #0
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f001 fdc0 	bl	800fea0 <USBD_LL_PrepareReceive>
 800e320:	e01c      	b.n	800e35c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d10f      	bne.n	800e34e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d009      	beq.n	800e34e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e34e:	2180      	movs	r1, #128	; 0x80
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f001 fcfb 	bl	800fd4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f001 f8b7 	bl	800f4ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d03a      	beq.n	800e3dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f7ff fe42 	bl	800dff0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2200      	movs	r2, #0
 800e370:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e374:	e032      	b.n	800e3dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e376:	7afb      	ldrb	r3, [r7, #11]
 800e378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	4619      	mov	r1, r3
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f97f 	bl	800e684 <USBD_CoreFindEP>
 800e386:	4603      	mov	r3, r0
 800e388:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e38a:	7dfb      	ldrb	r3, [r7, #23]
 800e38c:	2bff      	cmp	r3, #255	; 0xff
 800e38e:	d025      	beq.n	800e3dc <USBD_LL_DataInStage+0x15a>
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d122      	bne.n	800e3dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d11c      	bne.n	800e3dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e3a2:	7dfa      	ldrb	r2, [r7, #23]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	32ae      	adds	r2, #174	; 0xae
 800e3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d014      	beq.n	800e3dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e3b2:	7dfa      	ldrb	r2, [r7, #23]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e3ba:	7dfa      	ldrb	r2, [r7, #23]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	32ae      	adds	r2, #174	; 0xae
 800e3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3c4:	695b      	ldr	r3, [r3, #20]
 800e3c6:	7afa      	ldrb	r2, [r7, #11]
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	4798      	blx	r3
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e3d2:	7dbb      	ldrb	r3, [r7, #22]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e3d8:	7dbb      	ldrb	r3, [r7, #22]
 800e3da:	e000      	b.n	800e3de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3718      	adds	r7, #24
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b084      	sub	sp, #16
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d014      	beq.n	800e44c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00e      	beq.n	800e44c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	6852      	ldr	r2, [r2, #4]
 800e43a:	b2d2      	uxtb	r2, r2
 800e43c:	4611      	mov	r1, r2
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e448:	2303      	movs	r3, #3
 800e44a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e44c:	2340      	movs	r3, #64	; 0x40
 800e44e:	2200      	movs	r2, #0
 800e450:	2100      	movs	r1, #0
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f001 fc35 	bl	800fcc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2201      	movs	r2, #1
 800e45c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2240      	movs	r2, #64	; 0x40
 800e464:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e468:	2340      	movs	r3, #64	; 0x40
 800e46a:	2200      	movs	r2, #0
 800e46c:	2180      	movs	r1, #128	; 0x80
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f001 fc27 	bl	800fcc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2240      	movs	r2, #64	; 0x40
 800e47e:	621a      	str	r2, [r3, #32]

  return ret;
 800e480:	7bfb      	ldrb	r3, [r7, #15]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	460b      	mov	r3, r1
 800e494:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	78fa      	ldrb	r2, [r7, #3]
 800e49a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	370c      	adds	r7, #12
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b083      	sub	sp, #12
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b083      	sub	sp, #12
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d106      	bne.n	800e4f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b03      	cmp	r3, #3
 800e518:	d110      	bne.n	800e53c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00b      	beq.n	800e53c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e52a:	69db      	ldr	r3, [r3, #28]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b082      	sub	sp, #8
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	460b      	mov	r3, r1
 800e550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	32ae      	adds	r2, #174	; 0xae
 800e55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e564:	2303      	movs	r3, #3
 800e566:	e01c      	b.n	800e5a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	2b03      	cmp	r3, #3
 800e572:	d115      	bne.n	800e5a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	32ae      	adds	r2, #174	; 0xae
 800e57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e582:	6a1b      	ldr	r3, [r3, #32]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00b      	beq.n	800e5a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	32ae      	adds	r2, #174	; 0xae
 800e592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	78fa      	ldrb	r2, [r7, #3]
 800e59a:	4611      	mov	r1, r2
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	32ae      	adds	r2, #174	; 0xae
 800e5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d101      	bne.n	800e5cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	e01c      	b.n	800e606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	2b03      	cmp	r3, #3
 800e5d6:	d115      	bne.n	800e604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	32ae      	adds	r2, #174	; 0xae
 800e5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	32ae      	adds	r2, #174	; 0xae
 800e5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fc:	78fa      	ldrb	r2, [r7, #3]
 800e5fe:	4611      	mov	r1, r2
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e60e:	b480      	push	{r7}
 800e610:	b083      	sub	sp, #12
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e62c:	2300      	movs	r3, #0
 800e62e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00e      	beq.n	800e660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	6852      	ldr	r2, [r2, #4]
 800e64e:	b2d2      	uxtb	r2, r2
 800e650:	4611      	mov	r1, r2
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	4798      	blx	r3
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d001      	beq.n	800e660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e65c:	2303      	movs	r3, #3
 800e65e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e660:	7bfb      	ldrb	r3, [r7, #15]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	460b      	mov	r3, r1
 800e674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e678:	4618      	mov	r0, r3
 800e67a:	370c      	adds	r7, #12
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e692:	4618      	mov	r0, r3
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b086      	sub	sp, #24
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	885b      	ldrh	r3, [r3, #2]
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d920      	bls.n	800e708 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e6ce:	e013      	b.n	800e6f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e6d0:	f107 030a 	add.w	r3, r7, #10
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6978      	ldr	r0, [r7, #20]
 800e6d8:	f000 f81b 	bl	800e712 <USBD_GetNextDesc>
 800e6dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	785b      	ldrb	r3, [r3, #1]
 800e6e2:	2b05      	cmp	r3, #5
 800e6e4:	d108      	bne.n	800e6f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	789b      	ldrb	r3, [r3, #2]
 800e6ee:	78fa      	ldrb	r2, [r7, #3]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d008      	beq.n	800e706 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	885b      	ldrh	r3, [r3, #2]
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	897b      	ldrh	r3, [r7, #10]
 800e700:	429a      	cmp	r2, r3
 800e702:	d8e5      	bhi.n	800e6d0 <USBD_GetEpDesc+0x32>
 800e704:	e000      	b.n	800e708 <USBD_GetEpDesc+0x6a>
          break;
 800e706:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e708:	693b      	ldr	r3, [r7, #16]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3718      	adds	r7, #24
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e712:	b480      	push	{r7}
 800e714:	b085      	sub	sp, #20
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	881a      	ldrh	r2, [r3, #0]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	b29b      	uxth	r3, r3
 800e72a:	4413      	add	r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	461a      	mov	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4413      	add	r3, r2
 800e73c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e73e:	68fb      	ldr	r3, [r7, #12]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b087      	sub	sp, #28
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	3301      	adds	r3, #1
 800e762:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e76a:	8a3b      	ldrh	r3, [r7, #16]
 800e76c:	021b      	lsls	r3, r3, #8
 800e76e:	b21a      	sxth	r2, r3
 800e770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e774:	4313      	orrs	r3, r2
 800e776:	b21b      	sxth	r3, r3
 800e778:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e77a:	89fb      	ldrh	r3, [r7, #14]
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	371c      	adds	r7, #28
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e792:	2300      	movs	r3, #0
 800e794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e79e:	2b40      	cmp	r3, #64	; 0x40
 800e7a0:	d005      	beq.n	800e7ae <USBD_StdDevReq+0x26>
 800e7a2:	2b40      	cmp	r3, #64	; 0x40
 800e7a4:	d857      	bhi.n	800e856 <USBD_StdDevReq+0xce>
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00f      	beq.n	800e7ca <USBD_StdDevReq+0x42>
 800e7aa:	2b20      	cmp	r3, #32
 800e7ac:	d153      	bne.n	800e856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	32ae      	adds	r2, #174	; 0xae
 800e7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	4798      	blx	r3
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7c8:	e04a      	b.n	800e860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	785b      	ldrb	r3, [r3, #1]
 800e7ce:	2b09      	cmp	r3, #9
 800e7d0:	d83b      	bhi.n	800e84a <USBD_StdDevReq+0xc2>
 800e7d2:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <USBD_StdDevReq+0x50>)
 800e7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d8:	0800e82d 	.word	0x0800e82d
 800e7dc:	0800e841 	.word	0x0800e841
 800e7e0:	0800e84b 	.word	0x0800e84b
 800e7e4:	0800e837 	.word	0x0800e837
 800e7e8:	0800e84b 	.word	0x0800e84b
 800e7ec:	0800e80b 	.word	0x0800e80b
 800e7f0:	0800e801 	.word	0x0800e801
 800e7f4:	0800e84b 	.word	0x0800e84b
 800e7f8:	0800e823 	.word	0x0800e823
 800e7fc:	0800e815 	.word	0x0800e815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fa3c 	bl	800ec80 <USBD_GetDescriptor>
          break;
 800e808:	e024      	b.n	800e854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 fba1 	bl	800ef54 <USBD_SetAddress>
          break;
 800e812:	e01f      	b.n	800e854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 fbe0 	bl	800efdc <USBD_SetConfig>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73fb      	strb	r3, [r7, #15]
          break;
 800e820:	e018      	b.n	800e854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fc83 	bl	800f130 <USBD_GetConfig>
          break;
 800e82a:	e013      	b.n	800e854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fcb4 	bl	800f19c <USBD_GetStatus>
          break;
 800e834:	e00e      	b.n	800e854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fce3 	bl	800f204 <USBD_SetFeature>
          break;
 800e83e:	e009      	b.n	800e854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e840:	6839      	ldr	r1, [r7, #0]
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fd07 	bl	800f256 <USBD_ClrFeature>
          break;
 800e848:	e004      	b.n	800e854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e84a:	6839      	ldr	r1, [r7, #0]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 fd5e 	bl	800f30e <USBD_CtlError>
          break;
 800e852:	bf00      	nop
      }
      break;
 800e854:	e004      	b.n	800e860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e856:	6839      	ldr	r1, [r7, #0]
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 fd58 	bl	800f30e <USBD_CtlError>
      break;
 800e85e:	bf00      	nop
  }

  return ret;
 800e860:	7bfb      	ldrb	r3, [r7, #15]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop

0800e86c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e882:	2b40      	cmp	r3, #64	; 0x40
 800e884:	d005      	beq.n	800e892 <USBD_StdItfReq+0x26>
 800e886:	2b40      	cmp	r3, #64	; 0x40
 800e888:	d852      	bhi.n	800e930 <USBD_StdItfReq+0xc4>
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <USBD_StdItfReq+0x26>
 800e88e:	2b20      	cmp	r3, #32
 800e890:	d14e      	bne.n	800e930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	3b01      	subs	r3, #1
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d840      	bhi.n	800e922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	889b      	ldrh	r3, [r3, #4]
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d836      	bhi.n	800e918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	889b      	ldrh	r3, [r3, #4]
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7ff fed9 	bl	800e66a <USBD_CoreFindIF>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
 800e8be:	2bff      	cmp	r3, #255	; 0xff
 800e8c0:	d01d      	beq.n	800e8fe <USBD_StdItfReq+0x92>
 800e8c2:	7bbb      	ldrb	r3, [r7, #14]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d11a      	bne.n	800e8fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e8c8:	7bba      	ldrb	r2, [r7, #14]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	32ae      	adds	r2, #174	; 0xae
 800e8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00f      	beq.n	800e8f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e8d8:	7bba      	ldrb	r2, [r7, #14]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e8e0:	7bba      	ldrb	r2, [r7, #14]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	32ae      	adds	r2, #174	; 0xae
 800e8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	6839      	ldr	r1, [r7, #0]
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	4798      	blx	r3
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e8f6:	e004      	b.n	800e902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e8fc:	e001      	b.n	800e902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e8fe:	2303      	movs	r3, #3
 800e900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	88db      	ldrh	r3, [r3, #6]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d110      	bne.n	800e92c <USBD_StdItfReq+0xc0>
 800e90a:	7bfb      	ldrb	r3, [r7, #15]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10d      	bne.n	800e92c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 fdc7 	bl	800f4a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e916:	e009      	b.n	800e92c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e918:	6839      	ldr	r1, [r7, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 fcf7 	bl	800f30e <USBD_CtlError>
          break;
 800e920:	e004      	b.n	800e92c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e922:	6839      	ldr	r1, [r7, #0]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 fcf2 	bl	800f30e <USBD_CtlError>
          break;
 800e92a:	e000      	b.n	800e92e <USBD_StdItfReq+0xc2>
          break;
 800e92c:	bf00      	nop
      }
      break;
 800e92e:	e004      	b.n	800e93a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e930:	6839      	ldr	r1, [r7, #0]
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 fceb 	bl	800f30e <USBD_CtlError>
      break;
 800e938:	bf00      	nop
  }

  return ret;
 800e93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	889b      	ldrh	r3, [r3, #4]
 800e956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e960:	2b40      	cmp	r3, #64	; 0x40
 800e962:	d007      	beq.n	800e974 <USBD_StdEPReq+0x30>
 800e964:	2b40      	cmp	r3, #64	; 0x40
 800e966:	f200 817f 	bhi.w	800ec68 <USBD_StdEPReq+0x324>
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d02a      	beq.n	800e9c4 <USBD_StdEPReq+0x80>
 800e96e:	2b20      	cmp	r3, #32
 800e970:	f040 817a 	bne.w	800ec68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e974:	7bbb      	ldrb	r3, [r7, #14]
 800e976:	4619      	mov	r1, r3
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff fe83 	bl	800e684 <USBD_CoreFindEP>
 800e97e:	4603      	mov	r3, r0
 800e980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e982:	7b7b      	ldrb	r3, [r7, #13]
 800e984:	2bff      	cmp	r3, #255	; 0xff
 800e986:	f000 8174 	beq.w	800ec72 <USBD_StdEPReq+0x32e>
 800e98a:	7b7b      	ldrb	r3, [r7, #13]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f040 8170 	bne.w	800ec72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e992:	7b7a      	ldrb	r2, [r7, #13]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e99a:	7b7a      	ldrb	r2, [r7, #13]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	32ae      	adds	r2, #174	; 0xae
 800e9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f000 8163 	beq.w	800ec72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e9ac:	7b7a      	ldrb	r2, [r7, #13]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	32ae      	adds	r2, #174	; 0xae
 800e9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	4798      	blx	r3
 800e9be:	4603      	mov	r3, r0
 800e9c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e9c2:	e156      	b.n	800ec72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	785b      	ldrb	r3, [r3, #1]
 800e9c8:	2b03      	cmp	r3, #3
 800e9ca:	d008      	beq.n	800e9de <USBD_StdEPReq+0x9a>
 800e9cc:	2b03      	cmp	r3, #3
 800e9ce:	f300 8145 	bgt.w	800ec5c <USBD_StdEPReq+0x318>
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 809b 	beq.w	800eb0e <USBD_StdEPReq+0x1ca>
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d03c      	beq.n	800ea56 <USBD_StdEPReq+0x112>
 800e9dc:	e13e      	b.n	800ec5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d002      	beq.n	800e9f0 <USBD_StdEPReq+0xac>
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	d016      	beq.n	800ea1c <USBD_StdEPReq+0xd8>
 800e9ee:	e02c      	b.n	800ea4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9f0:	7bbb      	ldrb	r3, [r7, #14]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00d      	beq.n	800ea12 <USBD_StdEPReq+0xce>
 800e9f6:	7bbb      	ldrb	r3, [r7, #14]
 800e9f8:	2b80      	cmp	r3, #128	; 0x80
 800e9fa:	d00a      	beq.n	800ea12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9fc:	7bbb      	ldrb	r3, [r7, #14]
 800e9fe:	4619      	mov	r1, r3
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f001 f9a3 	bl	800fd4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea06:	2180      	movs	r1, #128	; 0x80
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f001 f99f 	bl	800fd4c <USBD_LL_StallEP>
 800ea0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea10:	e020      	b.n	800ea54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fc7a 	bl	800f30e <USBD_CtlError>
              break;
 800ea1a:	e01b      	b.n	800ea54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	885b      	ldrh	r3, [r3, #2]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10e      	bne.n	800ea42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ea24:	7bbb      	ldrb	r3, [r7, #14]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00b      	beq.n	800ea42 <USBD_StdEPReq+0xfe>
 800ea2a:	7bbb      	ldrb	r3, [r7, #14]
 800ea2c:	2b80      	cmp	r3, #128	; 0x80
 800ea2e:	d008      	beq.n	800ea42 <USBD_StdEPReq+0xfe>
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	88db      	ldrh	r3, [r3, #6]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d104      	bne.n	800ea42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea38:	7bbb      	ldrb	r3, [r7, #14]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f001 f985 	bl	800fd4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fd2e 	bl	800f4a4 <USBD_CtlSendStatus>

              break;
 800ea48:	e004      	b.n	800ea54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fc5e 	bl	800f30e <USBD_CtlError>
              break;
 800ea52:	bf00      	nop
          }
          break;
 800ea54:	e107      	b.n	800ec66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	d002      	beq.n	800ea68 <USBD_StdEPReq+0x124>
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d016      	beq.n	800ea94 <USBD_StdEPReq+0x150>
 800ea66:	e04b      	b.n	800eb00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea68:	7bbb      	ldrb	r3, [r7, #14]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00d      	beq.n	800ea8a <USBD_StdEPReq+0x146>
 800ea6e:	7bbb      	ldrb	r3, [r7, #14]
 800ea70:	2b80      	cmp	r3, #128	; 0x80
 800ea72:	d00a      	beq.n	800ea8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea74:	7bbb      	ldrb	r3, [r7, #14]
 800ea76:	4619      	mov	r1, r3
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f001 f967 	bl	800fd4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea7e:	2180      	movs	r1, #128	; 0x80
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f001 f963 	bl	800fd4c <USBD_LL_StallEP>
 800ea86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea88:	e040      	b.n	800eb0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fc3e 	bl	800f30e <USBD_CtlError>
              break;
 800ea92:	e03b      	b.n	800eb0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	885b      	ldrh	r3, [r3, #2]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d136      	bne.n	800eb0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ea9c:	7bbb      	ldrb	r3, [r7, #14]
 800ea9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d004      	beq.n	800eab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eaa6:	7bbb      	ldrb	r3, [r7, #14]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f001 f96d 	bl	800fd8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 fcf7 	bl	800f4a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800eab6:	7bbb      	ldrb	r3, [r7, #14]
 800eab8:	4619      	mov	r1, r3
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7ff fde2 	bl	800e684 <USBD_CoreFindEP>
 800eac0:	4603      	mov	r3, r0
 800eac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eac4:	7b7b      	ldrb	r3, [r7, #13]
 800eac6:	2bff      	cmp	r3, #255	; 0xff
 800eac8:	d01f      	beq.n	800eb0a <USBD_StdEPReq+0x1c6>
 800eaca:	7b7b      	ldrb	r3, [r7, #13]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d11c      	bne.n	800eb0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ead0:	7b7a      	ldrb	r2, [r7, #13]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ead8:	7b7a      	ldrb	r2, [r7, #13]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	32ae      	adds	r2, #174	; 0xae
 800eade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d010      	beq.n	800eb0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eae8:	7b7a      	ldrb	r2, [r7, #13]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	32ae      	adds	r2, #174	; 0xae
 800eaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	6839      	ldr	r1, [r7, #0]
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	4798      	blx	r3
 800eafa:	4603      	mov	r3, r0
 800eafc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800eafe:	e004      	b.n	800eb0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fc03 	bl	800f30e <USBD_CtlError>
              break;
 800eb08:	e000      	b.n	800eb0c <USBD_StdEPReq+0x1c8>
              break;
 800eb0a:	bf00      	nop
          }
          break;
 800eb0c:	e0ab      	b.n	800ec66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d002      	beq.n	800eb20 <USBD_StdEPReq+0x1dc>
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d032      	beq.n	800eb84 <USBD_StdEPReq+0x240>
 800eb1e:	e097      	b.n	800ec50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb20:	7bbb      	ldrb	r3, [r7, #14]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d007      	beq.n	800eb36 <USBD_StdEPReq+0x1f2>
 800eb26:	7bbb      	ldrb	r3, [r7, #14]
 800eb28:	2b80      	cmp	r3, #128	; 0x80
 800eb2a:	d004      	beq.n	800eb36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 fbed 	bl	800f30e <USBD_CtlError>
                break;
 800eb34:	e091      	b.n	800ec5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	da0b      	bge.n	800eb56 <USBD_StdEPReq+0x212>
 800eb3e:	7bbb      	ldrb	r3, [r7, #14]
 800eb40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb44:	4613      	mov	r3, r2
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	4413      	add	r3, r2
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	3310      	adds	r3, #16
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	4413      	add	r3, r2
 800eb52:	3304      	adds	r3, #4
 800eb54:	e00b      	b.n	800eb6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb56:	7bbb      	ldrb	r3, [r7, #14]
 800eb58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2200      	movs	r2, #0
 800eb74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	2202      	movs	r2, #2
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fc37 	bl	800f3f0 <USBD_CtlSendData>
              break;
 800eb82:	e06a      	b.n	800ec5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eb84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	da11      	bge.n	800ebb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eb8c:	7bbb      	ldrb	r3, [r7, #14]
 800eb8e:	f003 020f 	and.w	r2, r3, #15
 800eb92:	6879      	ldr	r1, [r7, #4]
 800eb94:	4613      	mov	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4413      	add	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	440b      	add	r3, r1
 800eb9e:	3324      	adds	r3, #36	; 0x24
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d117      	bne.n	800ebd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fbb0 	bl	800f30e <USBD_CtlError>
                  break;
 800ebae:	e054      	b.n	800ec5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	f003 020f 	and.w	r2, r3, #15
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	440b      	add	r3, r1
 800ebc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ebc6:	881b      	ldrh	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d104      	bne.n	800ebd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ebcc:	6839      	ldr	r1, [r7, #0]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 fb9d 	bl	800f30e <USBD_CtlError>
                  break;
 800ebd4:	e041      	b.n	800ec5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da0b      	bge.n	800ebf6 <USBD_StdEPReq+0x2b2>
 800ebde:	7bbb      	ldrb	r3, [r7, #14]
 800ebe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4413      	add	r3, r2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	3310      	adds	r3, #16
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	3304      	adds	r3, #4
 800ebf4:	e00b      	b.n	800ec0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebf6:	7bbb      	ldrb	r3, [r7, #14]
 800ebf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <USBD_StdEPReq+0x2d8>
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	2b80      	cmp	r3, #128	; 0x80
 800ec1a:	d103      	bne.n	800ec24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	601a      	str	r2, [r3, #0]
 800ec22:	e00e      	b.n	800ec42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ec24:	7bbb      	ldrb	r3, [r7, #14]
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f001 f8cd 	bl	800fdc8 <USBD_LL_IsStallEP>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d003      	beq.n	800ec3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2201      	movs	r2, #1
 800ec38:	601a      	str	r2, [r3, #0]
 800ec3a:	e002      	b.n	800ec42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	2202      	movs	r2, #2
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 fbd1 	bl	800f3f0 <USBD_CtlSendData>
              break;
 800ec4e:	e004      	b.n	800ec5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fb5b 	bl	800f30e <USBD_CtlError>
              break;
 800ec58:	bf00      	nop
          }
          break;
 800ec5a:	e004      	b.n	800ec66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ec5c:	6839      	ldr	r1, [r7, #0]
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 fb55 	bl	800f30e <USBD_CtlError>
          break;
 800ec64:	bf00      	nop
      }
      break;
 800ec66:	e005      	b.n	800ec74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ec68:	6839      	ldr	r1, [r7, #0]
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 fb4f 	bl	800f30e <USBD_CtlError>
      break;
 800ec70:	e000      	b.n	800ec74 <USBD_StdEPReq+0x330>
      break;
 800ec72:	bf00      	nop
  }

  return ret;
 800ec74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
	...

0800ec80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ec92:	2300      	movs	r3, #0
 800ec94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	885b      	ldrh	r3, [r3, #2]
 800ec9a:	0a1b      	lsrs	r3, r3, #8
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	2b06      	cmp	r3, #6
 800eca2:	f200 8128 	bhi.w	800eef6 <USBD_GetDescriptor+0x276>
 800eca6:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <USBD_GetDescriptor+0x2c>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ecc9 	.word	0x0800ecc9
 800ecb0:	0800ece1 	.word	0x0800ece1
 800ecb4:	0800ed21 	.word	0x0800ed21
 800ecb8:	0800eef7 	.word	0x0800eef7
 800ecbc:	0800eef7 	.word	0x0800eef7
 800ecc0:	0800ee97 	.word	0x0800ee97
 800ecc4:	0800eec3 	.word	0x0800eec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	7c12      	ldrb	r2, [r2, #16]
 800ecd4:	f107 0108 	add.w	r1, r7, #8
 800ecd8:	4610      	mov	r0, r2
 800ecda:	4798      	blx	r3
 800ecdc:	60f8      	str	r0, [r7, #12]
      break;
 800ecde:	e112      	b.n	800ef06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	7c1b      	ldrb	r3, [r3, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10d      	bne.n	800ed04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf0:	f107 0208 	add.w	r2, r7, #8
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	4798      	blx	r3
 800ecf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	2202      	movs	r2, #2
 800ed00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ed02:	e100      	b.n	800ef06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	f107 0208 	add.w	r2, r7, #8
 800ed10:	4610      	mov	r0, r2
 800ed12:	4798      	blx	r3
 800ed14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	701a      	strb	r2, [r3, #0]
      break;
 800ed1e:	e0f2      	b.n	800ef06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	885b      	ldrh	r3, [r3, #2]
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b05      	cmp	r3, #5
 800ed28:	f200 80ac 	bhi.w	800ee84 <USBD_GetDescriptor+0x204>
 800ed2c:	a201      	add	r2, pc, #4	; (adr r2, 800ed34 <USBD_GetDescriptor+0xb4>)
 800ed2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed32:	bf00      	nop
 800ed34:	0800ed4d 	.word	0x0800ed4d
 800ed38:	0800ed81 	.word	0x0800ed81
 800ed3c:	0800edb5 	.word	0x0800edb5
 800ed40:	0800ede9 	.word	0x0800ede9
 800ed44:	0800ee1d 	.word	0x0800ee1d
 800ed48:	0800ee51 	.word	0x0800ee51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00b      	beq.n	800ed70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	7c12      	ldrb	r2, [r2, #16]
 800ed64:	f107 0108 	add.w	r1, r7, #8
 800ed68:	4610      	mov	r0, r2
 800ed6a:	4798      	blx	r3
 800ed6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed6e:	e091      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed70:	6839      	ldr	r1, [r7, #0]
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 facb 	bl	800f30e <USBD_CtlError>
            err++;
 800ed78:	7afb      	ldrb	r3, [r7, #11]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ed7e:	e089      	b.n	800ee94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00b      	beq.n	800eda4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	7c12      	ldrb	r2, [r2, #16]
 800ed98:	f107 0108 	add.w	r1, r7, #8
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	4798      	blx	r3
 800eda0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eda2:	e077      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eda4:	6839      	ldr	r1, [r7, #0]
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fab1 	bl	800f30e <USBD_CtlError>
            err++;
 800edac:	7afb      	ldrb	r3, [r7, #11]
 800edae:	3301      	adds	r3, #1
 800edb0:	72fb      	strb	r3, [r7, #11]
          break;
 800edb2:	e06f      	b.n	800ee94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00b      	beq.n	800edd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	7c12      	ldrb	r2, [r2, #16]
 800edcc:	f107 0108 	add.w	r1, r7, #8
 800edd0:	4610      	mov	r0, r2
 800edd2:	4798      	blx	r3
 800edd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edd6:	e05d      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fa97 	bl	800f30e <USBD_CtlError>
            err++;
 800ede0:	7afb      	ldrb	r3, [r7, #11]
 800ede2:	3301      	adds	r3, #1
 800ede4:	72fb      	strb	r3, [r7, #11]
          break;
 800ede6:	e055      	b.n	800ee94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edee:	691b      	ldr	r3, [r3, #16]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00b      	beq.n	800ee0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	7c12      	ldrb	r2, [r2, #16]
 800ee00:	f107 0108 	add.w	r1, r7, #8
 800ee04:	4610      	mov	r0, r2
 800ee06:	4798      	blx	r3
 800ee08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee0a:	e043      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee0c:	6839      	ldr	r1, [r7, #0]
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 fa7d 	bl	800f30e <USBD_CtlError>
            err++;
 800ee14:	7afb      	ldrb	r3, [r7, #11]
 800ee16:	3301      	adds	r3, #1
 800ee18:	72fb      	strb	r3, [r7, #11]
          break;
 800ee1a:	e03b      	b.n	800ee94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee22:	695b      	ldr	r3, [r3, #20]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00b      	beq.n	800ee40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	7c12      	ldrb	r2, [r2, #16]
 800ee34:	f107 0108 	add.w	r1, r7, #8
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
 800ee3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee3e:	e029      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fa63 	bl	800f30e <USBD_CtlError>
            err++;
 800ee48:	7afb      	ldrb	r3, [r7, #11]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ee4e:	e021      	b.n	800ee94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00b      	beq.n	800ee74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	7c12      	ldrb	r2, [r2, #16]
 800ee68:	f107 0108 	add.w	r1, r7, #8
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	4798      	blx	r3
 800ee70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee72:	e00f      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee74:	6839      	ldr	r1, [r7, #0]
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 fa49 	bl	800f30e <USBD_CtlError>
            err++;
 800ee7c:	7afb      	ldrb	r3, [r7, #11]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	72fb      	strb	r3, [r7, #11]
          break;
 800ee82:	e007      	b.n	800ee94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 fa41 	bl	800f30e <USBD_CtlError>
          err++;
 800ee8c:	7afb      	ldrb	r3, [r7, #11]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ee92:	bf00      	nop
      }
      break;
 800ee94:	e037      	b.n	800ef06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	7c1b      	ldrb	r3, [r3, #16]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d109      	bne.n	800eeb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eea6:	f107 0208 	add.w	r2, r7, #8
 800eeaa:	4610      	mov	r0, r2
 800eeac:	4798      	blx	r3
 800eeae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eeb0:	e029      	b.n	800ef06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 fa2a 	bl	800f30e <USBD_CtlError>
        err++;
 800eeba:	7afb      	ldrb	r3, [r7, #11]
 800eebc:	3301      	adds	r3, #1
 800eebe:	72fb      	strb	r3, [r7, #11]
      break;
 800eec0:	e021      	b.n	800ef06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	7c1b      	ldrb	r3, [r3, #16]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10d      	bne.n	800eee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed2:	f107 0208 	add.w	r2, r7, #8
 800eed6:	4610      	mov	r0, r2
 800eed8:	4798      	blx	r3
 800eeda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	3301      	adds	r3, #1
 800eee0:	2207      	movs	r2, #7
 800eee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eee4:	e00f      	b.n	800ef06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fa10 	bl	800f30e <USBD_CtlError>
        err++;
 800eeee:	7afb      	ldrb	r3, [r7, #11]
 800eef0:	3301      	adds	r3, #1
 800eef2:	72fb      	strb	r3, [r7, #11]
      break;
 800eef4:	e007      	b.n	800ef06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800eef6:	6839      	ldr	r1, [r7, #0]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 fa08 	bl	800f30e <USBD_CtlError>
      err++;
 800eefe:	7afb      	ldrb	r3, [r7, #11]
 800ef00:	3301      	adds	r3, #1
 800ef02:	72fb      	strb	r3, [r7, #11]
      break;
 800ef04:	bf00      	nop
  }

  if (err != 0U)
 800ef06:	7afb      	ldrb	r3, [r7, #11]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d11e      	bne.n	800ef4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	88db      	ldrh	r3, [r3, #6]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d016      	beq.n	800ef42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ef14:	893b      	ldrh	r3, [r7, #8]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00e      	beq.n	800ef38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	88da      	ldrh	r2, [r3, #6]
 800ef1e:	893b      	ldrh	r3, [r7, #8]
 800ef20:	4293      	cmp	r3, r2
 800ef22:	bf28      	it	cs
 800ef24:	4613      	movcs	r3, r2
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef2a:	893b      	ldrh	r3, [r7, #8]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	68f9      	ldr	r1, [r7, #12]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fa5d 	bl	800f3f0 <USBD_CtlSendData>
 800ef36:	e009      	b.n	800ef4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f9e7 	bl	800f30e <USBD_CtlError>
 800ef40:	e004      	b.n	800ef4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 faae 	bl	800f4a4 <USBD_CtlSendStatus>
 800ef48:	e000      	b.n	800ef4c <USBD_GetDescriptor+0x2cc>
    return;
 800ef4a:	bf00      	nop
  }
}
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop

0800ef54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	889b      	ldrh	r3, [r3, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d131      	bne.n	800efca <USBD_SetAddress+0x76>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	88db      	ldrh	r3, [r3, #6]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d12d      	bne.n	800efca <USBD_SetAddress+0x76>
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	885b      	ldrh	r3, [r3, #2]
 800ef72:	2b7f      	cmp	r3, #127	; 0x7f
 800ef74:	d829      	bhi.n	800efca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	885b      	ldrh	r3, [r3, #2]
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b03      	cmp	r3, #3
 800ef8c:	d104      	bne.n	800ef98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ef8e:	6839      	ldr	r1, [r7, #0]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f9bc 	bl	800f30e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef96:	e01d      	b.n	800efd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7bfa      	ldrb	r2, [r7, #15]
 800ef9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 ff3b 	bl	800fe20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fa7a 	bl	800f4a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d004      	beq.n	800efc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2202      	movs	r2, #2
 800efba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efbe:	e009      	b.n	800efd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2201      	movs	r2, #1
 800efc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efc8:	e004      	b.n	800efd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800efca:	6839      	ldr	r1, [r7, #0]
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f99e 	bl	800f30e <USBD_CtlError>
  }
}
 800efd2:	bf00      	nop
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	885b      	ldrh	r3, [r3, #2]
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	4b4e      	ldr	r3, [pc, #312]	; (800f12c <USBD_SetConfig+0x150>)
 800eff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eff4:	4b4d      	ldr	r3, [pc, #308]	; (800f12c <USBD_SetConfig+0x150>)
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d905      	bls.n	800f008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800effc:	6839      	ldr	r1, [r7, #0]
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 f985 	bl	800f30e <USBD_CtlError>
    return USBD_FAIL;
 800f004:	2303      	movs	r3, #3
 800f006:	e08c      	b.n	800f122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	2b02      	cmp	r3, #2
 800f012:	d002      	beq.n	800f01a <USBD_SetConfig+0x3e>
 800f014:	2b03      	cmp	r3, #3
 800f016:	d029      	beq.n	800f06c <USBD_SetConfig+0x90>
 800f018:	e075      	b.n	800f106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f01a:	4b44      	ldr	r3, [pc, #272]	; (800f12c <USBD_SetConfig+0x150>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d020      	beq.n	800f064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f022:	4b42      	ldr	r3, [pc, #264]	; (800f12c <USBD_SetConfig+0x150>)
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	461a      	mov	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f02c:	4b3f      	ldr	r3, [pc, #252]	; (800f12c <USBD_SetConfig+0x150>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	4619      	mov	r1, r3
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7fe ffe7 	bl	800e006 <USBD_SetClassConfig>
 800f038:	4603      	mov	r3, r0
 800f03a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f03c:	7bfb      	ldrb	r3, [r7, #15]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d008      	beq.n	800f054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f000 f962 	bl	800f30e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2202      	movs	r2, #2
 800f04e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f052:	e065      	b.n	800f120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 fa25 	bl	800f4a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2203      	movs	r2, #3
 800f05e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f062:	e05d      	b.n	800f120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fa1d 	bl	800f4a4 <USBD_CtlSendStatus>
      break;
 800f06a:	e059      	b.n	800f120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f06c:	4b2f      	ldr	r3, [pc, #188]	; (800f12c <USBD_SetConfig+0x150>)
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d112      	bne.n	800f09a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2202      	movs	r2, #2
 800f078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f07c:	4b2b      	ldr	r3, [pc, #172]	; (800f12c <USBD_SetConfig+0x150>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	461a      	mov	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f086:	4b29      	ldr	r3, [pc, #164]	; (800f12c <USBD_SetConfig+0x150>)
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	4619      	mov	r1, r3
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7fe ffd6 	bl	800e03e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 fa06 	bl	800f4a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f098:	e042      	b.n	800f120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f09a:	4b24      	ldr	r3, [pc, #144]	; (800f12c <USBD_SetConfig+0x150>)
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d02a      	beq.n	800f0fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7fe ffc4 	bl	800e03e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f0b6:	4b1d      	ldr	r3, [pc, #116]	; (800f12c <USBD_SetConfig+0x150>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f0c0:	4b1a      	ldr	r3, [pc, #104]	; (800f12c <USBD_SetConfig+0x150>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7fe ff9d 	bl	800e006 <USBD_SetClassConfig>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00f      	beq.n	800f0f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f918 	bl	800f30e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7fe ffa9 	bl	800e03e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2202      	movs	r2, #2
 800f0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f0f4:	e014      	b.n	800f120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 f9d4 	bl	800f4a4 <USBD_CtlSendStatus>
      break;
 800f0fc:	e010      	b.n	800f120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f9d0 	bl	800f4a4 <USBD_CtlSendStatus>
      break;
 800f104:	e00c      	b.n	800f120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f106:	6839      	ldr	r1, [r7, #0]
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 f900 	bl	800f30e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f10e:	4b07      	ldr	r3, [pc, #28]	; (800f12c <USBD_SetConfig+0x150>)
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	4619      	mov	r1, r3
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7fe ff92 	bl	800e03e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f11a:	2303      	movs	r3, #3
 800f11c:	73fb      	strb	r3, [r7, #15]
      break;
 800f11e:	bf00      	nop
  }

  return ret;
 800f120:	7bfb      	ldrb	r3, [r7, #15]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	200008b8 	.word	0x200008b8

0800f130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	88db      	ldrh	r3, [r3, #6]
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d004      	beq.n	800f14c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f142:	6839      	ldr	r1, [r7, #0]
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 f8e2 	bl	800f30e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f14a:	e023      	b.n	800f194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b02      	cmp	r3, #2
 800f156:	dc02      	bgt.n	800f15e <USBD_GetConfig+0x2e>
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dc03      	bgt.n	800f164 <USBD_GetConfig+0x34>
 800f15c:	e015      	b.n	800f18a <USBD_GetConfig+0x5a>
 800f15e:	2b03      	cmp	r3, #3
 800f160:	d00b      	beq.n	800f17a <USBD_GetConfig+0x4a>
 800f162:	e012      	b.n	800f18a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3308      	adds	r3, #8
 800f16e:	2201      	movs	r2, #1
 800f170:	4619      	mov	r1, r3
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 f93c 	bl	800f3f0 <USBD_CtlSendData>
        break;
 800f178:	e00c      	b.n	800f194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3304      	adds	r3, #4
 800f17e:	2201      	movs	r2, #1
 800f180:	4619      	mov	r1, r3
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f934 	bl	800f3f0 <USBD_CtlSendData>
        break;
 800f188:	e004      	b.n	800f194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 f8be 	bl	800f30e <USBD_CtlError>
        break;
 800f192:	bf00      	nop
}
 800f194:	bf00      	nop
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d81e      	bhi.n	800f1f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	88db      	ldrh	r3, [r3, #6]
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d004      	beq.n	800f1c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f8a5 	bl	800f30e <USBD_CtlError>
        break;
 800f1c4:	e01a      	b.n	800f1fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d005      	beq.n	800f1e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	f043 0202 	orr.w	r2, r3, #2
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	330c      	adds	r3, #12
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f900 	bl	800f3f0 <USBD_CtlSendData>
      break;
 800f1f0:	e004      	b.n	800f1fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f88a 	bl	800f30e <USBD_CtlError>
      break;
 800f1fa:	bf00      	nop
  }
}
 800f1fc:	bf00      	nop
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	885b      	ldrh	r3, [r3, #2]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d107      	bne.n	800f226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2201      	movs	r2, #1
 800f21a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f940 	bl	800f4a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f224:	e013      	b.n	800f24e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	885b      	ldrh	r3, [r3, #2]
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	d10b      	bne.n	800f246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	889b      	ldrh	r3, [r3, #4]
 800f232:	0a1b      	lsrs	r3, r3, #8
 800f234:	b29b      	uxth	r3, r3
 800f236:	b2da      	uxtb	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 f930 	bl	800f4a4 <USBD_CtlSendStatus>
}
 800f244:	e003      	b.n	800f24e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f860 	bl	800f30e <USBD_CtlError>
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f266:	b2db      	uxtb	r3, r3
 800f268:	3b01      	subs	r3, #1
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d80b      	bhi.n	800f286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	885b      	ldrh	r3, [r3, #2]
 800f272:	2b01      	cmp	r3, #1
 800f274:	d10c      	bne.n	800f290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f910 	bl	800f4a4 <USBD_CtlSendStatus>
      }
      break;
 800f284:	e004      	b.n	800f290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f840 	bl	800f30e <USBD_CtlError>
      break;
 800f28e:	e000      	b.n	800f292 <USBD_ClrFeature+0x3c>
      break;
 800f290:	bf00      	nop
  }
}
 800f292:	bf00      	nop
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b084      	sub	sp, #16
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	781a      	ldrb	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	781a      	ldrb	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f7ff fa41 	bl	800e74c <SWAPBYTE>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f7ff fa34 	bl	800e74c <SWAPBYTE>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f7ff fa27 	bl	800e74c <SWAPBYTE>
 800f2fe:	4603      	mov	r3, r0
 800f300:	461a      	mov	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	80da      	strh	r2, [r3, #6]
}
 800f306:	bf00      	nop
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b082      	sub	sp, #8
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
 800f316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f318:	2180      	movs	r1, #128	; 0x80
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fd16 	bl	800fd4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f320:	2100      	movs	r1, #0
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 fd12 	bl	800fd4c <USBD_LL_StallEP>
}
 800f328:	bf00      	nop
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f33c:	2300      	movs	r3, #0
 800f33e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d036      	beq.n	800f3b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f34a:	6938      	ldr	r0, [r7, #16]
 800f34c:	f000 f836 	bl	800f3bc <USBD_GetLen>
 800f350:	4603      	mov	r3, r0
 800f352:	3301      	adds	r3, #1
 800f354:	b29b      	uxth	r3, r3
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	b29a      	uxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f35e:	7dfb      	ldrb	r3, [r7, #23]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	4413      	add	r3, r2
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	7812      	ldrb	r2, [r2, #0]
 800f368:	701a      	strb	r2, [r3, #0]
  idx++;
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	3301      	adds	r3, #1
 800f36e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f370:	7dfb      	ldrb	r3, [r7, #23]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	4413      	add	r3, r2
 800f376:	2203      	movs	r2, #3
 800f378:	701a      	strb	r2, [r3, #0]
  idx++;
 800f37a:	7dfb      	ldrb	r3, [r7, #23]
 800f37c:	3301      	adds	r3, #1
 800f37e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f380:	e013      	b.n	800f3aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f382:	7dfb      	ldrb	r3, [r7, #23]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	4413      	add	r3, r2
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	7812      	ldrb	r2, [r2, #0]
 800f38c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	3301      	adds	r3, #1
 800f392:	613b      	str	r3, [r7, #16]
    idx++;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
 800f396:	3301      	adds	r3, #1
 800f398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	4413      	add	r3, r2
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800f3a4:	7dfb      	ldrb	r3, [r7, #23]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1e7      	bne.n	800f382 <USBD_GetString+0x52>
 800f3b2:	e000      	b.n	800f3b6 <USBD_GetString+0x86>
    return;
 800f3b4:	bf00      	nop
  }
}
 800f3b6:	3718      	adds	r7, #24
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f3cc:	e005      	b.n	800f3da <USBD_GetLen+0x1e>
  {
    len++;
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1f5      	bne.n	800f3ce <USBD_GetLen+0x12>
  }

  return len;
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3714      	adds	r7, #20
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2202      	movs	r2, #2
 800f400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	2100      	movs	r1, #0
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f000 fd21 	bl	800fe5e <USBD_LL_Transmit>

  return USBD_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b084      	sub	sp, #16
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	60b9      	str	r1, [r7, #8]
 800f430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	2100      	movs	r1, #0
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f000 fd10 	bl	800fe5e <USBD_LL_Transmit>

  return USBD_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2203      	movs	r2, #3
 800f458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	2100      	movs	r1, #0
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 fd14 	bl	800fea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	60f8      	str	r0, [r7, #12]
 800f48a:	60b9      	str	r1, [r7, #8]
 800f48c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	2100      	movs	r1, #0
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f000 fd03 	bl	800fea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2204      	movs	r2, #4
 800f4b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fccf 	bl	800fe5e <USBD_LL_Transmit>

  return USBD_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b082      	sub	sp, #8
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2205      	movs	r2, #5
 800f4d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4da:	2300      	movs	r3, #0
 800f4dc:	2200      	movs	r2, #0
 800f4de:	2100      	movs	r1, #0
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 fcdd 	bl	800fea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b087      	sub	sp, #28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f4fe:	2301      	movs	r3, #1
 800f500:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f506:	4b1f      	ldr	r3, [pc, #124]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f508:	7a5b      	ldrb	r3, [r3, #9]
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d131      	bne.n	800f574 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f510:	4b1c      	ldr	r3, [pc, #112]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f512:	7a5b      	ldrb	r3, [r3, #9]
 800f514:	b2db      	uxtb	r3, r3
 800f516:	461a      	mov	r2, r3
 800f518:	4b1a      	ldr	r3, [pc, #104]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f51a:	2100      	movs	r1, #0
 800f51c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f51e:	4b19      	ldr	r3, [pc, #100]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f520:	7a5b      	ldrb	r3, [r3, #9]
 800f522:	b2db      	uxtb	r3, r3
 800f524:	4a17      	ldr	r2, [pc, #92]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	4413      	add	r3, r2
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f52e:	4b15      	ldr	r3, [pc, #84]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f530:	7a5b      	ldrb	r3, [r3, #9]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	461a      	mov	r2, r3
 800f536:	4b13      	ldr	r3, [pc, #76]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f538:	4413      	add	r3, r2
 800f53a:	79fa      	ldrb	r2, [r7, #7]
 800f53c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f53e:	4b11      	ldr	r3, [pc, #68]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f540:	7a5b      	ldrb	r3, [r3, #9]
 800f542:	b2db      	uxtb	r3, r3
 800f544:	1c5a      	adds	r2, r3, #1
 800f546:	b2d1      	uxtb	r1, r2
 800f548:	4a0e      	ldr	r2, [pc, #56]	; (800f584 <FATFS_LinkDriverEx+0x94>)
 800f54a:	7251      	strb	r1, [r2, #9]
 800f54c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f54e:	7dbb      	ldrb	r3, [r7, #22]
 800f550:	3330      	adds	r3, #48	; 0x30
 800f552:	b2da      	uxtb	r2, r3
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	3301      	adds	r3, #1
 800f55c:	223a      	movs	r2, #58	; 0x3a
 800f55e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	3302      	adds	r3, #2
 800f564:	222f      	movs	r2, #47	; 0x2f
 800f566:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	3303      	adds	r3, #3
 800f56c:	2200      	movs	r2, #0
 800f56e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f570:	2300      	movs	r3, #0
 800f572:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f574:	7dfb      	ldrb	r3, [r7, #23]
}
 800f576:	4618      	mov	r0, r3
 800f578:	371c      	adds	r7, #28
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	200008bc 	.word	0x200008bc

0800f588 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f592:	2200      	movs	r2, #0
 800f594:	6839      	ldr	r1, [r7, #0]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff ffaa 	bl	800f4f0 <FATFS_LinkDriverEx>
 800f59c:	4603      	mov	r3, r0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
	...

0800f5a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	4912      	ldr	r1, [pc, #72]	; (800f5f8 <MX_USB_DEVICE_Init+0x50>)
 800f5b0:	4812      	ldr	r0, [pc, #72]	; (800f5fc <MX_USB_DEVICE_Init+0x54>)
 800f5b2:	f7fe fcab 	bl	800df0c <USBD_Init>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f5bc:	f7f3 fcad 	bl	8002f1a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f5c0:	490f      	ldr	r1, [pc, #60]	; (800f600 <MX_USB_DEVICE_Init+0x58>)
 800f5c2:	480e      	ldr	r0, [pc, #56]	; (800f5fc <MX_USB_DEVICE_Init+0x54>)
 800f5c4:	f7fe fcd2 	bl	800df6c <USBD_RegisterClass>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d001      	beq.n	800f5d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f5ce:	f7f3 fca4 	bl	8002f1a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f5d2:	490c      	ldr	r1, [pc, #48]	; (800f604 <MX_USB_DEVICE_Init+0x5c>)
 800f5d4:	4809      	ldr	r0, [pc, #36]	; (800f5fc <MX_USB_DEVICE_Init+0x54>)
 800f5d6:	f7fe fc09 	bl	800ddec <USBD_CDC_RegisterInterface>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d001      	beq.n	800f5e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f5e0:	f7f3 fc9b 	bl	8002f1a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f5e4:	4805      	ldr	r0, [pc, #20]	; (800f5fc <MX_USB_DEVICE_Init+0x54>)
 800f5e6:	f7fe fcf7 	bl	800dfd8 <USBD_Start>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d001      	beq.n	800f5f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f5f0:	f7f3 fc93 	bl	8002f1a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f5f4:	bf00      	nop
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	2000025c 	.word	0x2000025c
 800f5fc:	200008c8 	.word	0x200008c8
 800f600:	200001c8 	.word	0x200001c8
 800f604:	20000248 	.word	0x20000248

0800f608 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f60c:	2200      	movs	r2, #0
 800f60e:	4905      	ldr	r1, [pc, #20]	; (800f624 <CDC_Init_FS+0x1c>)
 800f610:	4805      	ldr	r0, [pc, #20]	; (800f628 <CDC_Init_FS+0x20>)
 800f612:	f7fe fc05 	bl	800de20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f616:	4905      	ldr	r1, [pc, #20]	; (800f62c <CDC_Init_FS+0x24>)
 800f618:	4803      	ldr	r0, [pc, #12]	; (800f628 <CDC_Init_FS+0x20>)
 800f61a:	f7fe fc23 	bl	800de64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f61e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f620:	4618      	mov	r0, r3
 800f622:	bd80      	pop	{r7, pc}
 800f624:	200013a4 	.word	0x200013a4
 800f628:	200008c8 	.word	0x200008c8
 800f62c:	20000ba4 	.word	0x20000ba4

0800f630 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f630:	b480      	push	{r7}
 800f632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f634:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f636:	4618      	mov	r0, r3
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	6039      	str	r1, [r7, #0]
 800f64a:	71fb      	strb	r3, [r7, #7]
 800f64c:	4613      	mov	r3, r2
 800f64e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	2b23      	cmp	r3, #35	; 0x23
 800f654:	d84a      	bhi.n	800f6ec <CDC_Control_FS+0xac>
 800f656:	a201      	add	r2, pc, #4	; (adr r2, 800f65c <CDC_Control_FS+0x1c>)
 800f658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65c:	0800f6ed 	.word	0x0800f6ed
 800f660:	0800f6ed 	.word	0x0800f6ed
 800f664:	0800f6ed 	.word	0x0800f6ed
 800f668:	0800f6ed 	.word	0x0800f6ed
 800f66c:	0800f6ed 	.word	0x0800f6ed
 800f670:	0800f6ed 	.word	0x0800f6ed
 800f674:	0800f6ed 	.word	0x0800f6ed
 800f678:	0800f6ed 	.word	0x0800f6ed
 800f67c:	0800f6ed 	.word	0x0800f6ed
 800f680:	0800f6ed 	.word	0x0800f6ed
 800f684:	0800f6ed 	.word	0x0800f6ed
 800f688:	0800f6ed 	.word	0x0800f6ed
 800f68c:	0800f6ed 	.word	0x0800f6ed
 800f690:	0800f6ed 	.word	0x0800f6ed
 800f694:	0800f6ed 	.word	0x0800f6ed
 800f698:	0800f6ed 	.word	0x0800f6ed
 800f69c:	0800f6ed 	.word	0x0800f6ed
 800f6a0:	0800f6ed 	.word	0x0800f6ed
 800f6a4:	0800f6ed 	.word	0x0800f6ed
 800f6a8:	0800f6ed 	.word	0x0800f6ed
 800f6ac:	0800f6ed 	.word	0x0800f6ed
 800f6b0:	0800f6ed 	.word	0x0800f6ed
 800f6b4:	0800f6ed 	.word	0x0800f6ed
 800f6b8:	0800f6ed 	.word	0x0800f6ed
 800f6bc:	0800f6ed 	.word	0x0800f6ed
 800f6c0:	0800f6ed 	.word	0x0800f6ed
 800f6c4:	0800f6ed 	.word	0x0800f6ed
 800f6c8:	0800f6ed 	.word	0x0800f6ed
 800f6cc:	0800f6ed 	.word	0x0800f6ed
 800f6d0:	0800f6ed 	.word	0x0800f6ed
 800f6d4:	0800f6ed 	.word	0x0800f6ed
 800f6d8:	0800f6ed 	.word	0x0800f6ed
 800f6dc:	0800f6ed 	.word	0x0800f6ed
 800f6e0:	0800f6ed 	.word	0x0800f6ed
 800f6e4:	0800f6ed 	.word	0x0800f6ed
 800f6e8:	0800f6ed 	.word	0x0800f6ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f6ec:	bf00      	nop
  }

  return (USBD_OK);
 800f6ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f706:	6879      	ldr	r1, [r7, #4]
 800f708:	4805      	ldr	r0, [pc, #20]	; (800f720 <CDC_Receive_FS+0x24>)
 800f70a:	f7fe fbab 	bl	800de64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f70e:	4804      	ldr	r0, [pc, #16]	; (800f720 <CDC_Receive_FS+0x24>)
 800f710:	f7fe fbc6 	bl	800dea0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f714:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f716:	4618      	mov	r0, r3
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	200008c8 	.word	0x200008c8

0800f724 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f724:	b480      	push	{r7}
 800f726:	b087      	sub	sp, #28
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	4613      	mov	r3, r2
 800f730:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f732:	2300      	movs	r3, #0
 800f734:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	371c      	adds	r7, #28
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
	...

0800f748 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	6039      	str	r1, [r7, #0]
 800f752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2212      	movs	r2, #18
 800f758:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f75a:	4b03      	ldr	r3, [pc, #12]	; (800f768 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr
 800f768:	20000278 	.word	0x20000278

0800f76c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	6039      	str	r1, [r7, #0]
 800f776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	2204      	movs	r2, #4
 800f77c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f77e:	4b03      	ldr	r3, [pc, #12]	; (800f78c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f780:	4618      	mov	r0, r3
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	2000028c 	.word	0x2000028c

0800f790 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	4603      	mov	r3, r0
 800f798:	6039      	str	r1, [r7, #0]
 800f79a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f79c:	79fb      	ldrb	r3, [r7, #7]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d105      	bne.n	800f7ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7a2:	683a      	ldr	r2, [r7, #0]
 800f7a4:	4907      	ldr	r1, [pc, #28]	; (800f7c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f7a6:	4808      	ldr	r0, [pc, #32]	; (800f7c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f7a8:	f7ff fdc2 	bl	800f330 <USBD_GetString>
 800f7ac:	e004      	b.n	800f7b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7ae:	683a      	ldr	r2, [r7, #0]
 800f7b0:	4904      	ldr	r1, [pc, #16]	; (800f7c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f7b2:	4805      	ldr	r0, [pc, #20]	; (800f7c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f7b4:	f7ff fdbc 	bl	800f330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7b8:	4b02      	ldr	r3, [pc, #8]	; (800f7c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20001ba4 	.word	0x20001ba4
 800f7c8:	08012ff8 	.word	0x08012ff8

0800f7cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	6039      	str	r1, [r7, #0]
 800f7d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	4904      	ldr	r1, [pc, #16]	; (800f7ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f7dc:	4804      	ldr	r0, [pc, #16]	; (800f7f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f7de:	f7ff fda7 	bl	800f330 <USBD_GetString>
  return USBD_StrDesc;
 800f7e2:	4b02      	ldr	r3, [pc, #8]	; (800f7ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	20001ba4 	.word	0x20001ba4
 800f7f0:	08013010 	.word	0x08013010

0800f7f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	6039      	str	r1, [r7, #0]
 800f7fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	221a      	movs	r2, #26
 800f804:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f806:	f000 f843 	bl	800f890 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f80a:	4b02      	ldr	r3, [pc, #8]	; (800f814 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3708      	adds	r7, #8
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	20000290 	.word	0x20000290

0800f818 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	6039      	str	r1, [r7, #0]
 800f822:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f824:	79fb      	ldrb	r3, [r7, #7]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d105      	bne.n	800f836 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	4907      	ldr	r1, [pc, #28]	; (800f84c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f82e:	4808      	ldr	r0, [pc, #32]	; (800f850 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f830:	f7ff fd7e 	bl	800f330 <USBD_GetString>
 800f834:	e004      	b.n	800f840 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f836:	683a      	ldr	r2, [r7, #0]
 800f838:	4904      	ldr	r1, [pc, #16]	; (800f84c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f83a:	4805      	ldr	r0, [pc, #20]	; (800f850 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f83c:	f7ff fd78 	bl	800f330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f840:	4b02      	ldr	r3, [pc, #8]	; (800f84c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f842:	4618      	mov	r0, r3
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	20001ba4 	.word	0x20001ba4
 800f850:	08013024 	.word	0x08013024

0800f854 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	6039      	str	r1, [r7, #0]
 800f85e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f860:	79fb      	ldrb	r3, [r7, #7]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d105      	bne.n	800f872 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f866:	683a      	ldr	r2, [r7, #0]
 800f868:	4907      	ldr	r1, [pc, #28]	; (800f888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f86a:	4808      	ldr	r0, [pc, #32]	; (800f88c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f86c:	f7ff fd60 	bl	800f330 <USBD_GetString>
 800f870:	e004      	b.n	800f87c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	4904      	ldr	r1, [pc, #16]	; (800f888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f876:	4805      	ldr	r0, [pc, #20]	; (800f88c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f878:	f7ff fd5a 	bl	800f330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f87c:	4b02      	ldr	r3, [pc, #8]	; (800f888 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	20001ba4 	.word	0x20001ba4
 800f88c:	08013030 	.word	0x08013030

0800f890 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f896:	4b0f      	ldr	r3, [pc, #60]	; (800f8d4 <Get_SerialNum+0x44>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f89c:	4b0e      	ldr	r3, [pc, #56]	; (800f8d8 <Get_SerialNum+0x48>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f8a2:	4b0e      	ldr	r3, [pc, #56]	; (800f8dc <Get_SerialNum+0x4c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d009      	beq.n	800f8ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f8b6:	2208      	movs	r2, #8
 800f8b8:	4909      	ldr	r1, [pc, #36]	; (800f8e0 <Get_SerialNum+0x50>)
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f000 f814 	bl	800f8e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f8c0:	2204      	movs	r2, #4
 800f8c2:	4908      	ldr	r1, [pc, #32]	; (800f8e4 <Get_SerialNum+0x54>)
 800f8c4:	68b8      	ldr	r0, [r7, #8]
 800f8c6:	f000 f80f 	bl	800f8e8 <IntToUnicode>
  }
}
 800f8ca:	bf00      	nop
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	1fff7a10 	.word	0x1fff7a10
 800f8d8:	1fff7a14 	.word	0x1fff7a14
 800f8dc:	1fff7a18 	.word	0x1fff7a18
 800f8e0:	20000292 	.word	0x20000292
 800f8e4:	200002a2 	.word	0x200002a2

0800f8e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	75fb      	strb	r3, [r7, #23]
 800f8fe:	e027      	b.n	800f950 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	0f1b      	lsrs	r3, r3, #28
 800f904:	2b09      	cmp	r3, #9
 800f906:	d80b      	bhi.n	800f920 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	0f1b      	lsrs	r3, r3, #28
 800f90c:	b2da      	uxtb	r2, r3
 800f90e:	7dfb      	ldrb	r3, [r7, #23]
 800f910:	005b      	lsls	r3, r3, #1
 800f912:	4619      	mov	r1, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	440b      	add	r3, r1
 800f918:	3230      	adds	r2, #48	; 0x30
 800f91a:	b2d2      	uxtb	r2, r2
 800f91c:	701a      	strb	r2, [r3, #0]
 800f91e:	e00a      	b.n	800f936 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	0f1b      	lsrs	r3, r3, #28
 800f924:	b2da      	uxtb	r2, r3
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	4619      	mov	r1, r3
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	440b      	add	r3, r1
 800f930:	3237      	adds	r2, #55	; 0x37
 800f932:	b2d2      	uxtb	r2, r2
 800f934:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	011b      	lsls	r3, r3, #4
 800f93a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
 800f93e:	005b      	lsls	r3, r3, #1
 800f940:	3301      	adds	r3, #1
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	4413      	add	r3, r2
 800f946:	2200      	movs	r2, #0
 800f948:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	3301      	adds	r3, #1
 800f94e:	75fb      	strb	r3, [r7, #23]
 800f950:	7dfa      	ldrb	r2, [r7, #23]
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	429a      	cmp	r2, r3
 800f956:	d3d3      	bcc.n	800f900 <IntToUnicode+0x18>
  }
}
 800f958:	bf00      	nop
 800f95a:	bf00      	nop
 800f95c:	371c      	adds	r7, #28
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
	...

0800f968 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08a      	sub	sp, #40	; 0x28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f970:	f107 0314 	add.w	r3, r7, #20
 800f974:	2200      	movs	r2, #0
 800f976:	601a      	str	r2, [r3, #0]
 800f978:	605a      	str	r2, [r3, #4]
 800f97a:	609a      	str	r2, [r3, #8]
 800f97c:	60da      	str	r2, [r3, #12]
 800f97e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f988:	d13a      	bne.n	800fa00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f98a:	2300      	movs	r3, #0
 800f98c:	613b      	str	r3, [r7, #16]
 800f98e:	4b1e      	ldr	r3, [pc, #120]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f992:	4a1d      	ldr	r2, [pc, #116]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f994:	f043 0301 	orr.w	r3, r3, #1
 800f998:	6313      	str	r3, [r2, #48]	; 0x30
 800f99a:	4b1b      	ldr	r3, [pc, #108]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f99e:	f003 0301 	and.w	r3, r3, #1
 800f9a2:	613b      	str	r3, [r7, #16]
 800f9a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f9a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f9aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9b4:	2303      	movs	r3, #3
 800f9b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f9b8:	230a      	movs	r3, #10
 800f9ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9bc:	f107 0314 	add.w	r3, r7, #20
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4812      	ldr	r0, [pc, #72]	; (800fa0c <HAL_PCD_MspInit+0xa4>)
 800f9c4:	f7f5 f92c 	bl	8004c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f9c8:	4b0f      	ldr	r3, [pc, #60]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9cc:	4a0e      	ldr	r2, [pc, #56]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d2:	6353      	str	r3, [r2, #52]	; 0x34
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	60fb      	str	r3, [r7, #12]
 800f9d8:	4b0b      	ldr	r3, [pc, #44]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9dc:	4a0a      	ldr	r2, [pc, #40]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f9de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9e2:	6453      	str	r3, [r2, #68]	; 0x44
 800f9e4:	4b08      	ldr	r3, [pc, #32]	; (800fa08 <HAL_PCD_MspInit+0xa0>)
 800f9e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9ec:	60fb      	str	r3, [r7, #12]
 800f9ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	2043      	movs	r0, #67	; 0x43
 800f9f6:	f7f4 fd3e 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f9fa:	2043      	movs	r0, #67	; 0x43
 800f9fc:	f7f4 fd57 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fa00:	bf00      	nop
 800fa02:	3728      	adds	r7, #40	; 0x28
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	40023800 	.word	0x40023800
 800fa0c:	40020000 	.word	0x40020000

0800fa10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fa24:	4619      	mov	r1, r3
 800fa26:	4610      	mov	r0, r2
 800fa28:	f7fe fb23 	bl	800e072 <USBD_LL_SetupStage>
}
 800fa2c:	bf00      	nop
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fa46:	78fa      	ldrb	r2, [r7, #3]
 800fa48:	6879      	ldr	r1, [r7, #4]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	4413      	add	r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	440b      	add	r3, r1
 800fa54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	78fb      	ldrb	r3, [r7, #3]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	f7fe fb5d 	bl	800e11c <USBD_LL_DataOutStage>
}
 800fa62:	bf00      	nop
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b082      	sub	sp, #8
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	460b      	mov	r3, r1
 800fa74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fa7c:	78fa      	ldrb	r2, [r7, #3]
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	4613      	mov	r3, r2
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	4413      	add	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	440b      	add	r3, r1
 800fa8a:	334c      	adds	r3, #76	; 0x4c
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	4619      	mov	r1, r3
 800fa92:	f7fe fbf6 	bl	800e282 <USBD_LL_DataInStage>
}
 800fa96:	bf00      	nop
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b082      	sub	sp, #8
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fd2a 	bl	800e506 <USBD_LL_SOF>
}
 800fab2:	bf00      	nop
 800fab4:	3708      	adds	r7, #8
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b084      	sub	sp, #16
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fac2:	2301      	movs	r3, #1
 800fac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d102      	bne.n	800fad4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
 800fad2:	e008      	b.n	800fae6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d102      	bne.n	800fae2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fadc:	2301      	movs	r3, #1
 800fade:	73fb      	strb	r3, [r7, #15]
 800fae0:	e001      	b.n	800fae6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fae2:	f7f3 fa1a 	bl	8002f1a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800faec:	7bfa      	ldrb	r2, [r7, #15]
 800faee:	4611      	mov	r1, r2
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe fcca 	bl	800e48a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7fe fc72 	bl	800e3e6 <USBD_LL_Reset>
}
 800fb02:	bf00      	nop
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
	...

0800fb0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fcc5 	bl	800e4aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	6812      	ldr	r2, [r2, #0]
 800fb2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fb32:	f043 0301 	orr.w	r3, r3, #1
 800fb36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d005      	beq.n	800fb4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb40:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <HAL_PCD_SuspendCallback+0x48>)
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	4a03      	ldr	r2, [pc, #12]	; (800fb54 <HAL_PCD_SuspendCallback+0x48>)
 800fb46:	f043 0306 	orr.w	r3, r3, #6
 800fb4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fb4c:	bf00      	nop
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	e000ed00 	.word	0xe000ed00

0800fb58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fe fcb5 	bl	800e4d6 <USBD_LL_Resume>
}
 800fb6c:	bf00      	nop
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb86:	78fa      	ldrb	r2, [r7, #3]
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe fd0d 	bl	800e5aa <USBD_LL_IsoOUTIncomplete>
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbaa:	78fa      	ldrb	r2, [r7, #3]
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fe fcc9 	bl	800e546 <USBD_LL_IsoINIncomplete>
}
 800fbb4:	bf00      	nop
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe fd1f 	bl	800e60e <USBD_LL_DevConnected>
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fd1c 	bl	800e624 <USBD_LL_DevDisconnected>
}
 800fbec:	bf00      	nop
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d13c      	bne.n	800fc7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fc04:	4a20      	ldr	r2, [pc, #128]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a1e      	ldr	r2, [pc, #120]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fc14:	4b1c      	ldr	r3, [pc, #112]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fc1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fc1c:	4b1a      	ldr	r3, [pc, #104]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc1e:	2204      	movs	r2, #4
 800fc20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fc22:	4b19      	ldr	r3, [pc, #100]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc24:	2202      	movs	r2, #2
 800fc26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fc28:	4b17      	ldr	r3, [pc, #92]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fc2e:	4b16      	ldr	r3, [pc, #88]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc30:	2202      	movs	r2, #2
 800fc32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fc34:	4b14      	ldr	r3, [pc, #80]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fc3a:	4b13      	ldr	r3, [pc, #76]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fc40:	4b11      	ldr	r3, [pc, #68]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fc46:	4b10      	ldr	r3, [pc, #64]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fc4c:	4b0e      	ldr	r3, [pc, #56]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fc52:	480d      	ldr	r0, [pc, #52]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc54:	f7f6 f98b 	bl	8005f6e <HAL_PCD_Init>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fc5e:	f7f3 f95c 	bl	8002f1a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fc62:	2180      	movs	r1, #128	; 0x80
 800fc64:	4808      	ldr	r0, [pc, #32]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc66:	f7f7 fbe2 	bl	800742e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fc6a:	2240      	movs	r2, #64	; 0x40
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4806      	ldr	r0, [pc, #24]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc70:	f7f7 fb96 	bl	80073a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fc74:	2280      	movs	r2, #128	; 0x80
 800fc76:	2101      	movs	r1, #1
 800fc78:	4803      	ldr	r0, [pc, #12]	; (800fc88 <USBD_LL_Init+0x94>)
 800fc7a:	f7f7 fb91 	bl	80073a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20001da4 	.word	0x20001da4

0800fc8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7f6 fa80 	bl	80061a8 <HAL_PCD_Start>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 f942 	bl	800ff38 <USBD_Get_USB_Status>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b084      	sub	sp, #16
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	4608      	mov	r0, r1
 800fccc:	4611      	mov	r1, r2
 800fcce:	461a      	mov	r2, r3
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	70fb      	strb	r3, [r7, #3]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	70bb      	strb	r3, [r7, #2]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fcea:	78bb      	ldrb	r3, [r7, #2]
 800fcec:	883a      	ldrh	r2, [r7, #0]
 800fcee:	78f9      	ldrb	r1, [r7, #3]
 800fcf0:	f7f6 ff51 	bl	8006b96 <HAL_PCD_EP_Open>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 f91c 	bl	800ff38 <USBD_Get_USB_Status>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd04:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	460b      	mov	r3, r1
 800fd18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd28:	78fa      	ldrb	r2, [r7, #3]
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7f6 ff9a 	bl	8006c66 <HAL_PCD_EP_Close>
 800fd32:	4603      	mov	r3, r0
 800fd34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f000 f8fd 	bl	800ff38 <USBD_Get_USB_Status>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd42:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	460b      	mov	r3, r1
 800fd56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd66:	78fa      	ldrb	r2, [r7, #3]
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7f7 f872 	bl	8006e54 <HAL_PCD_EP_SetStall>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 f8de 	bl	800ff38 <USBD_Get_USB_Status>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd80:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
 800fd92:	460b      	mov	r3, r1
 800fd94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd96:	2300      	movs	r3, #0
 800fd98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fda4:	78fa      	ldrb	r2, [r7, #3]
 800fda6:	4611      	mov	r1, r2
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f7 f8b7 	bl	8006f1c <HAL_PCD_EP_ClrStall>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdb2:	7bfb      	ldrb	r3, [r7, #15]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f000 f8bf 	bl	800ff38 <USBD_Get_USB_Status>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	da0b      	bge.n	800fdfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fde4:	78fb      	ldrb	r3, [r7, #3]
 800fde6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fdea:	68f9      	ldr	r1, [r7, #12]
 800fdec:	4613      	mov	r3, r2
 800fdee:	00db      	lsls	r3, r3, #3
 800fdf0:	4413      	add	r3, r2
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	440b      	add	r3, r1
 800fdf6:	333e      	adds	r3, #62	; 0x3e
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	e00b      	b.n	800fe14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fdfc:	78fb      	ldrb	r3, [r7, #3]
 800fdfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe02:	68f9      	ldr	r1, [r7, #12]
 800fe04:	4613      	mov	r3, r2
 800fe06:	00db      	lsls	r3, r3, #3
 800fe08:	4413      	add	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	440b      	add	r3, r1
 800fe0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fe12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3714      	adds	r7, #20
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe3a:	78fa      	ldrb	r2, [r7, #3]
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7f6 fe84 	bl	8006b4c <HAL_PCD_SetAddress>
 800fe44:	4603      	mov	r3, r0
 800fe46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe48:	7bfb      	ldrb	r3, [r7, #15]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f000 f874 	bl	800ff38 <USBD_Get_USB_Status>
 800fe50:	4603      	mov	r3, r0
 800fe52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe54:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b086      	sub	sp, #24
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	60f8      	str	r0, [r7, #12]
 800fe66:	607a      	str	r2, [r7, #4]
 800fe68:	603b      	str	r3, [r7, #0]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe7c:	7af9      	ldrb	r1, [r7, #11]
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	f7f6 ff9d 	bl	8006dc0 <HAL_PCD_EP_Transmit>
 800fe86:	4603      	mov	r3, r0
 800fe88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe8a:	7dfb      	ldrb	r3, [r7, #23]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 f853 	bl	800ff38 <USBD_Get_USB_Status>
 800fe92:	4603      	mov	r3, r0
 800fe94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe96:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3718      	adds	r7, #24
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	607a      	str	r2, [r7, #4]
 800feaa:	603b      	str	r3, [r7, #0]
 800feac:	460b      	mov	r3, r1
 800feae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800feb0:	2300      	movs	r3, #0
 800feb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800febe:	7af9      	ldrb	r1, [r7, #11]
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	f7f6 ff19 	bl	8006cfa <HAL_PCD_EP_Receive>
 800fec8:	4603      	mov	r3, r0
 800feca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fecc:	7dfb      	ldrb	r3, [r7, #23]
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 f832 	bl	800ff38 <USBD_Get_USB_Status>
 800fed4:	4603      	mov	r3, r0
 800fed6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fed8:	7dbb      	ldrb	r3, [r7, #22]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3718      	adds	r7, #24
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b082      	sub	sp, #8
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	460b      	mov	r3, r1
 800feec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fef4:	78fa      	ldrb	r2, [r7, #3]
 800fef6:	4611      	mov	r1, r2
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7f6 ff49 	bl	8006d90 <HAL_PCD_EP_GetRxCount>
 800fefe:	4603      	mov	r3, r0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ff10:	4b03      	ldr	r3, [pc, #12]	; (800ff20 <USBD_static_malloc+0x18>)
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	370c      	adds	r7, #12
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	200022b0 	.word	0x200022b0

0800ff24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]

}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b085      	sub	sp, #20
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	4603      	mov	r3, r0
 800ff40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ff46:	79fb      	ldrb	r3, [r7, #7]
 800ff48:	2b03      	cmp	r3, #3
 800ff4a:	d817      	bhi.n	800ff7c <USBD_Get_USB_Status+0x44>
 800ff4c:	a201      	add	r2, pc, #4	; (adr r2, 800ff54 <USBD_Get_USB_Status+0x1c>)
 800ff4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff52:	bf00      	nop
 800ff54:	0800ff65 	.word	0x0800ff65
 800ff58:	0800ff6b 	.word	0x0800ff6b
 800ff5c:	0800ff71 	.word	0x0800ff71
 800ff60:	0800ff77 	.word	0x0800ff77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ff64:	2300      	movs	r3, #0
 800ff66:	73fb      	strb	r3, [r7, #15]
    break;
 800ff68:	e00b      	b.n	800ff82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff6a:	2303      	movs	r3, #3
 800ff6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff6e:	e008      	b.n	800ff82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff70:	2301      	movs	r3, #1
 800ff72:	73fb      	strb	r3, [r7, #15]
    break;
 800ff74:	e005      	b.n	800ff82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff76:	2303      	movs	r3, #3
 800ff78:	73fb      	strb	r3, [r7, #15]
    break;
 800ff7a:	e002      	b.n	800ff82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ff80:	bf00      	nop
  }
  return usb_status;
 800ff82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3714      	adds	r7, #20
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr

0800ff90 <__cvt>:
 800ff90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	ec55 4b10 	vmov	r4, r5, d0
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	460e      	mov	r6, r1
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	462b      	mov	r3, r5
 800ffa0:	bfbb      	ittet	lt
 800ffa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ffa6:	461d      	movlt	r5, r3
 800ffa8:	2300      	movge	r3, #0
 800ffaa:	232d      	movlt	r3, #45	; 0x2d
 800ffac:	700b      	strb	r3, [r1, #0]
 800ffae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ffb4:	4691      	mov	r9, r2
 800ffb6:	f023 0820 	bic.w	r8, r3, #32
 800ffba:	bfbc      	itt	lt
 800ffbc:	4622      	movlt	r2, r4
 800ffbe:	4614      	movlt	r4, r2
 800ffc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffc4:	d005      	beq.n	800ffd2 <__cvt+0x42>
 800ffc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffca:	d100      	bne.n	800ffce <__cvt+0x3e>
 800ffcc:	3601      	adds	r6, #1
 800ffce:	2102      	movs	r1, #2
 800ffd0:	e000      	b.n	800ffd4 <__cvt+0x44>
 800ffd2:	2103      	movs	r1, #3
 800ffd4:	ab03      	add	r3, sp, #12
 800ffd6:	9301      	str	r3, [sp, #4]
 800ffd8:	ab02      	add	r3, sp, #8
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	ec45 4b10 	vmov	d0, r4, r5
 800ffe0:	4653      	mov	r3, sl
 800ffe2:	4632      	mov	r2, r6
 800ffe4:	f000 fe44 	bl	8010c70 <_dtoa_r>
 800ffe8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ffec:	4607      	mov	r7, r0
 800ffee:	d102      	bne.n	800fff6 <__cvt+0x66>
 800fff0:	f019 0f01 	tst.w	r9, #1
 800fff4:	d022      	beq.n	801003c <__cvt+0xac>
 800fff6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fffa:	eb07 0906 	add.w	r9, r7, r6
 800fffe:	d110      	bne.n	8010022 <__cvt+0x92>
 8010000:	783b      	ldrb	r3, [r7, #0]
 8010002:	2b30      	cmp	r3, #48	; 0x30
 8010004:	d10a      	bne.n	801001c <__cvt+0x8c>
 8010006:	2200      	movs	r2, #0
 8010008:	2300      	movs	r3, #0
 801000a:	4620      	mov	r0, r4
 801000c:	4629      	mov	r1, r5
 801000e:	f7f0 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010012:	b918      	cbnz	r0, 801001c <__cvt+0x8c>
 8010014:	f1c6 0601 	rsb	r6, r6, #1
 8010018:	f8ca 6000 	str.w	r6, [sl]
 801001c:	f8da 3000 	ldr.w	r3, [sl]
 8010020:	4499      	add	r9, r3
 8010022:	2200      	movs	r2, #0
 8010024:	2300      	movs	r3, #0
 8010026:	4620      	mov	r0, r4
 8010028:	4629      	mov	r1, r5
 801002a:	f7f0 fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801002e:	b108      	cbz	r0, 8010034 <__cvt+0xa4>
 8010030:	f8cd 900c 	str.w	r9, [sp, #12]
 8010034:	2230      	movs	r2, #48	; 0x30
 8010036:	9b03      	ldr	r3, [sp, #12]
 8010038:	454b      	cmp	r3, r9
 801003a:	d307      	bcc.n	801004c <__cvt+0xbc>
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010040:	1bdb      	subs	r3, r3, r7
 8010042:	4638      	mov	r0, r7
 8010044:	6013      	str	r3, [r2, #0]
 8010046:	b004      	add	sp, #16
 8010048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004c:	1c59      	adds	r1, r3, #1
 801004e:	9103      	str	r1, [sp, #12]
 8010050:	701a      	strb	r2, [r3, #0]
 8010052:	e7f0      	b.n	8010036 <__cvt+0xa6>

08010054 <__exponent>:
 8010054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010056:	4603      	mov	r3, r0
 8010058:	2900      	cmp	r1, #0
 801005a:	bfb8      	it	lt
 801005c:	4249      	neglt	r1, r1
 801005e:	f803 2b02 	strb.w	r2, [r3], #2
 8010062:	bfb4      	ite	lt
 8010064:	222d      	movlt	r2, #45	; 0x2d
 8010066:	222b      	movge	r2, #43	; 0x2b
 8010068:	2909      	cmp	r1, #9
 801006a:	7042      	strb	r2, [r0, #1]
 801006c:	dd2a      	ble.n	80100c4 <__exponent+0x70>
 801006e:	f10d 0207 	add.w	r2, sp, #7
 8010072:	4617      	mov	r7, r2
 8010074:	260a      	movs	r6, #10
 8010076:	4694      	mov	ip, r2
 8010078:	fb91 f5f6 	sdiv	r5, r1, r6
 801007c:	fb06 1415 	mls	r4, r6, r5, r1
 8010080:	3430      	adds	r4, #48	; 0x30
 8010082:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010086:	460c      	mov	r4, r1
 8010088:	2c63      	cmp	r4, #99	; 0x63
 801008a:	f102 32ff 	add.w	r2, r2, #4294967295
 801008e:	4629      	mov	r1, r5
 8010090:	dcf1      	bgt.n	8010076 <__exponent+0x22>
 8010092:	3130      	adds	r1, #48	; 0x30
 8010094:	f1ac 0402 	sub.w	r4, ip, #2
 8010098:	f802 1c01 	strb.w	r1, [r2, #-1]
 801009c:	1c41      	adds	r1, r0, #1
 801009e:	4622      	mov	r2, r4
 80100a0:	42ba      	cmp	r2, r7
 80100a2:	d30a      	bcc.n	80100ba <__exponent+0x66>
 80100a4:	f10d 0209 	add.w	r2, sp, #9
 80100a8:	eba2 020c 	sub.w	r2, r2, ip
 80100ac:	42bc      	cmp	r4, r7
 80100ae:	bf88      	it	hi
 80100b0:	2200      	movhi	r2, #0
 80100b2:	4413      	add	r3, r2
 80100b4:	1a18      	subs	r0, r3, r0
 80100b6:	b003      	add	sp, #12
 80100b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80100be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80100c2:	e7ed      	b.n	80100a0 <__exponent+0x4c>
 80100c4:	2330      	movs	r3, #48	; 0x30
 80100c6:	3130      	adds	r1, #48	; 0x30
 80100c8:	7083      	strb	r3, [r0, #2]
 80100ca:	70c1      	strb	r1, [r0, #3]
 80100cc:	1d03      	adds	r3, r0, #4
 80100ce:	e7f1      	b.n	80100b4 <__exponent+0x60>

080100d0 <_printf_float>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	ed2d 8b02 	vpush	{d8}
 80100d8:	b08d      	sub	sp, #52	; 0x34
 80100da:	460c      	mov	r4, r1
 80100dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100e0:	4616      	mov	r6, r2
 80100e2:	461f      	mov	r7, r3
 80100e4:	4605      	mov	r5, r0
 80100e6:	f000 fcb5 	bl	8010a54 <_localeconv_r>
 80100ea:	f8d0 a000 	ldr.w	sl, [r0]
 80100ee:	4650      	mov	r0, sl
 80100f0:	f7f0 f8be 	bl	8000270 <strlen>
 80100f4:	2300      	movs	r3, #0
 80100f6:	930a      	str	r3, [sp, #40]	; 0x28
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	9305      	str	r3, [sp, #20]
 80100fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010100:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010104:	3307      	adds	r3, #7
 8010106:	f023 0307 	bic.w	r3, r3, #7
 801010a:	f103 0208 	add.w	r2, r3, #8
 801010e:	f8c8 2000 	str.w	r2, [r8]
 8010112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801011a:	9307      	str	r3, [sp, #28]
 801011c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010120:	ee08 0a10 	vmov	s16, r0
 8010124:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010128:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801012c:	4b9e      	ldr	r3, [pc, #632]	; (80103a8 <_printf_float+0x2d8>)
 801012e:	f04f 32ff 	mov.w	r2, #4294967295
 8010132:	f7f0 fcfb 	bl	8000b2c <__aeabi_dcmpun>
 8010136:	bb88      	cbnz	r0, 801019c <_printf_float+0xcc>
 8010138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801013c:	4b9a      	ldr	r3, [pc, #616]	; (80103a8 <_printf_float+0x2d8>)
 801013e:	f04f 32ff 	mov.w	r2, #4294967295
 8010142:	f7f0 fcd5 	bl	8000af0 <__aeabi_dcmple>
 8010146:	bb48      	cbnz	r0, 801019c <_printf_float+0xcc>
 8010148:	2200      	movs	r2, #0
 801014a:	2300      	movs	r3, #0
 801014c:	4640      	mov	r0, r8
 801014e:	4649      	mov	r1, r9
 8010150:	f7f0 fcc4 	bl	8000adc <__aeabi_dcmplt>
 8010154:	b110      	cbz	r0, 801015c <_printf_float+0x8c>
 8010156:	232d      	movs	r3, #45	; 0x2d
 8010158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801015c:	4a93      	ldr	r2, [pc, #588]	; (80103ac <_printf_float+0x2dc>)
 801015e:	4b94      	ldr	r3, [pc, #592]	; (80103b0 <_printf_float+0x2e0>)
 8010160:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010164:	bf94      	ite	ls
 8010166:	4690      	movls	r8, r2
 8010168:	4698      	movhi	r8, r3
 801016a:	2303      	movs	r3, #3
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	9b05      	ldr	r3, [sp, #20]
 8010170:	f023 0304 	bic.w	r3, r3, #4
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	f04f 0900 	mov.w	r9, #0
 801017a:	9700      	str	r7, [sp, #0]
 801017c:	4633      	mov	r3, r6
 801017e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010180:	4621      	mov	r1, r4
 8010182:	4628      	mov	r0, r5
 8010184:	f000 f9da 	bl	801053c <_printf_common>
 8010188:	3001      	adds	r0, #1
 801018a:	f040 8090 	bne.w	80102ae <_printf_float+0x1de>
 801018e:	f04f 30ff 	mov.w	r0, #4294967295
 8010192:	b00d      	add	sp, #52	; 0x34
 8010194:	ecbd 8b02 	vpop	{d8}
 8010198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019c:	4642      	mov	r2, r8
 801019e:	464b      	mov	r3, r9
 80101a0:	4640      	mov	r0, r8
 80101a2:	4649      	mov	r1, r9
 80101a4:	f7f0 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80101a8:	b140      	cbz	r0, 80101bc <_printf_float+0xec>
 80101aa:	464b      	mov	r3, r9
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	bfbc      	itt	lt
 80101b0:	232d      	movlt	r3, #45	; 0x2d
 80101b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101b6:	4a7f      	ldr	r2, [pc, #508]	; (80103b4 <_printf_float+0x2e4>)
 80101b8:	4b7f      	ldr	r3, [pc, #508]	; (80103b8 <_printf_float+0x2e8>)
 80101ba:	e7d1      	b.n	8010160 <_printf_float+0x90>
 80101bc:	6863      	ldr	r3, [r4, #4]
 80101be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101c2:	9206      	str	r2, [sp, #24]
 80101c4:	1c5a      	adds	r2, r3, #1
 80101c6:	d13f      	bne.n	8010248 <_printf_float+0x178>
 80101c8:	2306      	movs	r3, #6
 80101ca:	6063      	str	r3, [r4, #4]
 80101cc:	9b05      	ldr	r3, [sp, #20]
 80101ce:	6861      	ldr	r1, [r4, #4]
 80101d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101d4:	2300      	movs	r3, #0
 80101d6:	9303      	str	r3, [sp, #12]
 80101d8:	ab0a      	add	r3, sp, #40	; 0x28
 80101da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101de:	ab09      	add	r3, sp, #36	; 0x24
 80101e0:	ec49 8b10 	vmov	d0, r8, r9
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	6022      	str	r2, [r4, #0]
 80101e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101ec:	4628      	mov	r0, r5
 80101ee:	f7ff fecf 	bl	800ff90 <__cvt>
 80101f2:	9b06      	ldr	r3, [sp, #24]
 80101f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101f6:	2b47      	cmp	r3, #71	; 0x47
 80101f8:	4680      	mov	r8, r0
 80101fa:	d108      	bne.n	801020e <_printf_float+0x13e>
 80101fc:	1cc8      	adds	r0, r1, #3
 80101fe:	db02      	blt.n	8010206 <_printf_float+0x136>
 8010200:	6863      	ldr	r3, [r4, #4]
 8010202:	4299      	cmp	r1, r3
 8010204:	dd41      	ble.n	801028a <_printf_float+0x1ba>
 8010206:	f1ab 0302 	sub.w	r3, fp, #2
 801020a:	fa5f fb83 	uxtb.w	fp, r3
 801020e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010212:	d820      	bhi.n	8010256 <_printf_float+0x186>
 8010214:	3901      	subs	r1, #1
 8010216:	465a      	mov	r2, fp
 8010218:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801021c:	9109      	str	r1, [sp, #36]	; 0x24
 801021e:	f7ff ff19 	bl	8010054 <__exponent>
 8010222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010224:	1813      	adds	r3, r2, r0
 8010226:	2a01      	cmp	r2, #1
 8010228:	4681      	mov	r9, r0
 801022a:	6123      	str	r3, [r4, #16]
 801022c:	dc02      	bgt.n	8010234 <_printf_float+0x164>
 801022e:	6822      	ldr	r2, [r4, #0]
 8010230:	07d2      	lsls	r2, r2, #31
 8010232:	d501      	bpl.n	8010238 <_printf_float+0x168>
 8010234:	3301      	adds	r3, #1
 8010236:	6123      	str	r3, [r4, #16]
 8010238:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801023c:	2b00      	cmp	r3, #0
 801023e:	d09c      	beq.n	801017a <_printf_float+0xaa>
 8010240:	232d      	movs	r3, #45	; 0x2d
 8010242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010246:	e798      	b.n	801017a <_printf_float+0xaa>
 8010248:	9a06      	ldr	r2, [sp, #24]
 801024a:	2a47      	cmp	r2, #71	; 0x47
 801024c:	d1be      	bne.n	80101cc <_printf_float+0xfc>
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1bc      	bne.n	80101cc <_printf_float+0xfc>
 8010252:	2301      	movs	r3, #1
 8010254:	e7b9      	b.n	80101ca <_printf_float+0xfa>
 8010256:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801025a:	d118      	bne.n	801028e <_printf_float+0x1be>
 801025c:	2900      	cmp	r1, #0
 801025e:	6863      	ldr	r3, [r4, #4]
 8010260:	dd0b      	ble.n	801027a <_printf_float+0x1aa>
 8010262:	6121      	str	r1, [r4, #16]
 8010264:	b913      	cbnz	r3, 801026c <_printf_float+0x19c>
 8010266:	6822      	ldr	r2, [r4, #0]
 8010268:	07d0      	lsls	r0, r2, #31
 801026a:	d502      	bpl.n	8010272 <_printf_float+0x1a2>
 801026c:	3301      	adds	r3, #1
 801026e:	440b      	add	r3, r1
 8010270:	6123      	str	r3, [r4, #16]
 8010272:	65a1      	str	r1, [r4, #88]	; 0x58
 8010274:	f04f 0900 	mov.w	r9, #0
 8010278:	e7de      	b.n	8010238 <_printf_float+0x168>
 801027a:	b913      	cbnz	r3, 8010282 <_printf_float+0x1b2>
 801027c:	6822      	ldr	r2, [r4, #0]
 801027e:	07d2      	lsls	r2, r2, #31
 8010280:	d501      	bpl.n	8010286 <_printf_float+0x1b6>
 8010282:	3302      	adds	r3, #2
 8010284:	e7f4      	b.n	8010270 <_printf_float+0x1a0>
 8010286:	2301      	movs	r3, #1
 8010288:	e7f2      	b.n	8010270 <_printf_float+0x1a0>
 801028a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801028e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010290:	4299      	cmp	r1, r3
 8010292:	db05      	blt.n	80102a0 <_printf_float+0x1d0>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	6121      	str	r1, [r4, #16]
 8010298:	07d8      	lsls	r0, r3, #31
 801029a:	d5ea      	bpl.n	8010272 <_printf_float+0x1a2>
 801029c:	1c4b      	adds	r3, r1, #1
 801029e:	e7e7      	b.n	8010270 <_printf_float+0x1a0>
 80102a0:	2900      	cmp	r1, #0
 80102a2:	bfd4      	ite	le
 80102a4:	f1c1 0202 	rsble	r2, r1, #2
 80102a8:	2201      	movgt	r2, #1
 80102aa:	4413      	add	r3, r2
 80102ac:	e7e0      	b.n	8010270 <_printf_float+0x1a0>
 80102ae:	6823      	ldr	r3, [r4, #0]
 80102b0:	055a      	lsls	r2, r3, #21
 80102b2:	d407      	bmi.n	80102c4 <_printf_float+0x1f4>
 80102b4:	6923      	ldr	r3, [r4, #16]
 80102b6:	4642      	mov	r2, r8
 80102b8:	4631      	mov	r1, r6
 80102ba:	4628      	mov	r0, r5
 80102bc:	47b8      	blx	r7
 80102be:	3001      	adds	r0, #1
 80102c0:	d12c      	bne.n	801031c <_printf_float+0x24c>
 80102c2:	e764      	b.n	801018e <_printf_float+0xbe>
 80102c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102c8:	f240 80e0 	bls.w	801048c <_printf_float+0x3bc>
 80102cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102d0:	2200      	movs	r2, #0
 80102d2:	2300      	movs	r3, #0
 80102d4:	f7f0 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d034      	beq.n	8010346 <_printf_float+0x276>
 80102dc:	4a37      	ldr	r2, [pc, #220]	; (80103bc <_printf_float+0x2ec>)
 80102de:	2301      	movs	r3, #1
 80102e0:	4631      	mov	r1, r6
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	f43f af51 	beq.w	801018e <_printf_float+0xbe>
 80102ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102f0:	429a      	cmp	r2, r3
 80102f2:	db02      	blt.n	80102fa <_printf_float+0x22a>
 80102f4:	6823      	ldr	r3, [r4, #0]
 80102f6:	07d8      	lsls	r0, r3, #31
 80102f8:	d510      	bpl.n	801031c <_printf_float+0x24c>
 80102fa:	ee18 3a10 	vmov	r3, s16
 80102fe:	4652      	mov	r2, sl
 8010300:	4631      	mov	r1, r6
 8010302:	4628      	mov	r0, r5
 8010304:	47b8      	blx	r7
 8010306:	3001      	adds	r0, #1
 8010308:	f43f af41 	beq.w	801018e <_printf_float+0xbe>
 801030c:	f04f 0800 	mov.w	r8, #0
 8010310:	f104 091a 	add.w	r9, r4, #26
 8010314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010316:	3b01      	subs	r3, #1
 8010318:	4543      	cmp	r3, r8
 801031a:	dc09      	bgt.n	8010330 <_printf_float+0x260>
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	079b      	lsls	r3, r3, #30
 8010320:	f100 8107 	bmi.w	8010532 <_printf_float+0x462>
 8010324:	68e0      	ldr	r0, [r4, #12]
 8010326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010328:	4298      	cmp	r0, r3
 801032a:	bfb8      	it	lt
 801032c:	4618      	movlt	r0, r3
 801032e:	e730      	b.n	8010192 <_printf_float+0xc2>
 8010330:	2301      	movs	r3, #1
 8010332:	464a      	mov	r2, r9
 8010334:	4631      	mov	r1, r6
 8010336:	4628      	mov	r0, r5
 8010338:	47b8      	blx	r7
 801033a:	3001      	adds	r0, #1
 801033c:	f43f af27 	beq.w	801018e <_printf_float+0xbe>
 8010340:	f108 0801 	add.w	r8, r8, #1
 8010344:	e7e6      	b.n	8010314 <_printf_float+0x244>
 8010346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010348:	2b00      	cmp	r3, #0
 801034a:	dc39      	bgt.n	80103c0 <_printf_float+0x2f0>
 801034c:	4a1b      	ldr	r2, [pc, #108]	; (80103bc <_printf_float+0x2ec>)
 801034e:	2301      	movs	r3, #1
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af19 	beq.w	801018e <_printf_float+0xbe>
 801035c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010360:	4313      	orrs	r3, r2
 8010362:	d102      	bne.n	801036a <_printf_float+0x29a>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	07d9      	lsls	r1, r3, #31
 8010368:	d5d8      	bpl.n	801031c <_printf_float+0x24c>
 801036a:	ee18 3a10 	vmov	r3, s16
 801036e:	4652      	mov	r2, sl
 8010370:	4631      	mov	r1, r6
 8010372:	4628      	mov	r0, r5
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	f43f af09 	beq.w	801018e <_printf_float+0xbe>
 801037c:	f04f 0900 	mov.w	r9, #0
 8010380:	f104 0a1a 	add.w	sl, r4, #26
 8010384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010386:	425b      	negs	r3, r3
 8010388:	454b      	cmp	r3, r9
 801038a:	dc01      	bgt.n	8010390 <_printf_float+0x2c0>
 801038c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801038e:	e792      	b.n	80102b6 <_printf_float+0x1e6>
 8010390:	2301      	movs	r3, #1
 8010392:	4652      	mov	r2, sl
 8010394:	4631      	mov	r1, r6
 8010396:	4628      	mov	r0, r5
 8010398:	47b8      	blx	r7
 801039a:	3001      	adds	r0, #1
 801039c:	f43f aef7 	beq.w	801018e <_printf_float+0xbe>
 80103a0:	f109 0901 	add.w	r9, r9, #1
 80103a4:	e7ee      	b.n	8010384 <_printf_float+0x2b4>
 80103a6:	bf00      	nop
 80103a8:	7fefffff 	.word	0x7fefffff
 80103ac:	08013074 	.word	0x08013074
 80103b0:	08013078 	.word	0x08013078
 80103b4:	0801307c 	.word	0x0801307c
 80103b8:	08013080 	.word	0x08013080
 80103bc:	08013084 	.word	0x08013084
 80103c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103c4:	429a      	cmp	r2, r3
 80103c6:	bfa8      	it	ge
 80103c8:	461a      	movge	r2, r3
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	4691      	mov	r9, r2
 80103ce:	dc37      	bgt.n	8010440 <_printf_float+0x370>
 80103d0:	f04f 0b00 	mov.w	fp, #0
 80103d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103d8:	f104 021a 	add.w	r2, r4, #26
 80103dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103de:	9305      	str	r3, [sp, #20]
 80103e0:	eba3 0309 	sub.w	r3, r3, r9
 80103e4:	455b      	cmp	r3, fp
 80103e6:	dc33      	bgt.n	8010450 <_printf_float+0x380>
 80103e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103ec:	429a      	cmp	r2, r3
 80103ee:	db3b      	blt.n	8010468 <_printf_float+0x398>
 80103f0:	6823      	ldr	r3, [r4, #0]
 80103f2:	07da      	lsls	r2, r3, #31
 80103f4:	d438      	bmi.n	8010468 <_printf_float+0x398>
 80103f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80103fa:	eba2 0903 	sub.w	r9, r2, r3
 80103fe:	9b05      	ldr	r3, [sp, #20]
 8010400:	1ad2      	subs	r2, r2, r3
 8010402:	4591      	cmp	r9, r2
 8010404:	bfa8      	it	ge
 8010406:	4691      	movge	r9, r2
 8010408:	f1b9 0f00 	cmp.w	r9, #0
 801040c:	dc35      	bgt.n	801047a <_printf_float+0x3aa>
 801040e:	f04f 0800 	mov.w	r8, #0
 8010412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010416:	f104 0a1a 	add.w	sl, r4, #26
 801041a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801041e:	1a9b      	subs	r3, r3, r2
 8010420:	eba3 0309 	sub.w	r3, r3, r9
 8010424:	4543      	cmp	r3, r8
 8010426:	f77f af79 	ble.w	801031c <_printf_float+0x24c>
 801042a:	2301      	movs	r3, #1
 801042c:	4652      	mov	r2, sl
 801042e:	4631      	mov	r1, r6
 8010430:	4628      	mov	r0, r5
 8010432:	47b8      	blx	r7
 8010434:	3001      	adds	r0, #1
 8010436:	f43f aeaa 	beq.w	801018e <_printf_float+0xbe>
 801043a:	f108 0801 	add.w	r8, r8, #1
 801043e:	e7ec      	b.n	801041a <_printf_float+0x34a>
 8010440:	4613      	mov	r3, r2
 8010442:	4631      	mov	r1, r6
 8010444:	4642      	mov	r2, r8
 8010446:	4628      	mov	r0, r5
 8010448:	47b8      	blx	r7
 801044a:	3001      	adds	r0, #1
 801044c:	d1c0      	bne.n	80103d0 <_printf_float+0x300>
 801044e:	e69e      	b.n	801018e <_printf_float+0xbe>
 8010450:	2301      	movs	r3, #1
 8010452:	4631      	mov	r1, r6
 8010454:	4628      	mov	r0, r5
 8010456:	9205      	str	r2, [sp, #20]
 8010458:	47b8      	blx	r7
 801045a:	3001      	adds	r0, #1
 801045c:	f43f ae97 	beq.w	801018e <_printf_float+0xbe>
 8010460:	9a05      	ldr	r2, [sp, #20]
 8010462:	f10b 0b01 	add.w	fp, fp, #1
 8010466:	e7b9      	b.n	80103dc <_printf_float+0x30c>
 8010468:	ee18 3a10 	vmov	r3, s16
 801046c:	4652      	mov	r2, sl
 801046e:	4631      	mov	r1, r6
 8010470:	4628      	mov	r0, r5
 8010472:	47b8      	blx	r7
 8010474:	3001      	adds	r0, #1
 8010476:	d1be      	bne.n	80103f6 <_printf_float+0x326>
 8010478:	e689      	b.n	801018e <_printf_float+0xbe>
 801047a:	9a05      	ldr	r2, [sp, #20]
 801047c:	464b      	mov	r3, r9
 801047e:	4442      	add	r2, r8
 8010480:	4631      	mov	r1, r6
 8010482:	4628      	mov	r0, r5
 8010484:	47b8      	blx	r7
 8010486:	3001      	adds	r0, #1
 8010488:	d1c1      	bne.n	801040e <_printf_float+0x33e>
 801048a:	e680      	b.n	801018e <_printf_float+0xbe>
 801048c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801048e:	2a01      	cmp	r2, #1
 8010490:	dc01      	bgt.n	8010496 <_printf_float+0x3c6>
 8010492:	07db      	lsls	r3, r3, #31
 8010494:	d53a      	bpl.n	801050c <_printf_float+0x43c>
 8010496:	2301      	movs	r3, #1
 8010498:	4642      	mov	r2, r8
 801049a:	4631      	mov	r1, r6
 801049c:	4628      	mov	r0, r5
 801049e:	47b8      	blx	r7
 80104a0:	3001      	adds	r0, #1
 80104a2:	f43f ae74 	beq.w	801018e <_printf_float+0xbe>
 80104a6:	ee18 3a10 	vmov	r3, s16
 80104aa:	4652      	mov	r2, sl
 80104ac:	4631      	mov	r1, r6
 80104ae:	4628      	mov	r0, r5
 80104b0:	47b8      	blx	r7
 80104b2:	3001      	adds	r0, #1
 80104b4:	f43f ae6b 	beq.w	801018e <_printf_float+0xbe>
 80104b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104bc:	2200      	movs	r2, #0
 80104be:	2300      	movs	r3, #0
 80104c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80104c4:	f7f0 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80104c8:	b9d8      	cbnz	r0, 8010502 <_printf_float+0x432>
 80104ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80104ce:	f108 0201 	add.w	r2, r8, #1
 80104d2:	4631      	mov	r1, r6
 80104d4:	4628      	mov	r0, r5
 80104d6:	47b8      	blx	r7
 80104d8:	3001      	adds	r0, #1
 80104da:	d10e      	bne.n	80104fa <_printf_float+0x42a>
 80104dc:	e657      	b.n	801018e <_printf_float+0xbe>
 80104de:	2301      	movs	r3, #1
 80104e0:	4652      	mov	r2, sl
 80104e2:	4631      	mov	r1, r6
 80104e4:	4628      	mov	r0, r5
 80104e6:	47b8      	blx	r7
 80104e8:	3001      	adds	r0, #1
 80104ea:	f43f ae50 	beq.w	801018e <_printf_float+0xbe>
 80104ee:	f108 0801 	add.w	r8, r8, #1
 80104f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104f4:	3b01      	subs	r3, #1
 80104f6:	4543      	cmp	r3, r8
 80104f8:	dcf1      	bgt.n	80104de <_printf_float+0x40e>
 80104fa:	464b      	mov	r3, r9
 80104fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010500:	e6da      	b.n	80102b8 <_printf_float+0x1e8>
 8010502:	f04f 0800 	mov.w	r8, #0
 8010506:	f104 0a1a 	add.w	sl, r4, #26
 801050a:	e7f2      	b.n	80104f2 <_printf_float+0x422>
 801050c:	2301      	movs	r3, #1
 801050e:	4642      	mov	r2, r8
 8010510:	e7df      	b.n	80104d2 <_printf_float+0x402>
 8010512:	2301      	movs	r3, #1
 8010514:	464a      	mov	r2, r9
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	f43f ae36 	beq.w	801018e <_printf_float+0xbe>
 8010522:	f108 0801 	add.w	r8, r8, #1
 8010526:	68e3      	ldr	r3, [r4, #12]
 8010528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801052a:	1a5b      	subs	r3, r3, r1
 801052c:	4543      	cmp	r3, r8
 801052e:	dcf0      	bgt.n	8010512 <_printf_float+0x442>
 8010530:	e6f8      	b.n	8010324 <_printf_float+0x254>
 8010532:	f04f 0800 	mov.w	r8, #0
 8010536:	f104 0919 	add.w	r9, r4, #25
 801053a:	e7f4      	b.n	8010526 <_printf_float+0x456>

0801053c <_printf_common>:
 801053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010540:	4616      	mov	r6, r2
 8010542:	4699      	mov	r9, r3
 8010544:	688a      	ldr	r2, [r1, #8]
 8010546:	690b      	ldr	r3, [r1, #16]
 8010548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801054c:	4293      	cmp	r3, r2
 801054e:	bfb8      	it	lt
 8010550:	4613      	movlt	r3, r2
 8010552:	6033      	str	r3, [r6, #0]
 8010554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010558:	4607      	mov	r7, r0
 801055a:	460c      	mov	r4, r1
 801055c:	b10a      	cbz	r2, 8010562 <_printf_common+0x26>
 801055e:	3301      	adds	r3, #1
 8010560:	6033      	str	r3, [r6, #0]
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	0699      	lsls	r1, r3, #26
 8010566:	bf42      	ittt	mi
 8010568:	6833      	ldrmi	r3, [r6, #0]
 801056a:	3302      	addmi	r3, #2
 801056c:	6033      	strmi	r3, [r6, #0]
 801056e:	6825      	ldr	r5, [r4, #0]
 8010570:	f015 0506 	ands.w	r5, r5, #6
 8010574:	d106      	bne.n	8010584 <_printf_common+0x48>
 8010576:	f104 0a19 	add.w	sl, r4, #25
 801057a:	68e3      	ldr	r3, [r4, #12]
 801057c:	6832      	ldr	r2, [r6, #0]
 801057e:	1a9b      	subs	r3, r3, r2
 8010580:	42ab      	cmp	r3, r5
 8010582:	dc26      	bgt.n	80105d2 <_printf_common+0x96>
 8010584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010588:	1e13      	subs	r3, r2, #0
 801058a:	6822      	ldr	r2, [r4, #0]
 801058c:	bf18      	it	ne
 801058e:	2301      	movne	r3, #1
 8010590:	0692      	lsls	r2, r2, #26
 8010592:	d42b      	bmi.n	80105ec <_printf_common+0xb0>
 8010594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010598:	4649      	mov	r1, r9
 801059a:	4638      	mov	r0, r7
 801059c:	47c0      	blx	r8
 801059e:	3001      	adds	r0, #1
 80105a0:	d01e      	beq.n	80105e0 <_printf_common+0xa4>
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	6922      	ldr	r2, [r4, #16]
 80105a6:	f003 0306 	and.w	r3, r3, #6
 80105aa:	2b04      	cmp	r3, #4
 80105ac:	bf02      	ittt	eq
 80105ae:	68e5      	ldreq	r5, [r4, #12]
 80105b0:	6833      	ldreq	r3, [r6, #0]
 80105b2:	1aed      	subeq	r5, r5, r3
 80105b4:	68a3      	ldr	r3, [r4, #8]
 80105b6:	bf0c      	ite	eq
 80105b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105bc:	2500      	movne	r5, #0
 80105be:	4293      	cmp	r3, r2
 80105c0:	bfc4      	itt	gt
 80105c2:	1a9b      	subgt	r3, r3, r2
 80105c4:	18ed      	addgt	r5, r5, r3
 80105c6:	2600      	movs	r6, #0
 80105c8:	341a      	adds	r4, #26
 80105ca:	42b5      	cmp	r5, r6
 80105cc:	d11a      	bne.n	8010604 <_printf_common+0xc8>
 80105ce:	2000      	movs	r0, #0
 80105d0:	e008      	b.n	80105e4 <_printf_common+0xa8>
 80105d2:	2301      	movs	r3, #1
 80105d4:	4652      	mov	r2, sl
 80105d6:	4649      	mov	r1, r9
 80105d8:	4638      	mov	r0, r7
 80105da:	47c0      	blx	r8
 80105dc:	3001      	adds	r0, #1
 80105de:	d103      	bne.n	80105e8 <_printf_common+0xac>
 80105e0:	f04f 30ff 	mov.w	r0, #4294967295
 80105e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e8:	3501      	adds	r5, #1
 80105ea:	e7c6      	b.n	801057a <_printf_common+0x3e>
 80105ec:	18e1      	adds	r1, r4, r3
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	2030      	movs	r0, #48	; 0x30
 80105f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105f6:	4422      	add	r2, r4
 80105f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010600:	3302      	adds	r3, #2
 8010602:	e7c7      	b.n	8010594 <_printf_common+0x58>
 8010604:	2301      	movs	r3, #1
 8010606:	4622      	mov	r2, r4
 8010608:	4649      	mov	r1, r9
 801060a:	4638      	mov	r0, r7
 801060c:	47c0      	blx	r8
 801060e:	3001      	adds	r0, #1
 8010610:	d0e6      	beq.n	80105e0 <_printf_common+0xa4>
 8010612:	3601      	adds	r6, #1
 8010614:	e7d9      	b.n	80105ca <_printf_common+0x8e>
	...

08010618 <_printf_i>:
 8010618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801061c:	7e0f      	ldrb	r7, [r1, #24]
 801061e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010620:	2f78      	cmp	r7, #120	; 0x78
 8010622:	4691      	mov	r9, r2
 8010624:	4680      	mov	r8, r0
 8010626:	460c      	mov	r4, r1
 8010628:	469a      	mov	sl, r3
 801062a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801062e:	d807      	bhi.n	8010640 <_printf_i+0x28>
 8010630:	2f62      	cmp	r7, #98	; 0x62
 8010632:	d80a      	bhi.n	801064a <_printf_i+0x32>
 8010634:	2f00      	cmp	r7, #0
 8010636:	f000 80d4 	beq.w	80107e2 <_printf_i+0x1ca>
 801063a:	2f58      	cmp	r7, #88	; 0x58
 801063c:	f000 80c0 	beq.w	80107c0 <_printf_i+0x1a8>
 8010640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010648:	e03a      	b.n	80106c0 <_printf_i+0xa8>
 801064a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801064e:	2b15      	cmp	r3, #21
 8010650:	d8f6      	bhi.n	8010640 <_printf_i+0x28>
 8010652:	a101      	add	r1, pc, #4	; (adr r1, 8010658 <_printf_i+0x40>)
 8010654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010658:	080106b1 	.word	0x080106b1
 801065c:	080106c5 	.word	0x080106c5
 8010660:	08010641 	.word	0x08010641
 8010664:	08010641 	.word	0x08010641
 8010668:	08010641 	.word	0x08010641
 801066c:	08010641 	.word	0x08010641
 8010670:	080106c5 	.word	0x080106c5
 8010674:	08010641 	.word	0x08010641
 8010678:	08010641 	.word	0x08010641
 801067c:	08010641 	.word	0x08010641
 8010680:	08010641 	.word	0x08010641
 8010684:	080107c9 	.word	0x080107c9
 8010688:	080106f1 	.word	0x080106f1
 801068c:	08010783 	.word	0x08010783
 8010690:	08010641 	.word	0x08010641
 8010694:	08010641 	.word	0x08010641
 8010698:	080107eb 	.word	0x080107eb
 801069c:	08010641 	.word	0x08010641
 80106a0:	080106f1 	.word	0x080106f1
 80106a4:	08010641 	.word	0x08010641
 80106a8:	08010641 	.word	0x08010641
 80106ac:	0801078b 	.word	0x0801078b
 80106b0:	682b      	ldr	r3, [r5, #0]
 80106b2:	1d1a      	adds	r2, r3, #4
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	602a      	str	r2, [r5, #0]
 80106b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106c0:	2301      	movs	r3, #1
 80106c2:	e09f      	b.n	8010804 <_printf_i+0x1ec>
 80106c4:	6820      	ldr	r0, [r4, #0]
 80106c6:	682b      	ldr	r3, [r5, #0]
 80106c8:	0607      	lsls	r7, r0, #24
 80106ca:	f103 0104 	add.w	r1, r3, #4
 80106ce:	6029      	str	r1, [r5, #0]
 80106d0:	d501      	bpl.n	80106d6 <_printf_i+0xbe>
 80106d2:	681e      	ldr	r6, [r3, #0]
 80106d4:	e003      	b.n	80106de <_printf_i+0xc6>
 80106d6:	0646      	lsls	r6, r0, #25
 80106d8:	d5fb      	bpl.n	80106d2 <_printf_i+0xba>
 80106da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80106de:	2e00      	cmp	r6, #0
 80106e0:	da03      	bge.n	80106ea <_printf_i+0xd2>
 80106e2:	232d      	movs	r3, #45	; 0x2d
 80106e4:	4276      	negs	r6, r6
 80106e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ea:	485a      	ldr	r0, [pc, #360]	; (8010854 <_printf_i+0x23c>)
 80106ec:	230a      	movs	r3, #10
 80106ee:	e012      	b.n	8010716 <_printf_i+0xfe>
 80106f0:	682b      	ldr	r3, [r5, #0]
 80106f2:	6820      	ldr	r0, [r4, #0]
 80106f4:	1d19      	adds	r1, r3, #4
 80106f6:	6029      	str	r1, [r5, #0]
 80106f8:	0605      	lsls	r5, r0, #24
 80106fa:	d501      	bpl.n	8010700 <_printf_i+0xe8>
 80106fc:	681e      	ldr	r6, [r3, #0]
 80106fe:	e002      	b.n	8010706 <_printf_i+0xee>
 8010700:	0641      	lsls	r1, r0, #25
 8010702:	d5fb      	bpl.n	80106fc <_printf_i+0xe4>
 8010704:	881e      	ldrh	r6, [r3, #0]
 8010706:	4853      	ldr	r0, [pc, #332]	; (8010854 <_printf_i+0x23c>)
 8010708:	2f6f      	cmp	r7, #111	; 0x6f
 801070a:	bf0c      	ite	eq
 801070c:	2308      	moveq	r3, #8
 801070e:	230a      	movne	r3, #10
 8010710:	2100      	movs	r1, #0
 8010712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010716:	6865      	ldr	r5, [r4, #4]
 8010718:	60a5      	str	r5, [r4, #8]
 801071a:	2d00      	cmp	r5, #0
 801071c:	bfa2      	ittt	ge
 801071e:	6821      	ldrge	r1, [r4, #0]
 8010720:	f021 0104 	bicge.w	r1, r1, #4
 8010724:	6021      	strge	r1, [r4, #0]
 8010726:	b90e      	cbnz	r6, 801072c <_printf_i+0x114>
 8010728:	2d00      	cmp	r5, #0
 801072a:	d04b      	beq.n	80107c4 <_printf_i+0x1ac>
 801072c:	4615      	mov	r5, r2
 801072e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010732:	fb03 6711 	mls	r7, r3, r1, r6
 8010736:	5dc7      	ldrb	r7, [r0, r7]
 8010738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801073c:	4637      	mov	r7, r6
 801073e:	42bb      	cmp	r3, r7
 8010740:	460e      	mov	r6, r1
 8010742:	d9f4      	bls.n	801072e <_printf_i+0x116>
 8010744:	2b08      	cmp	r3, #8
 8010746:	d10b      	bne.n	8010760 <_printf_i+0x148>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	07de      	lsls	r6, r3, #31
 801074c:	d508      	bpl.n	8010760 <_printf_i+0x148>
 801074e:	6923      	ldr	r3, [r4, #16]
 8010750:	6861      	ldr	r1, [r4, #4]
 8010752:	4299      	cmp	r1, r3
 8010754:	bfde      	ittt	le
 8010756:	2330      	movle	r3, #48	; 0x30
 8010758:	f805 3c01 	strble.w	r3, [r5, #-1]
 801075c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010760:	1b52      	subs	r2, r2, r5
 8010762:	6122      	str	r2, [r4, #16]
 8010764:	f8cd a000 	str.w	sl, [sp]
 8010768:	464b      	mov	r3, r9
 801076a:	aa03      	add	r2, sp, #12
 801076c:	4621      	mov	r1, r4
 801076e:	4640      	mov	r0, r8
 8010770:	f7ff fee4 	bl	801053c <_printf_common>
 8010774:	3001      	adds	r0, #1
 8010776:	d14a      	bne.n	801080e <_printf_i+0x1f6>
 8010778:	f04f 30ff 	mov.w	r0, #4294967295
 801077c:	b004      	add	sp, #16
 801077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	f043 0320 	orr.w	r3, r3, #32
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	4833      	ldr	r0, [pc, #204]	; (8010858 <_printf_i+0x240>)
 801078c:	2778      	movs	r7, #120	; 0x78
 801078e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010792:	6823      	ldr	r3, [r4, #0]
 8010794:	6829      	ldr	r1, [r5, #0]
 8010796:	061f      	lsls	r7, r3, #24
 8010798:	f851 6b04 	ldr.w	r6, [r1], #4
 801079c:	d402      	bmi.n	80107a4 <_printf_i+0x18c>
 801079e:	065f      	lsls	r7, r3, #25
 80107a0:	bf48      	it	mi
 80107a2:	b2b6      	uxthmi	r6, r6
 80107a4:	07df      	lsls	r7, r3, #31
 80107a6:	bf48      	it	mi
 80107a8:	f043 0320 	orrmi.w	r3, r3, #32
 80107ac:	6029      	str	r1, [r5, #0]
 80107ae:	bf48      	it	mi
 80107b0:	6023      	strmi	r3, [r4, #0]
 80107b2:	b91e      	cbnz	r6, 80107bc <_printf_i+0x1a4>
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	f023 0320 	bic.w	r3, r3, #32
 80107ba:	6023      	str	r3, [r4, #0]
 80107bc:	2310      	movs	r3, #16
 80107be:	e7a7      	b.n	8010710 <_printf_i+0xf8>
 80107c0:	4824      	ldr	r0, [pc, #144]	; (8010854 <_printf_i+0x23c>)
 80107c2:	e7e4      	b.n	801078e <_printf_i+0x176>
 80107c4:	4615      	mov	r5, r2
 80107c6:	e7bd      	b.n	8010744 <_printf_i+0x12c>
 80107c8:	682b      	ldr	r3, [r5, #0]
 80107ca:	6826      	ldr	r6, [r4, #0]
 80107cc:	6961      	ldr	r1, [r4, #20]
 80107ce:	1d18      	adds	r0, r3, #4
 80107d0:	6028      	str	r0, [r5, #0]
 80107d2:	0635      	lsls	r5, r6, #24
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	d501      	bpl.n	80107dc <_printf_i+0x1c4>
 80107d8:	6019      	str	r1, [r3, #0]
 80107da:	e002      	b.n	80107e2 <_printf_i+0x1ca>
 80107dc:	0670      	lsls	r0, r6, #25
 80107de:	d5fb      	bpl.n	80107d8 <_printf_i+0x1c0>
 80107e0:	8019      	strh	r1, [r3, #0]
 80107e2:	2300      	movs	r3, #0
 80107e4:	6123      	str	r3, [r4, #16]
 80107e6:	4615      	mov	r5, r2
 80107e8:	e7bc      	b.n	8010764 <_printf_i+0x14c>
 80107ea:	682b      	ldr	r3, [r5, #0]
 80107ec:	1d1a      	adds	r2, r3, #4
 80107ee:	602a      	str	r2, [r5, #0]
 80107f0:	681d      	ldr	r5, [r3, #0]
 80107f2:	6862      	ldr	r2, [r4, #4]
 80107f4:	2100      	movs	r1, #0
 80107f6:	4628      	mov	r0, r5
 80107f8:	f7ef fcea 	bl	80001d0 <memchr>
 80107fc:	b108      	cbz	r0, 8010802 <_printf_i+0x1ea>
 80107fe:	1b40      	subs	r0, r0, r5
 8010800:	6060      	str	r0, [r4, #4]
 8010802:	6863      	ldr	r3, [r4, #4]
 8010804:	6123      	str	r3, [r4, #16]
 8010806:	2300      	movs	r3, #0
 8010808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801080c:	e7aa      	b.n	8010764 <_printf_i+0x14c>
 801080e:	6923      	ldr	r3, [r4, #16]
 8010810:	462a      	mov	r2, r5
 8010812:	4649      	mov	r1, r9
 8010814:	4640      	mov	r0, r8
 8010816:	47d0      	blx	sl
 8010818:	3001      	adds	r0, #1
 801081a:	d0ad      	beq.n	8010778 <_printf_i+0x160>
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	079b      	lsls	r3, r3, #30
 8010820:	d413      	bmi.n	801084a <_printf_i+0x232>
 8010822:	68e0      	ldr	r0, [r4, #12]
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	4298      	cmp	r0, r3
 8010828:	bfb8      	it	lt
 801082a:	4618      	movlt	r0, r3
 801082c:	e7a6      	b.n	801077c <_printf_i+0x164>
 801082e:	2301      	movs	r3, #1
 8010830:	4632      	mov	r2, r6
 8010832:	4649      	mov	r1, r9
 8010834:	4640      	mov	r0, r8
 8010836:	47d0      	blx	sl
 8010838:	3001      	adds	r0, #1
 801083a:	d09d      	beq.n	8010778 <_printf_i+0x160>
 801083c:	3501      	adds	r5, #1
 801083e:	68e3      	ldr	r3, [r4, #12]
 8010840:	9903      	ldr	r1, [sp, #12]
 8010842:	1a5b      	subs	r3, r3, r1
 8010844:	42ab      	cmp	r3, r5
 8010846:	dcf2      	bgt.n	801082e <_printf_i+0x216>
 8010848:	e7eb      	b.n	8010822 <_printf_i+0x20a>
 801084a:	2500      	movs	r5, #0
 801084c:	f104 0619 	add.w	r6, r4, #25
 8010850:	e7f5      	b.n	801083e <_printf_i+0x226>
 8010852:	bf00      	nop
 8010854:	08013086 	.word	0x08013086
 8010858:	08013097 	.word	0x08013097

0801085c <std>:
 801085c:	2300      	movs	r3, #0
 801085e:	b510      	push	{r4, lr}
 8010860:	4604      	mov	r4, r0
 8010862:	e9c0 3300 	strd	r3, r3, [r0]
 8010866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801086a:	6083      	str	r3, [r0, #8]
 801086c:	8181      	strh	r1, [r0, #12]
 801086e:	6643      	str	r3, [r0, #100]	; 0x64
 8010870:	81c2      	strh	r2, [r0, #14]
 8010872:	6183      	str	r3, [r0, #24]
 8010874:	4619      	mov	r1, r3
 8010876:	2208      	movs	r2, #8
 8010878:	305c      	adds	r0, #92	; 0x5c
 801087a:	f000 f8e2 	bl	8010a42 <memset>
 801087e:	4b05      	ldr	r3, [pc, #20]	; (8010894 <std+0x38>)
 8010880:	6263      	str	r3, [r4, #36]	; 0x24
 8010882:	4b05      	ldr	r3, [pc, #20]	; (8010898 <std+0x3c>)
 8010884:	62a3      	str	r3, [r4, #40]	; 0x28
 8010886:	4b05      	ldr	r3, [pc, #20]	; (801089c <std+0x40>)
 8010888:	62e3      	str	r3, [r4, #44]	; 0x2c
 801088a:	4b05      	ldr	r3, [pc, #20]	; (80108a0 <std+0x44>)
 801088c:	6224      	str	r4, [r4, #32]
 801088e:	6323      	str	r3, [r4, #48]	; 0x30
 8010890:	bd10      	pop	{r4, pc}
 8010892:	bf00      	nop
 8010894:	080109bd 	.word	0x080109bd
 8010898:	080109df 	.word	0x080109df
 801089c:	08010a17 	.word	0x08010a17
 80108a0:	08010a3b 	.word	0x08010a3b

080108a4 <stdio_exit_handler>:
 80108a4:	4a02      	ldr	r2, [pc, #8]	; (80108b0 <stdio_exit_handler+0xc>)
 80108a6:	4903      	ldr	r1, [pc, #12]	; (80108b4 <stdio_exit_handler+0x10>)
 80108a8:	4803      	ldr	r0, [pc, #12]	; (80108b8 <stdio_exit_handler+0x14>)
 80108aa:	f000 b869 	b.w	8010980 <_fwalk_sglue>
 80108ae:	bf00      	nop
 80108b0:	200002ac 	.word	0x200002ac
 80108b4:	08012259 	.word	0x08012259
 80108b8:	200002b8 	.word	0x200002b8

080108bc <cleanup_stdio>:
 80108bc:	6841      	ldr	r1, [r0, #4]
 80108be:	4b0c      	ldr	r3, [pc, #48]	; (80108f0 <cleanup_stdio+0x34>)
 80108c0:	4299      	cmp	r1, r3
 80108c2:	b510      	push	{r4, lr}
 80108c4:	4604      	mov	r4, r0
 80108c6:	d001      	beq.n	80108cc <cleanup_stdio+0x10>
 80108c8:	f001 fcc6 	bl	8012258 <_fflush_r>
 80108cc:	68a1      	ldr	r1, [r4, #8]
 80108ce:	4b09      	ldr	r3, [pc, #36]	; (80108f4 <cleanup_stdio+0x38>)
 80108d0:	4299      	cmp	r1, r3
 80108d2:	d002      	beq.n	80108da <cleanup_stdio+0x1e>
 80108d4:	4620      	mov	r0, r4
 80108d6:	f001 fcbf 	bl	8012258 <_fflush_r>
 80108da:	68e1      	ldr	r1, [r4, #12]
 80108dc:	4b06      	ldr	r3, [pc, #24]	; (80108f8 <cleanup_stdio+0x3c>)
 80108de:	4299      	cmp	r1, r3
 80108e0:	d004      	beq.n	80108ec <cleanup_stdio+0x30>
 80108e2:	4620      	mov	r0, r4
 80108e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e8:	f001 bcb6 	b.w	8012258 <_fflush_r>
 80108ec:	bd10      	pop	{r4, pc}
 80108ee:	bf00      	nop
 80108f0:	200024d0 	.word	0x200024d0
 80108f4:	20002538 	.word	0x20002538
 80108f8:	200025a0 	.word	0x200025a0

080108fc <global_stdio_init.part.0>:
 80108fc:	b510      	push	{r4, lr}
 80108fe:	4b0b      	ldr	r3, [pc, #44]	; (801092c <global_stdio_init.part.0+0x30>)
 8010900:	4c0b      	ldr	r4, [pc, #44]	; (8010930 <global_stdio_init.part.0+0x34>)
 8010902:	4a0c      	ldr	r2, [pc, #48]	; (8010934 <global_stdio_init.part.0+0x38>)
 8010904:	601a      	str	r2, [r3, #0]
 8010906:	4620      	mov	r0, r4
 8010908:	2200      	movs	r2, #0
 801090a:	2104      	movs	r1, #4
 801090c:	f7ff ffa6 	bl	801085c <std>
 8010910:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010914:	2201      	movs	r2, #1
 8010916:	2109      	movs	r1, #9
 8010918:	f7ff ffa0 	bl	801085c <std>
 801091c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010920:	2202      	movs	r2, #2
 8010922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010926:	2112      	movs	r1, #18
 8010928:	f7ff bf98 	b.w	801085c <std>
 801092c:	20002608 	.word	0x20002608
 8010930:	200024d0 	.word	0x200024d0
 8010934:	080108a5 	.word	0x080108a5

08010938 <__sfp_lock_acquire>:
 8010938:	4801      	ldr	r0, [pc, #4]	; (8010940 <__sfp_lock_acquire+0x8>)
 801093a:	f000 b8ff 	b.w	8010b3c <__retarget_lock_acquire_recursive>
 801093e:	bf00      	nop
 8010940:	20002611 	.word	0x20002611

08010944 <__sfp_lock_release>:
 8010944:	4801      	ldr	r0, [pc, #4]	; (801094c <__sfp_lock_release+0x8>)
 8010946:	f000 b8fa 	b.w	8010b3e <__retarget_lock_release_recursive>
 801094a:	bf00      	nop
 801094c:	20002611 	.word	0x20002611

08010950 <__sinit>:
 8010950:	b510      	push	{r4, lr}
 8010952:	4604      	mov	r4, r0
 8010954:	f7ff fff0 	bl	8010938 <__sfp_lock_acquire>
 8010958:	6a23      	ldr	r3, [r4, #32]
 801095a:	b11b      	cbz	r3, 8010964 <__sinit+0x14>
 801095c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010960:	f7ff bff0 	b.w	8010944 <__sfp_lock_release>
 8010964:	4b04      	ldr	r3, [pc, #16]	; (8010978 <__sinit+0x28>)
 8010966:	6223      	str	r3, [r4, #32]
 8010968:	4b04      	ldr	r3, [pc, #16]	; (801097c <__sinit+0x2c>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1f5      	bne.n	801095c <__sinit+0xc>
 8010970:	f7ff ffc4 	bl	80108fc <global_stdio_init.part.0>
 8010974:	e7f2      	b.n	801095c <__sinit+0xc>
 8010976:	bf00      	nop
 8010978:	080108bd 	.word	0x080108bd
 801097c:	20002608 	.word	0x20002608

08010980 <_fwalk_sglue>:
 8010980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010984:	4607      	mov	r7, r0
 8010986:	4688      	mov	r8, r1
 8010988:	4614      	mov	r4, r2
 801098a:	2600      	movs	r6, #0
 801098c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010990:	f1b9 0901 	subs.w	r9, r9, #1
 8010994:	d505      	bpl.n	80109a2 <_fwalk_sglue+0x22>
 8010996:	6824      	ldr	r4, [r4, #0]
 8010998:	2c00      	cmp	r4, #0
 801099a:	d1f7      	bne.n	801098c <_fwalk_sglue+0xc>
 801099c:	4630      	mov	r0, r6
 801099e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109a2:	89ab      	ldrh	r3, [r5, #12]
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d907      	bls.n	80109b8 <_fwalk_sglue+0x38>
 80109a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109ac:	3301      	adds	r3, #1
 80109ae:	d003      	beq.n	80109b8 <_fwalk_sglue+0x38>
 80109b0:	4629      	mov	r1, r5
 80109b2:	4638      	mov	r0, r7
 80109b4:	47c0      	blx	r8
 80109b6:	4306      	orrs	r6, r0
 80109b8:	3568      	adds	r5, #104	; 0x68
 80109ba:	e7e9      	b.n	8010990 <_fwalk_sglue+0x10>

080109bc <__sread>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	460c      	mov	r4, r1
 80109c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109c4:	f000 f86c 	bl	8010aa0 <_read_r>
 80109c8:	2800      	cmp	r0, #0
 80109ca:	bfab      	itete	ge
 80109cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109ce:	89a3      	ldrhlt	r3, [r4, #12]
 80109d0:	181b      	addge	r3, r3, r0
 80109d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109d6:	bfac      	ite	ge
 80109d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80109da:	81a3      	strhlt	r3, [r4, #12]
 80109dc:	bd10      	pop	{r4, pc}

080109de <__swrite>:
 80109de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e2:	461f      	mov	r7, r3
 80109e4:	898b      	ldrh	r3, [r1, #12]
 80109e6:	05db      	lsls	r3, r3, #23
 80109e8:	4605      	mov	r5, r0
 80109ea:	460c      	mov	r4, r1
 80109ec:	4616      	mov	r6, r2
 80109ee:	d505      	bpl.n	80109fc <__swrite+0x1e>
 80109f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f4:	2302      	movs	r3, #2
 80109f6:	2200      	movs	r2, #0
 80109f8:	f000 f840 	bl	8010a7c <_lseek_r>
 80109fc:	89a3      	ldrh	r3, [r4, #12]
 80109fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a06:	81a3      	strh	r3, [r4, #12]
 8010a08:	4632      	mov	r2, r6
 8010a0a:	463b      	mov	r3, r7
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a12:	f000 b857 	b.w	8010ac4 <_write_r>

08010a16 <__sseek>:
 8010a16:	b510      	push	{r4, lr}
 8010a18:	460c      	mov	r4, r1
 8010a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1e:	f000 f82d 	bl	8010a7c <_lseek_r>
 8010a22:	1c43      	adds	r3, r0, #1
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	bf15      	itete	ne
 8010a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a32:	81a3      	strheq	r3, [r4, #12]
 8010a34:	bf18      	it	ne
 8010a36:	81a3      	strhne	r3, [r4, #12]
 8010a38:	bd10      	pop	{r4, pc}

08010a3a <__sclose>:
 8010a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a3e:	f000 b80d 	b.w	8010a5c <_close_r>

08010a42 <memset>:
 8010a42:	4402      	add	r2, r0
 8010a44:	4603      	mov	r3, r0
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d100      	bne.n	8010a4c <memset+0xa>
 8010a4a:	4770      	bx	lr
 8010a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8010a50:	e7f9      	b.n	8010a46 <memset+0x4>
	...

08010a54 <_localeconv_r>:
 8010a54:	4800      	ldr	r0, [pc, #0]	; (8010a58 <_localeconv_r+0x4>)
 8010a56:	4770      	bx	lr
 8010a58:	200003f8 	.word	0x200003f8

08010a5c <_close_r>:
 8010a5c:	b538      	push	{r3, r4, r5, lr}
 8010a5e:	4d06      	ldr	r5, [pc, #24]	; (8010a78 <_close_r+0x1c>)
 8010a60:	2300      	movs	r3, #0
 8010a62:	4604      	mov	r4, r0
 8010a64:	4608      	mov	r0, r1
 8010a66:	602b      	str	r3, [r5, #0]
 8010a68:	f7f2 fdd3 	bl	8003612 <_close>
 8010a6c:	1c43      	adds	r3, r0, #1
 8010a6e:	d102      	bne.n	8010a76 <_close_r+0x1a>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	b103      	cbz	r3, 8010a76 <_close_r+0x1a>
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	bd38      	pop	{r3, r4, r5, pc}
 8010a78:	2000260c 	.word	0x2000260c

08010a7c <_lseek_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d07      	ldr	r5, [pc, #28]	; (8010a9c <_lseek_r+0x20>)
 8010a80:	4604      	mov	r4, r0
 8010a82:	4608      	mov	r0, r1
 8010a84:	4611      	mov	r1, r2
 8010a86:	2200      	movs	r2, #0
 8010a88:	602a      	str	r2, [r5, #0]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	f7f2 fde8 	bl	8003660 <_lseek>
 8010a90:	1c43      	adds	r3, r0, #1
 8010a92:	d102      	bne.n	8010a9a <_lseek_r+0x1e>
 8010a94:	682b      	ldr	r3, [r5, #0]
 8010a96:	b103      	cbz	r3, 8010a9a <_lseek_r+0x1e>
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	2000260c 	.word	0x2000260c

08010aa0 <_read_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4d07      	ldr	r5, [pc, #28]	; (8010ac0 <_read_r+0x20>)
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	4608      	mov	r0, r1
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	2200      	movs	r2, #0
 8010aac:	602a      	str	r2, [r5, #0]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	f7f2 fd76 	bl	80035a0 <_read>
 8010ab4:	1c43      	adds	r3, r0, #1
 8010ab6:	d102      	bne.n	8010abe <_read_r+0x1e>
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	b103      	cbz	r3, 8010abe <_read_r+0x1e>
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	bd38      	pop	{r3, r4, r5, pc}
 8010ac0:	2000260c 	.word	0x2000260c

08010ac4 <_write_r>:
 8010ac4:	b538      	push	{r3, r4, r5, lr}
 8010ac6:	4d07      	ldr	r5, [pc, #28]	; (8010ae4 <_write_r+0x20>)
 8010ac8:	4604      	mov	r4, r0
 8010aca:	4608      	mov	r0, r1
 8010acc:	4611      	mov	r1, r2
 8010ace:	2200      	movs	r2, #0
 8010ad0:	602a      	str	r2, [r5, #0]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	f7f2 fd81 	bl	80035da <_write>
 8010ad8:	1c43      	adds	r3, r0, #1
 8010ada:	d102      	bne.n	8010ae2 <_write_r+0x1e>
 8010adc:	682b      	ldr	r3, [r5, #0]
 8010ade:	b103      	cbz	r3, 8010ae2 <_write_r+0x1e>
 8010ae0:	6023      	str	r3, [r4, #0]
 8010ae2:	bd38      	pop	{r3, r4, r5, pc}
 8010ae4:	2000260c 	.word	0x2000260c

08010ae8 <__errno>:
 8010ae8:	4b01      	ldr	r3, [pc, #4]	; (8010af0 <__errno+0x8>)
 8010aea:	6818      	ldr	r0, [r3, #0]
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	20000304 	.word	0x20000304

08010af4 <__libc_init_array>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	4d0d      	ldr	r5, [pc, #52]	; (8010b2c <__libc_init_array+0x38>)
 8010af8:	4c0d      	ldr	r4, [pc, #52]	; (8010b30 <__libc_init_array+0x3c>)
 8010afa:	1b64      	subs	r4, r4, r5
 8010afc:	10a4      	asrs	r4, r4, #2
 8010afe:	2600      	movs	r6, #0
 8010b00:	42a6      	cmp	r6, r4
 8010b02:	d109      	bne.n	8010b18 <__libc_init_array+0x24>
 8010b04:	4d0b      	ldr	r5, [pc, #44]	; (8010b34 <__libc_init_array+0x40>)
 8010b06:	4c0c      	ldr	r4, [pc, #48]	; (8010b38 <__libc_init_array+0x44>)
 8010b08:	f002 fa68 	bl	8012fdc <_init>
 8010b0c:	1b64      	subs	r4, r4, r5
 8010b0e:	10a4      	asrs	r4, r4, #2
 8010b10:	2600      	movs	r6, #0
 8010b12:	42a6      	cmp	r6, r4
 8010b14:	d105      	bne.n	8010b22 <__libc_init_array+0x2e>
 8010b16:	bd70      	pop	{r4, r5, r6, pc}
 8010b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b1c:	4798      	blx	r3
 8010b1e:	3601      	adds	r6, #1
 8010b20:	e7ee      	b.n	8010b00 <__libc_init_array+0xc>
 8010b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b26:	4798      	blx	r3
 8010b28:	3601      	adds	r6, #1
 8010b2a:	e7f2      	b.n	8010b12 <__libc_init_array+0x1e>
 8010b2c:	08013460 	.word	0x08013460
 8010b30:	08013460 	.word	0x08013460
 8010b34:	08013460 	.word	0x08013460
 8010b38:	08013464 	.word	0x08013464

08010b3c <__retarget_lock_acquire_recursive>:
 8010b3c:	4770      	bx	lr

08010b3e <__retarget_lock_release_recursive>:
 8010b3e:	4770      	bx	lr

08010b40 <memcpy>:
 8010b40:	440a      	add	r2, r1
 8010b42:	4291      	cmp	r1, r2
 8010b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b48:	d100      	bne.n	8010b4c <memcpy+0xc>
 8010b4a:	4770      	bx	lr
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b56:	4291      	cmp	r1, r2
 8010b58:	d1f9      	bne.n	8010b4e <memcpy+0xe>
 8010b5a:	bd10      	pop	{r4, pc}

08010b5c <quorem>:
 8010b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b60:	6903      	ldr	r3, [r0, #16]
 8010b62:	690c      	ldr	r4, [r1, #16]
 8010b64:	42a3      	cmp	r3, r4
 8010b66:	4607      	mov	r7, r0
 8010b68:	db7e      	blt.n	8010c68 <quorem+0x10c>
 8010b6a:	3c01      	subs	r4, #1
 8010b6c:	f101 0814 	add.w	r8, r1, #20
 8010b70:	f100 0514 	add.w	r5, r0, #20
 8010b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b78:	9301      	str	r3, [sp, #4]
 8010b7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b82:	3301      	adds	r3, #1
 8010b84:	429a      	cmp	r2, r3
 8010b86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010b8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b92:	d331      	bcc.n	8010bf8 <quorem+0x9c>
 8010b94:	f04f 0e00 	mov.w	lr, #0
 8010b98:	4640      	mov	r0, r8
 8010b9a:	46ac      	mov	ip, r5
 8010b9c:	46f2      	mov	sl, lr
 8010b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010ba2:	b293      	uxth	r3, r2
 8010ba4:	fb06 e303 	mla	r3, r6, r3, lr
 8010ba8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010bac:	0c1a      	lsrs	r2, r3, #16
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8010bb4:	f8dc a000 	ldr.w	sl, [ip]
 8010bb8:	fa13 f38a 	uxtah	r3, r3, sl
 8010bbc:	fb06 220e 	mla	r2, r6, lr, r2
 8010bc0:	9300      	str	r3, [sp, #0]
 8010bc2:	9b00      	ldr	r3, [sp, #0]
 8010bc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010bc8:	b292      	uxth	r2, r2
 8010bca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bd2:	f8bd 3000 	ldrh.w	r3, [sp]
 8010bd6:	4581      	cmp	r9, r0
 8010bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bdc:	f84c 3b04 	str.w	r3, [ip], #4
 8010be0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010be4:	d2db      	bcs.n	8010b9e <quorem+0x42>
 8010be6:	f855 300b 	ldr.w	r3, [r5, fp]
 8010bea:	b92b      	cbnz	r3, 8010bf8 <quorem+0x9c>
 8010bec:	9b01      	ldr	r3, [sp, #4]
 8010bee:	3b04      	subs	r3, #4
 8010bf0:	429d      	cmp	r5, r3
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	d32c      	bcc.n	8010c50 <quorem+0xf4>
 8010bf6:	613c      	str	r4, [r7, #16]
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	f001 f9a7 	bl	8011f4c <__mcmp>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	db22      	blt.n	8010c48 <quorem+0xec>
 8010c02:	3601      	adds	r6, #1
 8010c04:	4629      	mov	r1, r5
 8010c06:	2000      	movs	r0, #0
 8010c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c0c:	f8d1 c000 	ldr.w	ip, [r1]
 8010c10:	b293      	uxth	r3, r2
 8010c12:	1ac3      	subs	r3, r0, r3
 8010c14:	0c12      	lsrs	r2, r2, #16
 8010c16:	fa13 f38c 	uxtah	r3, r3, ip
 8010c1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010c1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c28:	45c1      	cmp	r9, r8
 8010c2a:	f841 3b04 	str.w	r3, [r1], #4
 8010c2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c32:	d2e9      	bcs.n	8010c08 <quorem+0xac>
 8010c34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c3c:	b922      	cbnz	r2, 8010c48 <quorem+0xec>
 8010c3e:	3b04      	subs	r3, #4
 8010c40:	429d      	cmp	r5, r3
 8010c42:	461a      	mov	r2, r3
 8010c44:	d30a      	bcc.n	8010c5c <quorem+0x100>
 8010c46:	613c      	str	r4, [r7, #16]
 8010c48:	4630      	mov	r0, r6
 8010c4a:	b003      	add	sp, #12
 8010c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c50:	6812      	ldr	r2, [r2, #0]
 8010c52:	3b04      	subs	r3, #4
 8010c54:	2a00      	cmp	r2, #0
 8010c56:	d1ce      	bne.n	8010bf6 <quorem+0x9a>
 8010c58:	3c01      	subs	r4, #1
 8010c5a:	e7c9      	b.n	8010bf0 <quorem+0x94>
 8010c5c:	6812      	ldr	r2, [r2, #0]
 8010c5e:	3b04      	subs	r3, #4
 8010c60:	2a00      	cmp	r2, #0
 8010c62:	d1f0      	bne.n	8010c46 <quorem+0xea>
 8010c64:	3c01      	subs	r4, #1
 8010c66:	e7eb      	b.n	8010c40 <quorem+0xe4>
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e7ee      	b.n	8010c4a <quorem+0xee>
 8010c6c:	0000      	movs	r0, r0
	...

08010c70 <_dtoa_r>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	ed2d 8b04 	vpush	{d8-d9}
 8010c78:	69c5      	ldr	r5, [r0, #28]
 8010c7a:	b093      	sub	sp, #76	; 0x4c
 8010c7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c80:	ec57 6b10 	vmov	r6, r7, d0
 8010c84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010c88:	9107      	str	r1, [sp, #28]
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8010c90:	b975      	cbnz	r5, 8010cb0 <_dtoa_r+0x40>
 8010c92:	2010      	movs	r0, #16
 8010c94:	f000 fe2a 	bl	80118ec <malloc>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	61e0      	str	r0, [r4, #28]
 8010c9c:	b920      	cbnz	r0, 8010ca8 <_dtoa_r+0x38>
 8010c9e:	4bae      	ldr	r3, [pc, #696]	; (8010f58 <_dtoa_r+0x2e8>)
 8010ca0:	21ef      	movs	r1, #239	; 0xef
 8010ca2:	48ae      	ldr	r0, [pc, #696]	; (8010f5c <_dtoa_r+0x2ec>)
 8010ca4:	f001 fb10 	bl	80122c8 <__assert_func>
 8010ca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010cac:	6005      	str	r5, [r0, #0]
 8010cae:	60c5      	str	r5, [r0, #12]
 8010cb0:	69e3      	ldr	r3, [r4, #28]
 8010cb2:	6819      	ldr	r1, [r3, #0]
 8010cb4:	b151      	cbz	r1, 8010ccc <_dtoa_r+0x5c>
 8010cb6:	685a      	ldr	r2, [r3, #4]
 8010cb8:	604a      	str	r2, [r1, #4]
 8010cba:	2301      	movs	r3, #1
 8010cbc:	4093      	lsls	r3, r2
 8010cbe:	608b      	str	r3, [r1, #8]
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f000 ff07 	bl	8011ad4 <_Bfree>
 8010cc6:	69e3      	ldr	r3, [r4, #28]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	601a      	str	r2, [r3, #0]
 8010ccc:	1e3b      	subs	r3, r7, #0
 8010cce:	bfbb      	ittet	lt
 8010cd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010cd4:	9303      	strlt	r3, [sp, #12]
 8010cd6:	2300      	movge	r3, #0
 8010cd8:	2201      	movlt	r2, #1
 8010cda:	bfac      	ite	ge
 8010cdc:	f8c8 3000 	strge.w	r3, [r8]
 8010ce0:	f8c8 2000 	strlt.w	r2, [r8]
 8010ce4:	4b9e      	ldr	r3, [pc, #632]	; (8010f60 <_dtoa_r+0x2f0>)
 8010ce6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010cea:	ea33 0308 	bics.w	r3, r3, r8
 8010cee:	d11b      	bne.n	8010d28 <_dtoa_r+0xb8>
 8010cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8010cf6:	6013      	str	r3, [r2, #0]
 8010cf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010cfc:	4333      	orrs	r3, r6
 8010cfe:	f000 8593 	beq.w	8011828 <_dtoa_r+0xbb8>
 8010d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d04:	b963      	cbnz	r3, 8010d20 <_dtoa_r+0xb0>
 8010d06:	4b97      	ldr	r3, [pc, #604]	; (8010f64 <_dtoa_r+0x2f4>)
 8010d08:	e027      	b.n	8010d5a <_dtoa_r+0xea>
 8010d0a:	4b97      	ldr	r3, [pc, #604]	; (8010f68 <_dtoa_r+0x2f8>)
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	3308      	adds	r3, #8
 8010d10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	9800      	ldr	r0, [sp, #0]
 8010d16:	b013      	add	sp, #76	; 0x4c
 8010d18:	ecbd 8b04 	vpop	{d8-d9}
 8010d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d20:	4b90      	ldr	r3, [pc, #576]	; (8010f64 <_dtoa_r+0x2f4>)
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	3303      	adds	r3, #3
 8010d26:	e7f3      	b.n	8010d10 <_dtoa_r+0xa0>
 8010d28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	ec51 0b17 	vmov	r0, r1, d7
 8010d32:	eeb0 8a47 	vmov.f32	s16, s14
 8010d36:	eef0 8a67 	vmov.f32	s17, s15
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	f7ef fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d40:	4681      	mov	r9, r0
 8010d42:	b160      	cbz	r0, 8010d5e <_dtoa_r+0xee>
 8010d44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d46:	2301      	movs	r3, #1
 8010d48:	6013      	str	r3, [r2, #0]
 8010d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	f000 8568 	beq.w	8011822 <_dtoa_r+0xbb2>
 8010d52:	4b86      	ldr	r3, [pc, #536]	; (8010f6c <_dtoa_r+0x2fc>)
 8010d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d56:	6013      	str	r3, [r2, #0]
 8010d58:	3b01      	subs	r3, #1
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	e7da      	b.n	8010d14 <_dtoa_r+0xa4>
 8010d5e:	aa10      	add	r2, sp, #64	; 0x40
 8010d60:	a911      	add	r1, sp, #68	; 0x44
 8010d62:	4620      	mov	r0, r4
 8010d64:	eeb0 0a48 	vmov.f32	s0, s16
 8010d68:	eef0 0a68 	vmov.f32	s1, s17
 8010d6c:	f001 f994 	bl	8012098 <__d2b>
 8010d70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010d74:	4682      	mov	sl, r0
 8010d76:	2d00      	cmp	r5, #0
 8010d78:	d07f      	beq.n	8010e7a <_dtoa_r+0x20a>
 8010d7a:	ee18 3a90 	vmov	r3, s17
 8010d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010d86:	ec51 0b18 	vmov	r0, r1, d8
 8010d8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010d8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010d92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010d96:	4619      	mov	r1, r3
 8010d98:	2200      	movs	r2, #0
 8010d9a:	4b75      	ldr	r3, [pc, #468]	; (8010f70 <_dtoa_r+0x300>)
 8010d9c:	f7ef fa74 	bl	8000288 <__aeabi_dsub>
 8010da0:	a367      	add	r3, pc, #412	; (adr r3, 8010f40 <_dtoa_r+0x2d0>)
 8010da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da6:	f7ef fc27 	bl	80005f8 <__aeabi_dmul>
 8010daa:	a367      	add	r3, pc, #412	; (adr r3, 8010f48 <_dtoa_r+0x2d8>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7ef fa6c 	bl	800028c <__adddf3>
 8010db4:	4606      	mov	r6, r0
 8010db6:	4628      	mov	r0, r5
 8010db8:	460f      	mov	r7, r1
 8010dba:	f7ef fbb3 	bl	8000524 <__aeabi_i2d>
 8010dbe:	a364      	add	r3, pc, #400	; (adr r3, 8010f50 <_dtoa_r+0x2e0>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	f7ef fc18 	bl	80005f8 <__aeabi_dmul>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	460b      	mov	r3, r1
 8010dcc:	4630      	mov	r0, r6
 8010dce:	4639      	mov	r1, r7
 8010dd0:	f7ef fa5c 	bl	800028c <__adddf3>
 8010dd4:	4606      	mov	r6, r0
 8010dd6:	460f      	mov	r7, r1
 8010dd8:	f7ef febe 	bl	8000b58 <__aeabi_d2iz>
 8010ddc:	2200      	movs	r2, #0
 8010dde:	4683      	mov	fp, r0
 8010de0:	2300      	movs	r3, #0
 8010de2:	4630      	mov	r0, r6
 8010de4:	4639      	mov	r1, r7
 8010de6:	f7ef fe79 	bl	8000adc <__aeabi_dcmplt>
 8010dea:	b148      	cbz	r0, 8010e00 <_dtoa_r+0x190>
 8010dec:	4658      	mov	r0, fp
 8010dee:	f7ef fb99 	bl	8000524 <__aeabi_i2d>
 8010df2:	4632      	mov	r2, r6
 8010df4:	463b      	mov	r3, r7
 8010df6:	f7ef fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8010dfa:	b908      	cbnz	r0, 8010e00 <_dtoa_r+0x190>
 8010dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e00:	f1bb 0f16 	cmp.w	fp, #22
 8010e04:	d857      	bhi.n	8010eb6 <_dtoa_r+0x246>
 8010e06:	4b5b      	ldr	r3, [pc, #364]	; (8010f74 <_dtoa_r+0x304>)
 8010e08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e10:	ec51 0b18 	vmov	r0, r1, d8
 8010e14:	f7ef fe62 	bl	8000adc <__aeabi_dcmplt>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d04e      	beq.n	8010eba <_dtoa_r+0x24a>
 8010e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e20:	2300      	movs	r3, #0
 8010e22:	930c      	str	r3, [sp, #48]	; 0x30
 8010e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e26:	1b5b      	subs	r3, r3, r5
 8010e28:	1e5a      	subs	r2, r3, #1
 8010e2a:	bf45      	ittet	mi
 8010e2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010e30:	9305      	strmi	r3, [sp, #20]
 8010e32:	2300      	movpl	r3, #0
 8010e34:	2300      	movmi	r3, #0
 8010e36:	9206      	str	r2, [sp, #24]
 8010e38:	bf54      	ite	pl
 8010e3a:	9305      	strpl	r3, [sp, #20]
 8010e3c:	9306      	strmi	r3, [sp, #24]
 8010e3e:	f1bb 0f00 	cmp.w	fp, #0
 8010e42:	db3c      	blt.n	8010ebe <_dtoa_r+0x24e>
 8010e44:	9b06      	ldr	r3, [sp, #24]
 8010e46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010e4a:	445b      	add	r3, fp
 8010e4c:	9306      	str	r3, [sp, #24]
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9308      	str	r3, [sp, #32]
 8010e52:	9b07      	ldr	r3, [sp, #28]
 8010e54:	2b09      	cmp	r3, #9
 8010e56:	d868      	bhi.n	8010f2a <_dtoa_r+0x2ba>
 8010e58:	2b05      	cmp	r3, #5
 8010e5a:	bfc4      	itt	gt
 8010e5c:	3b04      	subgt	r3, #4
 8010e5e:	9307      	strgt	r3, [sp, #28]
 8010e60:	9b07      	ldr	r3, [sp, #28]
 8010e62:	f1a3 0302 	sub.w	r3, r3, #2
 8010e66:	bfcc      	ite	gt
 8010e68:	2500      	movgt	r5, #0
 8010e6a:	2501      	movle	r5, #1
 8010e6c:	2b03      	cmp	r3, #3
 8010e6e:	f200 8085 	bhi.w	8010f7c <_dtoa_r+0x30c>
 8010e72:	e8df f003 	tbb	[pc, r3]
 8010e76:	3b2e      	.short	0x3b2e
 8010e78:	5839      	.short	0x5839
 8010e7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010e7e:	441d      	add	r5, r3
 8010e80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010e84:	2b20      	cmp	r3, #32
 8010e86:	bfc1      	itttt	gt
 8010e88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010e8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010e90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010e94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010e98:	bfd6      	itet	le
 8010e9a:	f1c3 0320 	rsble	r3, r3, #32
 8010e9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010ea2:	fa06 f003 	lslle.w	r0, r6, r3
 8010ea6:	f7ef fb2d 	bl	8000504 <__aeabi_ui2d>
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010eb0:	3d01      	subs	r5, #1
 8010eb2:	920e      	str	r2, [sp, #56]	; 0x38
 8010eb4:	e76f      	b.n	8010d96 <_dtoa_r+0x126>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e7b3      	b.n	8010e22 <_dtoa_r+0x1b2>
 8010eba:	900c      	str	r0, [sp, #48]	; 0x30
 8010ebc:	e7b2      	b.n	8010e24 <_dtoa_r+0x1b4>
 8010ebe:	9b05      	ldr	r3, [sp, #20]
 8010ec0:	eba3 030b 	sub.w	r3, r3, fp
 8010ec4:	9305      	str	r3, [sp, #20]
 8010ec6:	f1cb 0300 	rsb	r3, fp, #0
 8010eca:	9308      	str	r3, [sp, #32]
 8010ecc:	2300      	movs	r3, #0
 8010ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ed0:	e7bf      	b.n	8010e52 <_dtoa_r+0x1e2>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dc52      	bgt.n	8010f82 <_dtoa_r+0x312>
 8010edc:	2301      	movs	r3, #1
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	9304      	str	r3, [sp, #16]
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8010ee6:	e00b      	b.n	8010f00 <_dtoa_r+0x290>
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e7f3      	b.n	8010ed4 <_dtoa_r+0x264>
 8010eec:	2300      	movs	r3, #0
 8010eee:	9309      	str	r3, [sp, #36]	; 0x24
 8010ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef2:	445b      	add	r3, fp
 8010ef4:	9301      	str	r3, [sp, #4]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	9304      	str	r3, [sp, #16]
 8010efc:	bfb8      	it	lt
 8010efe:	2301      	movlt	r3, #1
 8010f00:	69e0      	ldr	r0, [r4, #28]
 8010f02:	2100      	movs	r1, #0
 8010f04:	2204      	movs	r2, #4
 8010f06:	f102 0614 	add.w	r6, r2, #20
 8010f0a:	429e      	cmp	r6, r3
 8010f0c:	d93d      	bls.n	8010f8a <_dtoa_r+0x31a>
 8010f0e:	6041      	str	r1, [r0, #4]
 8010f10:	4620      	mov	r0, r4
 8010f12:	f000 fd9f 	bl	8011a54 <_Balloc>
 8010f16:	9000      	str	r0, [sp, #0]
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d139      	bne.n	8010f90 <_dtoa_r+0x320>
 8010f1c:	4b16      	ldr	r3, [pc, #88]	; (8010f78 <_dtoa_r+0x308>)
 8010f1e:	4602      	mov	r2, r0
 8010f20:	f240 11af 	movw	r1, #431	; 0x1af
 8010f24:	e6bd      	b.n	8010ca2 <_dtoa_r+0x32>
 8010f26:	2301      	movs	r3, #1
 8010f28:	e7e1      	b.n	8010eee <_dtoa_r+0x27e>
 8010f2a:	2501      	movs	r5, #1
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	9307      	str	r3, [sp, #28]
 8010f30:	9509      	str	r5, [sp, #36]	; 0x24
 8010f32:	f04f 33ff 	mov.w	r3, #4294967295
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	9304      	str	r3, [sp, #16]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	2312      	movs	r3, #18
 8010f3e:	e7d1      	b.n	8010ee4 <_dtoa_r+0x274>
 8010f40:	636f4361 	.word	0x636f4361
 8010f44:	3fd287a7 	.word	0x3fd287a7
 8010f48:	8b60c8b3 	.word	0x8b60c8b3
 8010f4c:	3fc68a28 	.word	0x3fc68a28
 8010f50:	509f79fb 	.word	0x509f79fb
 8010f54:	3fd34413 	.word	0x3fd34413
 8010f58:	080130b5 	.word	0x080130b5
 8010f5c:	080130cc 	.word	0x080130cc
 8010f60:	7ff00000 	.word	0x7ff00000
 8010f64:	080130b1 	.word	0x080130b1
 8010f68:	080130a8 	.word	0x080130a8
 8010f6c:	08013085 	.word	0x08013085
 8010f70:	3ff80000 	.word	0x3ff80000
 8010f74:	080131b8 	.word	0x080131b8
 8010f78:	08013124 	.word	0x08013124
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f80:	e7d7      	b.n	8010f32 <_dtoa_r+0x2c2>
 8010f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	9304      	str	r3, [sp, #16]
 8010f88:	e7ba      	b.n	8010f00 <_dtoa_r+0x290>
 8010f8a:	3101      	adds	r1, #1
 8010f8c:	0052      	lsls	r2, r2, #1
 8010f8e:	e7ba      	b.n	8010f06 <_dtoa_r+0x296>
 8010f90:	69e3      	ldr	r3, [r4, #28]
 8010f92:	9a00      	ldr	r2, [sp, #0]
 8010f94:	601a      	str	r2, [r3, #0]
 8010f96:	9b04      	ldr	r3, [sp, #16]
 8010f98:	2b0e      	cmp	r3, #14
 8010f9a:	f200 80a8 	bhi.w	80110ee <_dtoa_r+0x47e>
 8010f9e:	2d00      	cmp	r5, #0
 8010fa0:	f000 80a5 	beq.w	80110ee <_dtoa_r+0x47e>
 8010fa4:	f1bb 0f00 	cmp.w	fp, #0
 8010fa8:	dd38      	ble.n	801101c <_dtoa_r+0x3ac>
 8010faa:	4bc0      	ldr	r3, [pc, #768]	; (80112ac <_dtoa_r+0x63c>)
 8010fac:	f00b 020f 	and.w	r2, fp, #15
 8010fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010fb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010fbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010fc0:	d019      	beq.n	8010ff6 <_dtoa_r+0x386>
 8010fc2:	4bbb      	ldr	r3, [pc, #748]	; (80112b0 <_dtoa_r+0x640>)
 8010fc4:	ec51 0b18 	vmov	r0, r1, d8
 8010fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010fcc:	f7ef fc3e 	bl	800084c <__aeabi_ddiv>
 8010fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fd4:	f008 080f 	and.w	r8, r8, #15
 8010fd8:	2503      	movs	r5, #3
 8010fda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80112b0 <_dtoa_r+0x640>
 8010fde:	f1b8 0f00 	cmp.w	r8, #0
 8010fe2:	d10a      	bne.n	8010ffa <_dtoa_r+0x38a>
 8010fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fe8:	4632      	mov	r2, r6
 8010fea:	463b      	mov	r3, r7
 8010fec:	f7ef fc2e 	bl	800084c <__aeabi_ddiv>
 8010ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ff4:	e02b      	b.n	801104e <_dtoa_r+0x3de>
 8010ff6:	2502      	movs	r5, #2
 8010ff8:	e7ef      	b.n	8010fda <_dtoa_r+0x36a>
 8010ffa:	f018 0f01 	tst.w	r8, #1
 8010ffe:	d008      	beq.n	8011012 <_dtoa_r+0x3a2>
 8011000:	4630      	mov	r0, r6
 8011002:	4639      	mov	r1, r7
 8011004:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011008:	f7ef faf6 	bl	80005f8 <__aeabi_dmul>
 801100c:	3501      	adds	r5, #1
 801100e:	4606      	mov	r6, r0
 8011010:	460f      	mov	r7, r1
 8011012:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011016:	f109 0908 	add.w	r9, r9, #8
 801101a:	e7e0      	b.n	8010fde <_dtoa_r+0x36e>
 801101c:	f000 809f 	beq.w	801115e <_dtoa_r+0x4ee>
 8011020:	f1cb 0600 	rsb	r6, fp, #0
 8011024:	4ba1      	ldr	r3, [pc, #644]	; (80112ac <_dtoa_r+0x63c>)
 8011026:	4fa2      	ldr	r7, [pc, #648]	; (80112b0 <_dtoa_r+0x640>)
 8011028:	f006 020f 	and.w	r2, r6, #15
 801102c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011034:	ec51 0b18 	vmov	r0, r1, d8
 8011038:	f7ef fade 	bl	80005f8 <__aeabi_dmul>
 801103c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011040:	1136      	asrs	r6, r6, #4
 8011042:	2300      	movs	r3, #0
 8011044:	2502      	movs	r5, #2
 8011046:	2e00      	cmp	r6, #0
 8011048:	d17e      	bne.n	8011148 <_dtoa_r+0x4d8>
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1d0      	bne.n	8010ff0 <_dtoa_r+0x380>
 801104e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011050:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011054:	2b00      	cmp	r3, #0
 8011056:	f000 8084 	beq.w	8011162 <_dtoa_r+0x4f2>
 801105a:	4b96      	ldr	r3, [pc, #600]	; (80112b4 <_dtoa_r+0x644>)
 801105c:	2200      	movs	r2, #0
 801105e:	4640      	mov	r0, r8
 8011060:	4649      	mov	r1, r9
 8011062:	f7ef fd3b 	bl	8000adc <__aeabi_dcmplt>
 8011066:	2800      	cmp	r0, #0
 8011068:	d07b      	beq.n	8011162 <_dtoa_r+0x4f2>
 801106a:	9b04      	ldr	r3, [sp, #16]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d078      	beq.n	8011162 <_dtoa_r+0x4f2>
 8011070:	9b01      	ldr	r3, [sp, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	dd39      	ble.n	80110ea <_dtoa_r+0x47a>
 8011076:	4b90      	ldr	r3, [pc, #576]	; (80112b8 <_dtoa_r+0x648>)
 8011078:	2200      	movs	r2, #0
 801107a:	4640      	mov	r0, r8
 801107c:	4649      	mov	r1, r9
 801107e:	f7ef fabb 	bl	80005f8 <__aeabi_dmul>
 8011082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011086:	9e01      	ldr	r6, [sp, #4]
 8011088:	f10b 37ff 	add.w	r7, fp, #4294967295
 801108c:	3501      	adds	r5, #1
 801108e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011092:	4628      	mov	r0, r5
 8011094:	f7ef fa46 	bl	8000524 <__aeabi_i2d>
 8011098:	4642      	mov	r2, r8
 801109a:	464b      	mov	r3, r9
 801109c:	f7ef faac 	bl	80005f8 <__aeabi_dmul>
 80110a0:	4b86      	ldr	r3, [pc, #536]	; (80112bc <_dtoa_r+0x64c>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	f7ef f8f2 	bl	800028c <__adddf3>
 80110a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80110ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110b0:	9303      	str	r3, [sp, #12]
 80110b2:	2e00      	cmp	r6, #0
 80110b4:	d158      	bne.n	8011168 <_dtoa_r+0x4f8>
 80110b6:	4b82      	ldr	r3, [pc, #520]	; (80112c0 <_dtoa_r+0x650>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	4640      	mov	r0, r8
 80110bc:	4649      	mov	r1, r9
 80110be:	f7ef f8e3 	bl	8000288 <__aeabi_dsub>
 80110c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110c6:	4680      	mov	r8, r0
 80110c8:	4689      	mov	r9, r1
 80110ca:	f7ef fd25 	bl	8000b18 <__aeabi_dcmpgt>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	f040 8296 	bne.w	8011600 <_dtoa_r+0x990>
 80110d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80110d8:	4640      	mov	r0, r8
 80110da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110de:	4649      	mov	r1, r9
 80110e0:	f7ef fcfc 	bl	8000adc <__aeabi_dcmplt>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	f040 8289 	bne.w	80115fc <_dtoa_r+0x98c>
 80110ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80110ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f2c0 814e 	blt.w	8011392 <_dtoa_r+0x722>
 80110f6:	f1bb 0f0e 	cmp.w	fp, #14
 80110fa:	f300 814a 	bgt.w	8011392 <_dtoa_r+0x722>
 80110fe:	4b6b      	ldr	r3, [pc, #428]	; (80112ac <_dtoa_r+0x63c>)
 8011100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011104:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801110a:	2b00      	cmp	r3, #0
 801110c:	f280 80dc 	bge.w	80112c8 <_dtoa_r+0x658>
 8011110:	9b04      	ldr	r3, [sp, #16]
 8011112:	2b00      	cmp	r3, #0
 8011114:	f300 80d8 	bgt.w	80112c8 <_dtoa_r+0x658>
 8011118:	f040 826f 	bne.w	80115fa <_dtoa_r+0x98a>
 801111c:	4b68      	ldr	r3, [pc, #416]	; (80112c0 <_dtoa_r+0x650>)
 801111e:	2200      	movs	r2, #0
 8011120:	4640      	mov	r0, r8
 8011122:	4649      	mov	r1, r9
 8011124:	f7ef fa68 	bl	80005f8 <__aeabi_dmul>
 8011128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801112c:	f7ef fcea 	bl	8000b04 <__aeabi_dcmpge>
 8011130:	9e04      	ldr	r6, [sp, #16]
 8011132:	4637      	mov	r7, r6
 8011134:	2800      	cmp	r0, #0
 8011136:	f040 8245 	bne.w	80115c4 <_dtoa_r+0x954>
 801113a:	9d00      	ldr	r5, [sp, #0]
 801113c:	2331      	movs	r3, #49	; 0x31
 801113e:	f805 3b01 	strb.w	r3, [r5], #1
 8011142:	f10b 0b01 	add.w	fp, fp, #1
 8011146:	e241      	b.n	80115cc <_dtoa_r+0x95c>
 8011148:	07f2      	lsls	r2, r6, #31
 801114a:	d505      	bpl.n	8011158 <_dtoa_r+0x4e8>
 801114c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011150:	f7ef fa52 	bl	80005f8 <__aeabi_dmul>
 8011154:	3501      	adds	r5, #1
 8011156:	2301      	movs	r3, #1
 8011158:	1076      	asrs	r6, r6, #1
 801115a:	3708      	adds	r7, #8
 801115c:	e773      	b.n	8011046 <_dtoa_r+0x3d6>
 801115e:	2502      	movs	r5, #2
 8011160:	e775      	b.n	801104e <_dtoa_r+0x3de>
 8011162:	9e04      	ldr	r6, [sp, #16]
 8011164:	465f      	mov	r7, fp
 8011166:	e792      	b.n	801108e <_dtoa_r+0x41e>
 8011168:	9900      	ldr	r1, [sp, #0]
 801116a:	4b50      	ldr	r3, [pc, #320]	; (80112ac <_dtoa_r+0x63c>)
 801116c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011170:	4431      	add	r1, r6
 8011172:	9102      	str	r1, [sp, #8]
 8011174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011176:	eeb0 9a47 	vmov.f32	s18, s14
 801117a:	eef0 9a67 	vmov.f32	s19, s15
 801117e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011186:	2900      	cmp	r1, #0
 8011188:	d044      	beq.n	8011214 <_dtoa_r+0x5a4>
 801118a:	494e      	ldr	r1, [pc, #312]	; (80112c4 <_dtoa_r+0x654>)
 801118c:	2000      	movs	r0, #0
 801118e:	f7ef fb5d 	bl	800084c <__aeabi_ddiv>
 8011192:	ec53 2b19 	vmov	r2, r3, d9
 8011196:	f7ef f877 	bl	8000288 <__aeabi_dsub>
 801119a:	9d00      	ldr	r5, [sp, #0]
 801119c:	ec41 0b19 	vmov	d9, r0, r1
 80111a0:	4649      	mov	r1, r9
 80111a2:	4640      	mov	r0, r8
 80111a4:	f7ef fcd8 	bl	8000b58 <__aeabi_d2iz>
 80111a8:	4606      	mov	r6, r0
 80111aa:	f7ef f9bb 	bl	8000524 <__aeabi_i2d>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4640      	mov	r0, r8
 80111b4:	4649      	mov	r1, r9
 80111b6:	f7ef f867 	bl	8000288 <__aeabi_dsub>
 80111ba:	3630      	adds	r6, #48	; 0x30
 80111bc:	f805 6b01 	strb.w	r6, [r5], #1
 80111c0:	ec53 2b19 	vmov	r2, r3, d9
 80111c4:	4680      	mov	r8, r0
 80111c6:	4689      	mov	r9, r1
 80111c8:	f7ef fc88 	bl	8000adc <__aeabi_dcmplt>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d164      	bne.n	801129a <_dtoa_r+0x62a>
 80111d0:	4642      	mov	r2, r8
 80111d2:	464b      	mov	r3, r9
 80111d4:	4937      	ldr	r1, [pc, #220]	; (80112b4 <_dtoa_r+0x644>)
 80111d6:	2000      	movs	r0, #0
 80111d8:	f7ef f856 	bl	8000288 <__aeabi_dsub>
 80111dc:	ec53 2b19 	vmov	r2, r3, d9
 80111e0:	f7ef fc7c 	bl	8000adc <__aeabi_dcmplt>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	f040 80b6 	bne.w	8011356 <_dtoa_r+0x6e6>
 80111ea:	9b02      	ldr	r3, [sp, #8]
 80111ec:	429d      	cmp	r5, r3
 80111ee:	f43f af7c 	beq.w	80110ea <_dtoa_r+0x47a>
 80111f2:	4b31      	ldr	r3, [pc, #196]	; (80112b8 <_dtoa_r+0x648>)
 80111f4:	ec51 0b19 	vmov	r0, r1, d9
 80111f8:	2200      	movs	r2, #0
 80111fa:	f7ef f9fd 	bl	80005f8 <__aeabi_dmul>
 80111fe:	4b2e      	ldr	r3, [pc, #184]	; (80112b8 <_dtoa_r+0x648>)
 8011200:	ec41 0b19 	vmov	d9, r0, r1
 8011204:	2200      	movs	r2, #0
 8011206:	4640      	mov	r0, r8
 8011208:	4649      	mov	r1, r9
 801120a:	f7ef f9f5 	bl	80005f8 <__aeabi_dmul>
 801120e:	4680      	mov	r8, r0
 8011210:	4689      	mov	r9, r1
 8011212:	e7c5      	b.n	80111a0 <_dtoa_r+0x530>
 8011214:	ec51 0b17 	vmov	r0, r1, d7
 8011218:	f7ef f9ee 	bl	80005f8 <__aeabi_dmul>
 801121c:	9b02      	ldr	r3, [sp, #8]
 801121e:	9d00      	ldr	r5, [sp, #0]
 8011220:	930f      	str	r3, [sp, #60]	; 0x3c
 8011222:	ec41 0b19 	vmov	d9, r0, r1
 8011226:	4649      	mov	r1, r9
 8011228:	4640      	mov	r0, r8
 801122a:	f7ef fc95 	bl	8000b58 <__aeabi_d2iz>
 801122e:	4606      	mov	r6, r0
 8011230:	f7ef f978 	bl	8000524 <__aeabi_i2d>
 8011234:	3630      	adds	r6, #48	; 0x30
 8011236:	4602      	mov	r2, r0
 8011238:	460b      	mov	r3, r1
 801123a:	4640      	mov	r0, r8
 801123c:	4649      	mov	r1, r9
 801123e:	f7ef f823 	bl	8000288 <__aeabi_dsub>
 8011242:	f805 6b01 	strb.w	r6, [r5], #1
 8011246:	9b02      	ldr	r3, [sp, #8]
 8011248:	429d      	cmp	r5, r3
 801124a:	4680      	mov	r8, r0
 801124c:	4689      	mov	r9, r1
 801124e:	f04f 0200 	mov.w	r2, #0
 8011252:	d124      	bne.n	801129e <_dtoa_r+0x62e>
 8011254:	4b1b      	ldr	r3, [pc, #108]	; (80112c4 <_dtoa_r+0x654>)
 8011256:	ec51 0b19 	vmov	r0, r1, d9
 801125a:	f7ef f817 	bl	800028c <__adddf3>
 801125e:	4602      	mov	r2, r0
 8011260:	460b      	mov	r3, r1
 8011262:	4640      	mov	r0, r8
 8011264:	4649      	mov	r1, r9
 8011266:	f7ef fc57 	bl	8000b18 <__aeabi_dcmpgt>
 801126a:	2800      	cmp	r0, #0
 801126c:	d173      	bne.n	8011356 <_dtoa_r+0x6e6>
 801126e:	ec53 2b19 	vmov	r2, r3, d9
 8011272:	4914      	ldr	r1, [pc, #80]	; (80112c4 <_dtoa_r+0x654>)
 8011274:	2000      	movs	r0, #0
 8011276:	f7ef f807 	bl	8000288 <__aeabi_dsub>
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	4640      	mov	r0, r8
 8011280:	4649      	mov	r1, r9
 8011282:	f7ef fc2b 	bl	8000adc <__aeabi_dcmplt>
 8011286:	2800      	cmp	r0, #0
 8011288:	f43f af2f 	beq.w	80110ea <_dtoa_r+0x47a>
 801128c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801128e:	1e6b      	subs	r3, r5, #1
 8011290:	930f      	str	r3, [sp, #60]	; 0x3c
 8011292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011296:	2b30      	cmp	r3, #48	; 0x30
 8011298:	d0f8      	beq.n	801128c <_dtoa_r+0x61c>
 801129a:	46bb      	mov	fp, r7
 801129c:	e04a      	b.n	8011334 <_dtoa_r+0x6c4>
 801129e:	4b06      	ldr	r3, [pc, #24]	; (80112b8 <_dtoa_r+0x648>)
 80112a0:	f7ef f9aa 	bl	80005f8 <__aeabi_dmul>
 80112a4:	4680      	mov	r8, r0
 80112a6:	4689      	mov	r9, r1
 80112a8:	e7bd      	b.n	8011226 <_dtoa_r+0x5b6>
 80112aa:	bf00      	nop
 80112ac:	080131b8 	.word	0x080131b8
 80112b0:	08013190 	.word	0x08013190
 80112b4:	3ff00000 	.word	0x3ff00000
 80112b8:	40240000 	.word	0x40240000
 80112bc:	401c0000 	.word	0x401c0000
 80112c0:	40140000 	.word	0x40140000
 80112c4:	3fe00000 	.word	0x3fe00000
 80112c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80112cc:	9d00      	ldr	r5, [sp, #0]
 80112ce:	4642      	mov	r2, r8
 80112d0:	464b      	mov	r3, r9
 80112d2:	4630      	mov	r0, r6
 80112d4:	4639      	mov	r1, r7
 80112d6:	f7ef fab9 	bl	800084c <__aeabi_ddiv>
 80112da:	f7ef fc3d 	bl	8000b58 <__aeabi_d2iz>
 80112de:	9001      	str	r0, [sp, #4]
 80112e0:	f7ef f920 	bl	8000524 <__aeabi_i2d>
 80112e4:	4642      	mov	r2, r8
 80112e6:	464b      	mov	r3, r9
 80112e8:	f7ef f986 	bl	80005f8 <__aeabi_dmul>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	4630      	mov	r0, r6
 80112f2:	4639      	mov	r1, r7
 80112f4:	f7ee ffc8 	bl	8000288 <__aeabi_dsub>
 80112f8:	9e01      	ldr	r6, [sp, #4]
 80112fa:	9f04      	ldr	r7, [sp, #16]
 80112fc:	3630      	adds	r6, #48	; 0x30
 80112fe:	f805 6b01 	strb.w	r6, [r5], #1
 8011302:	9e00      	ldr	r6, [sp, #0]
 8011304:	1bae      	subs	r6, r5, r6
 8011306:	42b7      	cmp	r7, r6
 8011308:	4602      	mov	r2, r0
 801130a:	460b      	mov	r3, r1
 801130c:	d134      	bne.n	8011378 <_dtoa_r+0x708>
 801130e:	f7ee ffbd 	bl	800028c <__adddf3>
 8011312:	4642      	mov	r2, r8
 8011314:	464b      	mov	r3, r9
 8011316:	4606      	mov	r6, r0
 8011318:	460f      	mov	r7, r1
 801131a:	f7ef fbfd 	bl	8000b18 <__aeabi_dcmpgt>
 801131e:	b9c8      	cbnz	r0, 8011354 <_dtoa_r+0x6e4>
 8011320:	4642      	mov	r2, r8
 8011322:	464b      	mov	r3, r9
 8011324:	4630      	mov	r0, r6
 8011326:	4639      	mov	r1, r7
 8011328:	f7ef fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 801132c:	b110      	cbz	r0, 8011334 <_dtoa_r+0x6c4>
 801132e:	9b01      	ldr	r3, [sp, #4]
 8011330:	07db      	lsls	r3, r3, #31
 8011332:	d40f      	bmi.n	8011354 <_dtoa_r+0x6e4>
 8011334:	4651      	mov	r1, sl
 8011336:	4620      	mov	r0, r4
 8011338:	f000 fbcc 	bl	8011ad4 <_Bfree>
 801133c:	2300      	movs	r3, #0
 801133e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011340:	702b      	strb	r3, [r5, #0]
 8011342:	f10b 0301 	add.w	r3, fp, #1
 8011346:	6013      	str	r3, [r2, #0]
 8011348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801134a:	2b00      	cmp	r3, #0
 801134c:	f43f ace2 	beq.w	8010d14 <_dtoa_r+0xa4>
 8011350:	601d      	str	r5, [r3, #0]
 8011352:	e4df      	b.n	8010d14 <_dtoa_r+0xa4>
 8011354:	465f      	mov	r7, fp
 8011356:	462b      	mov	r3, r5
 8011358:	461d      	mov	r5, r3
 801135a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801135e:	2a39      	cmp	r2, #57	; 0x39
 8011360:	d106      	bne.n	8011370 <_dtoa_r+0x700>
 8011362:	9a00      	ldr	r2, [sp, #0]
 8011364:	429a      	cmp	r2, r3
 8011366:	d1f7      	bne.n	8011358 <_dtoa_r+0x6e8>
 8011368:	9900      	ldr	r1, [sp, #0]
 801136a:	2230      	movs	r2, #48	; 0x30
 801136c:	3701      	adds	r7, #1
 801136e:	700a      	strb	r2, [r1, #0]
 8011370:	781a      	ldrb	r2, [r3, #0]
 8011372:	3201      	adds	r2, #1
 8011374:	701a      	strb	r2, [r3, #0]
 8011376:	e790      	b.n	801129a <_dtoa_r+0x62a>
 8011378:	4ba3      	ldr	r3, [pc, #652]	; (8011608 <_dtoa_r+0x998>)
 801137a:	2200      	movs	r2, #0
 801137c:	f7ef f93c 	bl	80005f8 <__aeabi_dmul>
 8011380:	2200      	movs	r2, #0
 8011382:	2300      	movs	r3, #0
 8011384:	4606      	mov	r6, r0
 8011386:	460f      	mov	r7, r1
 8011388:	f7ef fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 801138c:	2800      	cmp	r0, #0
 801138e:	d09e      	beq.n	80112ce <_dtoa_r+0x65e>
 8011390:	e7d0      	b.n	8011334 <_dtoa_r+0x6c4>
 8011392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011394:	2a00      	cmp	r2, #0
 8011396:	f000 80ca 	beq.w	801152e <_dtoa_r+0x8be>
 801139a:	9a07      	ldr	r2, [sp, #28]
 801139c:	2a01      	cmp	r2, #1
 801139e:	f300 80ad 	bgt.w	80114fc <_dtoa_r+0x88c>
 80113a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113a4:	2a00      	cmp	r2, #0
 80113a6:	f000 80a5 	beq.w	80114f4 <_dtoa_r+0x884>
 80113aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80113ae:	9e08      	ldr	r6, [sp, #32]
 80113b0:	9d05      	ldr	r5, [sp, #20]
 80113b2:	9a05      	ldr	r2, [sp, #20]
 80113b4:	441a      	add	r2, r3
 80113b6:	9205      	str	r2, [sp, #20]
 80113b8:	9a06      	ldr	r2, [sp, #24]
 80113ba:	2101      	movs	r1, #1
 80113bc:	441a      	add	r2, r3
 80113be:	4620      	mov	r0, r4
 80113c0:	9206      	str	r2, [sp, #24]
 80113c2:	f000 fc3d 	bl	8011c40 <__i2b>
 80113c6:	4607      	mov	r7, r0
 80113c8:	b165      	cbz	r5, 80113e4 <_dtoa_r+0x774>
 80113ca:	9b06      	ldr	r3, [sp, #24]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	dd09      	ble.n	80113e4 <_dtoa_r+0x774>
 80113d0:	42ab      	cmp	r3, r5
 80113d2:	9a05      	ldr	r2, [sp, #20]
 80113d4:	bfa8      	it	ge
 80113d6:	462b      	movge	r3, r5
 80113d8:	1ad2      	subs	r2, r2, r3
 80113da:	9205      	str	r2, [sp, #20]
 80113dc:	9a06      	ldr	r2, [sp, #24]
 80113de:	1aed      	subs	r5, r5, r3
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	9306      	str	r3, [sp, #24]
 80113e4:	9b08      	ldr	r3, [sp, #32]
 80113e6:	b1f3      	cbz	r3, 8011426 <_dtoa_r+0x7b6>
 80113e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	f000 80a3 	beq.w	8011536 <_dtoa_r+0x8c6>
 80113f0:	2e00      	cmp	r6, #0
 80113f2:	dd10      	ble.n	8011416 <_dtoa_r+0x7a6>
 80113f4:	4639      	mov	r1, r7
 80113f6:	4632      	mov	r2, r6
 80113f8:	4620      	mov	r0, r4
 80113fa:	f000 fce1 	bl	8011dc0 <__pow5mult>
 80113fe:	4652      	mov	r2, sl
 8011400:	4601      	mov	r1, r0
 8011402:	4607      	mov	r7, r0
 8011404:	4620      	mov	r0, r4
 8011406:	f000 fc31 	bl	8011c6c <__multiply>
 801140a:	4651      	mov	r1, sl
 801140c:	4680      	mov	r8, r0
 801140e:	4620      	mov	r0, r4
 8011410:	f000 fb60 	bl	8011ad4 <_Bfree>
 8011414:	46c2      	mov	sl, r8
 8011416:	9b08      	ldr	r3, [sp, #32]
 8011418:	1b9a      	subs	r2, r3, r6
 801141a:	d004      	beq.n	8011426 <_dtoa_r+0x7b6>
 801141c:	4651      	mov	r1, sl
 801141e:	4620      	mov	r0, r4
 8011420:	f000 fcce 	bl	8011dc0 <__pow5mult>
 8011424:	4682      	mov	sl, r0
 8011426:	2101      	movs	r1, #1
 8011428:	4620      	mov	r0, r4
 801142a:	f000 fc09 	bl	8011c40 <__i2b>
 801142e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011430:	2b00      	cmp	r3, #0
 8011432:	4606      	mov	r6, r0
 8011434:	f340 8081 	ble.w	801153a <_dtoa_r+0x8ca>
 8011438:	461a      	mov	r2, r3
 801143a:	4601      	mov	r1, r0
 801143c:	4620      	mov	r0, r4
 801143e:	f000 fcbf 	bl	8011dc0 <__pow5mult>
 8011442:	9b07      	ldr	r3, [sp, #28]
 8011444:	2b01      	cmp	r3, #1
 8011446:	4606      	mov	r6, r0
 8011448:	dd7a      	ble.n	8011540 <_dtoa_r+0x8d0>
 801144a:	f04f 0800 	mov.w	r8, #0
 801144e:	6933      	ldr	r3, [r6, #16]
 8011450:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011454:	6918      	ldr	r0, [r3, #16]
 8011456:	f000 fba5 	bl	8011ba4 <__hi0bits>
 801145a:	f1c0 0020 	rsb	r0, r0, #32
 801145e:	9b06      	ldr	r3, [sp, #24]
 8011460:	4418      	add	r0, r3
 8011462:	f010 001f 	ands.w	r0, r0, #31
 8011466:	f000 8094 	beq.w	8011592 <_dtoa_r+0x922>
 801146a:	f1c0 0320 	rsb	r3, r0, #32
 801146e:	2b04      	cmp	r3, #4
 8011470:	f340 8085 	ble.w	801157e <_dtoa_r+0x90e>
 8011474:	9b05      	ldr	r3, [sp, #20]
 8011476:	f1c0 001c 	rsb	r0, r0, #28
 801147a:	4403      	add	r3, r0
 801147c:	9305      	str	r3, [sp, #20]
 801147e:	9b06      	ldr	r3, [sp, #24]
 8011480:	4403      	add	r3, r0
 8011482:	4405      	add	r5, r0
 8011484:	9306      	str	r3, [sp, #24]
 8011486:	9b05      	ldr	r3, [sp, #20]
 8011488:	2b00      	cmp	r3, #0
 801148a:	dd05      	ble.n	8011498 <_dtoa_r+0x828>
 801148c:	4651      	mov	r1, sl
 801148e:	461a      	mov	r2, r3
 8011490:	4620      	mov	r0, r4
 8011492:	f000 fcef 	bl	8011e74 <__lshift>
 8011496:	4682      	mov	sl, r0
 8011498:	9b06      	ldr	r3, [sp, #24]
 801149a:	2b00      	cmp	r3, #0
 801149c:	dd05      	ble.n	80114aa <_dtoa_r+0x83a>
 801149e:	4631      	mov	r1, r6
 80114a0:	461a      	mov	r2, r3
 80114a2:	4620      	mov	r0, r4
 80114a4:	f000 fce6 	bl	8011e74 <__lshift>
 80114a8:	4606      	mov	r6, r0
 80114aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d072      	beq.n	8011596 <_dtoa_r+0x926>
 80114b0:	4631      	mov	r1, r6
 80114b2:	4650      	mov	r0, sl
 80114b4:	f000 fd4a 	bl	8011f4c <__mcmp>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	da6c      	bge.n	8011596 <_dtoa_r+0x926>
 80114bc:	2300      	movs	r3, #0
 80114be:	4651      	mov	r1, sl
 80114c0:	220a      	movs	r2, #10
 80114c2:	4620      	mov	r0, r4
 80114c4:	f000 fb28 	bl	8011b18 <__multadd>
 80114c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80114ce:	4682      	mov	sl, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 81b0 	beq.w	8011836 <_dtoa_r+0xbc6>
 80114d6:	2300      	movs	r3, #0
 80114d8:	4639      	mov	r1, r7
 80114da:	220a      	movs	r2, #10
 80114dc:	4620      	mov	r0, r4
 80114de:	f000 fb1b 	bl	8011b18 <__multadd>
 80114e2:	9b01      	ldr	r3, [sp, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	4607      	mov	r7, r0
 80114e8:	f300 8096 	bgt.w	8011618 <_dtoa_r+0x9a8>
 80114ec:	9b07      	ldr	r3, [sp, #28]
 80114ee:	2b02      	cmp	r3, #2
 80114f0:	dc59      	bgt.n	80115a6 <_dtoa_r+0x936>
 80114f2:	e091      	b.n	8011618 <_dtoa_r+0x9a8>
 80114f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80114fa:	e758      	b.n	80113ae <_dtoa_r+0x73e>
 80114fc:	9b04      	ldr	r3, [sp, #16]
 80114fe:	1e5e      	subs	r6, r3, #1
 8011500:	9b08      	ldr	r3, [sp, #32]
 8011502:	42b3      	cmp	r3, r6
 8011504:	bfbf      	itttt	lt
 8011506:	9b08      	ldrlt	r3, [sp, #32]
 8011508:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801150a:	9608      	strlt	r6, [sp, #32]
 801150c:	1af3      	sublt	r3, r6, r3
 801150e:	bfb4      	ite	lt
 8011510:	18d2      	addlt	r2, r2, r3
 8011512:	1b9e      	subge	r6, r3, r6
 8011514:	9b04      	ldr	r3, [sp, #16]
 8011516:	bfbc      	itt	lt
 8011518:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801151a:	2600      	movlt	r6, #0
 801151c:	2b00      	cmp	r3, #0
 801151e:	bfb7      	itett	lt
 8011520:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011524:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011528:	1a9d      	sublt	r5, r3, r2
 801152a:	2300      	movlt	r3, #0
 801152c:	e741      	b.n	80113b2 <_dtoa_r+0x742>
 801152e:	9e08      	ldr	r6, [sp, #32]
 8011530:	9d05      	ldr	r5, [sp, #20]
 8011532:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011534:	e748      	b.n	80113c8 <_dtoa_r+0x758>
 8011536:	9a08      	ldr	r2, [sp, #32]
 8011538:	e770      	b.n	801141c <_dtoa_r+0x7ac>
 801153a:	9b07      	ldr	r3, [sp, #28]
 801153c:	2b01      	cmp	r3, #1
 801153e:	dc19      	bgt.n	8011574 <_dtoa_r+0x904>
 8011540:	9b02      	ldr	r3, [sp, #8]
 8011542:	b9bb      	cbnz	r3, 8011574 <_dtoa_r+0x904>
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801154a:	b99b      	cbnz	r3, 8011574 <_dtoa_r+0x904>
 801154c:	9b03      	ldr	r3, [sp, #12]
 801154e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011552:	0d1b      	lsrs	r3, r3, #20
 8011554:	051b      	lsls	r3, r3, #20
 8011556:	b183      	cbz	r3, 801157a <_dtoa_r+0x90a>
 8011558:	9b05      	ldr	r3, [sp, #20]
 801155a:	3301      	adds	r3, #1
 801155c:	9305      	str	r3, [sp, #20]
 801155e:	9b06      	ldr	r3, [sp, #24]
 8011560:	3301      	adds	r3, #1
 8011562:	9306      	str	r3, [sp, #24]
 8011564:	f04f 0801 	mov.w	r8, #1
 8011568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801156a:	2b00      	cmp	r3, #0
 801156c:	f47f af6f 	bne.w	801144e <_dtoa_r+0x7de>
 8011570:	2001      	movs	r0, #1
 8011572:	e774      	b.n	801145e <_dtoa_r+0x7ee>
 8011574:	f04f 0800 	mov.w	r8, #0
 8011578:	e7f6      	b.n	8011568 <_dtoa_r+0x8f8>
 801157a:	4698      	mov	r8, r3
 801157c:	e7f4      	b.n	8011568 <_dtoa_r+0x8f8>
 801157e:	d082      	beq.n	8011486 <_dtoa_r+0x816>
 8011580:	9a05      	ldr	r2, [sp, #20]
 8011582:	331c      	adds	r3, #28
 8011584:	441a      	add	r2, r3
 8011586:	9205      	str	r2, [sp, #20]
 8011588:	9a06      	ldr	r2, [sp, #24]
 801158a:	441a      	add	r2, r3
 801158c:	441d      	add	r5, r3
 801158e:	9206      	str	r2, [sp, #24]
 8011590:	e779      	b.n	8011486 <_dtoa_r+0x816>
 8011592:	4603      	mov	r3, r0
 8011594:	e7f4      	b.n	8011580 <_dtoa_r+0x910>
 8011596:	9b04      	ldr	r3, [sp, #16]
 8011598:	2b00      	cmp	r3, #0
 801159a:	dc37      	bgt.n	801160c <_dtoa_r+0x99c>
 801159c:	9b07      	ldr	r3, [sp, #28]
 801159e:	2b02      	cmp	r3, #2
 80115a0:	dd34      	ble.n	801160c <_dtoa_r+0x99c>
 80115a2:	9b04      	ldr	r3, [sp, #16]
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	9b01      	ldr	r3, [sp, #4]
 80115a8:	b963      	cbnz	r3, 80115c4 <_dtoa_r+0x954>
 80115aa:	4631      	mov	r1, r6
 80115ac:	2205      	movs	r2, #5
 80115ae:	4620      	mov	r0, r4
 80115b0:	f000 fab2 	bl	8011b18 <__multadd>
 80115b4:	4601      	mov	r1, r0
 80115b6:	4606      	mov	r6, r0
 80115b8:	4650      	mov	r0, sl
 80115ba:	f000 fcc7 	bl	8011f4c <__mcmp>
 80115be:	2800      	cmp	r0, #0
 80115c0:	f73f adbb 	bgt.w	801113a <_dtoa_r+0x4ca>
 80115c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c6:	9d00      	ldr	r5, [sp, #0]
 80115c8:	ea6f 0b03 	mvn.w	fp, r3
 80115cc:	f04f 0800 	mov.w	r8, #0
 80115d0:	4631      	mov	r1, r6
 80115d2:	4620      	mov	r0, r4
 80115d4:	f000 fa7e 	bl	8011ad4 <_Bfree>
 80115d8:	2f00      	cmp	r7, #0
 80115da:	f43f aeab 	beq.w	8011334 <_dtoa_r+0x6c4>
 80115de:	f1b8 0f00 	cmp.w	r8, #0
 80115e2:	d005      	beq.n	80115f0 <_dtoa_r+0x980>
 80115e4:	45b8      	cmp	r8, r7
 80115e6:	d003      	beq.n	80115f0 <_dtoa_r+0x980>
 80115e8:	4641      	mov	r1, r8
 80115ea:	4620      	mov	r0, r4
 80115ec:	f000 fa72 	bl	8011ad4 <_Bfree>
 80115f0:	4639      	mov	r1, r7
 80115f2:	4620      	mov	r0, r4
 80115f4:	f000 fa6e 	bl	8011ad4 <_Bfree>
 80115f8:	e69c      	b.n	8011334 <_dtoa_r+0x6c4>
 80115fa:	2600      	movs	r6, #0
 80115fc:	4637      	mov	r7, r6
 80115fe:	e7e1      	b.n	80115c4 <_dtoa_r+0x954>
 8011600:	46bb      	mov	fp, r7
 8011602:	4637      	mov	r7, r6
 8011604:	e599      	b.n	801113a <_dtoa_r+0x4ca>
 8011606:	bf00      	nop
 8011608:	40240000 	.word	0x40240000
 801160c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801160e:	2b00      	cmp	r3, #0
 8011610:	f000 80c8 	beq.w	80117a4 <_dtoa_r+0xb34>
 8011614:	9b04      	ldr	r3, [sp, #16]
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	2d00      	cmp	r5, #0
 801161a:	dd05      	ble.n	8011628 <_dtoa_r+0x9b8>
 801161c:	4639      	mov	r1, r7
 801161e:	462a      	mov	r2, r5
 8011620:	4620      	mov	r0, r4
 8011622:	f000 fc27 	bl	8011e74 <__lshift>
 8011626:	4607      	mov	r7, r0
 8011628:	f1b8 0f00 	cmp.w	r8, #0
 801162c:	d05b      	beq.n	80116e6 <_dtoa_r+0xa76>
 801162e:	6879      	ldr	r1, [r7, #4]
 8011630:	4620      	mov	r0, r4
 8011632:	f000 fa0f 	bl	8011a54 <_Balloc>
 8011636:	4605      	mov	r5, r0
 8011638:	b928      	cbnz	r0, 8011646 <_dtoa_r+0x9d6>
 801163a:	4b83      	ldr	r3, [pc, #524]	; (8011848 <_dtoa_r+0xbd8>)
 801163c:	4602      	mov	r2, r0
 801163e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011642:	f7ff bb2e 	b.w	8010ca2 <_dtoa_r+0x32>
 8011646:	693a      	ldr	r2, [r7, #16]
 8011648:	3202      	adds	r2, #2
 801164a:	0092      	lsls	r2, r2, #2
 801164c:	f107 010c 	add.w	r1, r7, #12
 8011650:	300c      	adds	r0, #12
 8011652:	f7ff fa75 	bl	8010b40 <memcpy>
 8011656:	2201      	movs	r2, #1
 8011658:	4629      	mov	r1, r5
 801165a:	4620      	mov	r0, r4
 801165c:	f000 fc0a 	bl	8011e74 <__lshift>
 8011660:	9b00      	ldr	r3, [sp, #0]
 8011662:	3301      	adds	r3, #1
 8011664:	9304      	str	r3, [sp, #16]
 8011666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801166a:	4413      	add	r3, r2
 801166c:	9308      	str	r3, [sp, #32]
 801166e:	9b02      	ldr	r3, [sp, #8]
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	46b8      	mov	r8, r7
 8011676:	9306      	str	r3, [sp, #24]
 8011678:	4607      	mov	r7, r0
 801167a:	9b04      	ldr	r3, [sp, #16]
 801167c:	4631      	mov	r1, r6
 801167e:	3b01      	subs	r3, #1
 8011680:	4650      	mov	r0, sl
 8011682:	9301      	str	r3, [sp, #4]
 8011684:	f7ff fa6a 	bl	8010b5c <quorem>
 8011688:	4641      	mov	r1, r8
 801168a:	9002      	str	r0, [sp, #8]
 801168c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011690:	4650      	mov	r0, sl
 8011692:	f000 fc5b 	bl	8011f4c <__mcmp>
 8011696:	463a      	mov	r2, r7
 8011698:	9005      	str	r0, [sp, #20]
 801169a:	4631      	mov	r1, r6
 801169c:	4620      	mov	r0, r4
 801169e:	f000 fc71 	bl	8011f84 <__mdiff>
 80116a2:	68c2      	ldr	r2, [r0, #12]
 80116a4:	4605      	mov	r5, r0
 80116a6:	bb02      	cbnz	r2, 80116ea <_dtoa_r+0xa7a>
 80116a8:	4601      	mov	r1, r0
 80116aa:	4650      	mov	r0, sl
 80116ac:	f000 fc4e 	bl	8011f4c <__mcmp>
 80116b0:	4602      	mov	r2, r0
 80116b2:	4629      	mov	r1, r5
 80116b4:	4620      	mov	r0, r4
 80116b6:	9209      	str	r2, [sp, #36]	; 0x24
 80116b8:	f000 fa0c 	bl	8011ad4 <_Bfree>
 80116bc:	9b07      	ldr	r3, [sp, #28]
 80116be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116c0:	9d04      	ldr	r5, [sp, #16]
 80116c2:	ea43 0102 	orr.w	r1, r3, r2
 80116c6:	9b06      	ldr	r3, [sp, #24]
 80116c8:	4319      	orrs	r1, r3
 80116ca:	d110      	bne.n	80116ee <_dtoa_r+0xa7e>
 80116cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80116d0:	d029      	beq.n	8011726 <_dtoa_r+0xab6>
 80116d2:	9b05      	ldr	r3, [sp, #20]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	dd02      	ble.n	80116de <_dtoa_r+0xa6e>
 80116d8:	9b02      	ldr	r3, [sp, #8]
 80116da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80116de:	9b01      	ldr	r3, [sp, #4]
 80116e0:	f883 9000 	strb.w	r9, [r3]
 80116e4:	e774      	b.n	80115d0 <_dtoa_r+0x960>
 80116e6:	4638      	mov	r0, r7
 80116e8:	e7ba      	b.n	8011660 <_dtoa_r+0x9f0>
 80116ea:	2201      	movs	r2, #1
 80116ec:	e7e1      	b.n	80116b2 <_dtoa_r+0xa42>
 80116ee:	9b05      	ldr	r3, [sp, #20]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	db04      	blt.n	80116fe <_dtoa_r+0xa8e>
 80116f4:	9907      	ldr	r1, [sp, #28]
 80116f6:	430b      	orrs	r3, r1
 80116f8:	9906      	ldr	r1, [sp, #24]
 80116fa:	430b      	orrs	r3, r1
 80116fc:	d120      	bne.n	8011740 <_dtoa_r+0xad0>
 80116fe:	2a00      	cmp	r2, #0
 8011700:	dded      	ble.n	80116de <_dtoa_r+0xa6e>
 8011702:	4651      	mov	r1, sl
 8011704:	2201      	movs	r2, #1
 8011706:	4620      	mov	r0, r4
 8011708:	f000 fbb4 	bl	8011e74 <__lshift>
 801170c:	4631      	mov	r1, r6
 801170e:	4682      	mov	sl, r0
 8011710:	f000 fc1c 	bl	8011f4c <__mcmp>
 8011714:	2800      	cmp	r0, #0
 8011716:	dc03      	bgt.n	8011720 <_dtoa_r+0xab0>
 8011718:	d1e1      	bne.n	80116de <_dtoa_r+0xa6e>
 801171a:	f019 0f01 	tst.w	r9, #1
 801171e:	d0de      	beq.n	80116de <_dtoa_r+0xa6e>
 8011720:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011724:	d1d8      	bne.n	80116d8 <_dtoa_r+0xa68>
 8011726:	9a01      	ldr	r2, [sp, #4]
 8011728:	2339      	movs	r3, #57	; 0x39
 801172a:	7013      	strb	r3, [r2, #0]
 801172c:	462b      	mov	r3, r5
 801172e:	461d      	mov	r5, r3
 8011730:	3b01      	subs	r3, #1
 8011732:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011736:	2a39      	cmp	r2, #57	; 0x39
 8011738:	d06c      	beq.n	8011814 <_dtoa_r+0xba4>
 801173a:	3201      	adds	r2, #1
 801173c:	701a      	strb	r2, [r3, #0]
 801173e:	e747      	b.n	80115d0 <_dtoa_r+0x960>
 8011740:	2a00      	cmp	r2, #0
 8011742:	dd07      	ble.n	8011754 <_dtoa_r+0xae4>
 8011744:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011748:	d0ed      	beq.n	8011726 <_dtoa_r+0xab6>
 801174a:	9a01      	ldr	r2, [sp, #4]
 801174c:	f109 0301 	add.w	r3, r9, #1
 8011750:	7013      	strb	r3, [r2, #0]
 8011752:	e73d      	b.n	80115d0 <_dtoa_r+0x960>
 8011754:	9b04      	ldr	r3, [sp, #16]
 8011756:	9a08      	ldr	r2, [sp, #32]
 8011758:	f803 9c01 	strb.w	r9, [r3, #-1]
 801175c:	4293      	cmp	r3, r2
 801175e:	d043      	beq.n	80117e8 <_dtoa_r+0xb78>
 8011760:	4651      	mov	r1, sl
 8011762:	2300      	movs	r3, #0
 8011764:	220a      	movs	r2, #10
 8011766:	4620      	mov	r0, r4
 8011768:	f000 f9d6 	bl	8011b18 <__multadd>
 801176c:	45b8      	cmp	r8, r7
 801176e:	4682      	mov	sl, r0
 8011770:	f04f 0300 	mov.w	r3, #0
 8011774:	f04f 020a 	mov.w	r2, #10
 8011778:	4641      	mov	r1, r8
 801177a:	4620      	mov	r0, r4
 801177c:	d107      	bne.n	801178e <_dtoa_r+0xb1e>
 801177e:	f000 f9cb 	bl	8011b18 <__multadd>
 8011782:	4680      	mov	r8, r0
 8011784:	4607      	mov	r7, r0
 8011786:	9b04      	ldr	r3, [sp, #16]
 8011788:	3301      	adds	r3, #1
 801178a:	9304      	str	r3, [sp, #16]
 801178c:	e775      	b.n	801167a <_dtoa_r+0xa0a>
 801178e:	f000 f9c3 	bl	8011b18 <__multadd>
 8011792:	4639      	mov	r1, r7
 8011794:	4680      	mov	r8, r0
 8011796:	2300      	movs	r3, #0
 8011798:	220a      	movs	r2, #10
 801179a:	4620      	mov	r0, r4
 801179c:	f000 f9bc 	bl	8011b18 <__multadd>
 80117a0:	4607      	mov	r7, r0
 80117a2:	e7f0      	b.n	8011786 <_dtoa_r+0xb16>
 80117a4:	9b04      	ldr	r3, [sp, #16]
 80117a6:	9301      	str	r3, [sp, #4]
 80117a8:	9d00      	ldr	r5, [sp, #0]
 80117aa:	4631      	mov	r1, r6
 80117ac:	4650      	mov	r0, sl
 80117ae:	f7ff f9d5 	bl	8010b5c <quorem>
 80117b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80117b6:	9b00      	ldr	r3, [sp, #0]
 80117b8:	f805 9b01 	strb.w	r9, [r5], #1
 80117bc:	1aea      	subs	r2, r5, r3
 80117be:	9b01      	ldr	r3, [sp, #4]
 80117c0:	4293      	cmp	r3, r2
 80117c2:	dd07      	ble.n	80117d4 <_dtoa_r+0xb64>
 80117c4:	4651      	mov	r1, sl
 80117c6:	2300      	movs	r3, #0
 80117c8:	220a      	movs	r2, #10
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 f9a4 	bl	8011b18 <__multadd>
 80117d0:	4682      	mov	sl, r0
 80117d2:	e7ea      	b.n	80117aa <_dtoa_r+0xb3a>
 80117d4:	9b01      	ldr	r3, [sp, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	bfc8      	it	gt
 80117da:	461d      	movgt	r5, r3
 80117dc:	9b00      	ldr	r3, [sp, #0]
 80117de:	bfd8      	it	le
 80117e0:	2501      	movle	r5, #1
 80117e2:	441d      	add	r5, r3
 80117e4:	f04f 0800 	mov.w	r8, #0
 80117e8:	4651      	mov	r1, sl
 80117ea:	2201      	movs	r2, #1
 80117ec:	4620      	mov	r0, r4
 80117ee:	f000 fb41 	bl	8011e74 <__lshift>
 80117f2:	4631      	mov	r1, r6
 80117f4:	4682      	mov	sl, r0
 80117f6:	f000 fba9 	bl	8011f4c <__mcmp>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	dc96      	bgt.n	801172c <_dtoa_r+0xabc>
 80117fe:	d102      	bne.n	8011806 <_dtoa_r+0xb96>
 8011800:	f019 0f01 	tst.w	r9, #1
 8011804:	d192      	bne.n	801172c <_dtoa_r+0xabc>
 8011806:	462b      	mov	r3, r5
 8011808:	461d      	mov	r5, r3
 801180a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801180e:	2a30      	cmp	r2, #48	; 0x30
 8011810:	d0fa      	beq.n	8011808 <_dtoa_r+0xb98>
 8011812:	e6dd      	b.n	80115d0 <_dtoa_r+0x960>
 8011814:	9a00      	ldr	r2, [sp, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	d189      	bne.n	801172e <_dtoa_r+0xabe>
 801181a:	f10b 0b01 	add.w	fp, fp, #1
 801181e:	2331      	movs	r3, #49	; 0x31
 8011820:	e796      	b.n	8011750 <_dtoa_r+0xae0>
 8011822:	4b0a      	ldr	r3, [pc, #40]	; (801184c <_dtoa_r+0xbdc>)
 8011824:	f7ff ba99 	b.w	8010d5a <_dtoa_r+0xea>
 8011828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801182a:	2b00      	cmp	r3, #0
 801182c:	f47f aa6d 	bne.w	8010d0a <_dtoa_r+0x9a>
 8011830:	4b07      	ldr	r3, [pc, #28]	; (8011850 <_dtoa_r+0xbe0>)
 8011832:	f7ff ba92 	b.w	8010d5a <_dtoa_r+0xea>
 8011836:	9b01      	ldr	r3, [sp, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	dcb5      	bgt.n	80117a8 <_dtoa_r+0xb38>
 801183c:	9b07      	ldr	r3, [sp, #28]
 801183e:	2b02      	cmp	r3, #2
 8011840:	f73f aeb1 	bgt.w	80115a6 <_dtoa_r+0x936>
 8011844:	e7b0      	b.n	80117a8 <_dtoa_r+0xb38>
 8011846:	bf00      	nop
 8011848:	08013124 	.word	0x08013124
 801184c:	08013084 	.word	0x08013084
 8011850:	080130a8 	.word	0x080130a8

08011854 <_free_r>:
 8011854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011856:	2900      	cmp	r1, #0
 8011858:	d044      	beq.n	80118e4 <_free_r+0x90>
 801185a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801185e:	9001      	str	r0, [sp, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	f1a1 0404 	sub.w	r4, r1, #4
 8011866:	bfb8      	it	lt
 8011868:	18e4      	addlt	r4, r4, r3
 801186a:	f000 f8e7 	bl	8011a3c <__malloc_lock>
 801186e:	4a1e      	ldr	r2, [pc, #120]	; (80118e8 <_free_r+0x94>)
 8011870:	9801      	ldr	r0, [sp, #4]
 8011872:	6813      	ldr	r3, [r2, #0]
 8011874:	b933      	cbnz	r3, 8011884 <_free_r+0x30>
 8011876:	6063      	str	r3, [r4, #4]
 8011878:	6014      	str	r4, [r2, #0]
 801187a:	b003      	add	sp, #12
 801187c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011880:	f000 b8e2 	b.w	8011a48 <__malloc_unlock>
 8011884:	42a3      	cmp	r3, r4
 8011886:	d908      	bls.n	801189a <_free_r+0x46>
 8011888:	6825      	ldr	r5, [r4, #0]
 801188a:	1961      	adds	r1, r4, r5
 801188c:	428b      	cmp	r3, r1
 801188e:	bf01      	itttt	eq
 8011890:	6819      	ldreq	r1, [r3, #0]
 8011892:	685b      	ldreq	r3, [r3, #4]
 8011894:	1949      	addeq	r1, r1, r5
 8011896:	6021      	streq	r1, [r4, #0]
 8011898:	e7ed      	b.n	8011876 <_free_r+0x22>
 801189a:	461a      	mov	r2, r3
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	b10b      	cbz	r3, 80118a4 <_free_r+0x50>
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d9fa      	bls.n	801189a <_free_r+0x46>
 80118a4:	6811      	ldr	r1, [r2, #0]
 80118a6:	1855      	adds	r5, r2, r1
 80118a8:	42a5      	cmp	r5, r4
 80118aa:	d10b      	bne.n	80118c4 <_free_r+0x70>
 80118ac:	6824      	ldr	r4, [r4, #0]
 80118ae:	4421      	add	r1, r4
 80118b0:	1854      	adds	r4, r2, r1
 80118b2:	42a3      	cmp	r3, r4
 80118b4:	6011      	str	r1, [r2, #0]
 80118b6:	d1e0      	bne.n	801187a <_free_r+0x26>
 80118b8:	681c      	ldr	r4, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	6053      	str	r3, [r2, #4]
 80118be:	440c      	add	r4, r1
 80118c0:	6014      	str	r4, [r2, #0]
 80118c2:	e7da      	b.n	801187a <_free_r+0x26>
 80118c4:	d902      	bls.n	80118cc <_free_r+0x78>
 80118c6:	230c      	movs	r3, #12
 80118c8:	6003      	str	r3, [r0, #0]
 80118ca:	e7d6      	b.n	801187a <_free_r+0x26>
 80118cc:	6825      	ldr	r5, [r4, #0]
 80118ce:	1961      	adds	r1, r4, r5
 80118d0:	428b      	cmp	r3, r1
 80118d2:	bf04      	itt	eq
 80118d4:	6819      	ldreq	r1, [r3, #0]
 80118d6:	685b      	ldreq	r3, [r3, #4]
 80118d8:	6063      	str	r3, [r4, #4]
 80118da:	bf04      	itt	eq
 80118dc:	1949      	addeq	r1, r1, r5
 80118de:	6021      	streq	r1, [r4, #0]
 80118e0:	6054      	str	r4, [r2, #4]
 80118e2:	e7ca      	b.n	801187a <_free_r+0x26>
 80118e4:	b003      	add	sp, #12
 80118e6:	bd30      	pop	{r4, r5, pc}
 80118e8:	20002614 	.word	0x20002614

080118ec <malloc>:
 80118ec:	4b02      	ldr	r3, [pc, #8]	; (80118f8 <malloc+0xc>)
 80118ee:	4601      	mov	r1, r0
 80118f0:	6818      	ldr	r0, [r3, #0]
 80118f2:	f000 b823 	b.w	801193c <_malloc_r>
 80118f6:	bf00      	nop
 80118f8:	20000304 	.word	0x20000304

080118fc <sbrk_aligned>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	4e0e      	ldr	r6, [pc, #56]	; (8011938 <sbrk_aligned+0x3c>)
 8011900:	460c      	mov	r4, r1
 8011902:	6831      	ldr	r1, [r6, #0]
 8011904:	4605      	mov	r5, r0
 8011906:	b911      	cbnz	r1, 801190e <sbrk_aligned+0x12>
 8011908:	f000 fcce 	bl	80122a8 <_sbrk_r>
 801190c:	6030      	str	r0, [r6, #0]
 801190e:	4621      	mov	r1, r4
 8011910:	4628      	mov	r0, r5
 8011912:	f000 fcc9 	bl	80122a8 <_sbrk_r>
 8011916:	1c43      	adds	r3, r0, #1
 8011918:	d00a      	beq.n	8011930 <sbrk_aligned+0x34>
 801191a:	1cc4      	adds	r4, r0, #3
 801191c:	f024 0403 	bic.w	r4, r4, #3
 8011920:	42a0      	cmp	r0, r4
 8011922:	d007      	beq.n	8011934 <sbrk_aligned+0x38>
 8011924:	1a21      	subs	r1, r4, r0
 8011926:	4628      	mov	r0, r5
 8011928:	f000 fcbe 	bl	80122a8 <_sbrk_r>
 801192c:	3001      	adds	r0, #1
 801192e:	d101      	bne.n	8011934 <sbrk_aligned+0x38>
 8011930:	f04f 34ff 	mov.w	r4, #4294967295
 8011934:	4620      	mov	r0, r4
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	20002618 	.word	0x20002618

0801193c <_malloc_r>:
 801193c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011940:	1ccd      	adds	r5, r1, #3
 8011942:	f025 0503 	bic.w	r5, r5, #3
 8011946:	3508      	adds	r5, #8
 8011948:	2d0c      	cmp	r5, #12
 801194a:	bf38      	it	cc
 801194c:	250c      	movcc	r5, #12
 801194e:	2d00      	cmp	r5, #0
 8011950:	4607      	mov	r7, r0
 8011952:	db01      	blt.n	8011958 <_malloc_r+0x1c>
 8011954:	42a9      	cmp	r1, r5
 8011956:	d905      	bls.n	8011964 <_malloc_r+0x28>
 8011958:	230c      	movs	r3, #12
 801195a:	603b      	str	r3, [r7, #0]
 801195c:	2600      	movs	r6, #0
 801195e:	4630      	mov	r0, r6
 8011960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011a38 <_malloc_r+0xfc>
 8011968:	f000 f868 	bl	8011a3c <__malloc_lock>
 801196c:	f8d8 3000 	ldr.w	r3, [r8]
 8011970:	461c      	mov	r4, r3
 8011972:	bb5c      	cbnz	r4, 80119cc <_malloc_r+0x90>
 8011974:	4629      	mov	r1, r5
 8011976:	4638      	mov	r0, r7
 8011978:	f7ff ffc0 	bl	80118fc <sbrk_aligned>
 801197c:	1c43      	adds	r3, r0, #1
 801197e:	4604      	mov	r4, r0
 8011980:	d155      	bne.n	8011a2e <_malloc_r+0xf2>
 8011982:	f8d8 4000 	ldr.w	r4, [r8]
 8011986:	4626      	mov	r6, r4
 8011988:	2e00      	cmp	r6, #0
 801198a:	d145      	bne.n	8011a18 <_malloc_r+0xdc>
 801198c:	2c00      	cmp	r4, #0
 801198e:	d048      	beq.n	8011a22 <_malloc_r+0xe6>
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	4631      	mov	r1, r6
 8011994:	4638      	mov	r0, r7
 8011996:	eb04 0903 	add.w	r9, r4, r3
 801199a:	f000 fc85 	bl	80122a8 <_sbrk_r>
 801199e:	4581      	cmp	r9, r0
 80119a0:	d13f      	bne.n	8011a22 <_malloc_r+0xe6>
 80119a2:	6821      	ldr	r1, [r4, #0]
 80119a4:	1a6d      	subs	r5, r5, r1
 80119a6:	4629      	mov	r1, r5
 80119a8:	4638      	mov	r0, r7
 80119aa:	f7ff ffa7 	bl	80118fc <sbrk_aligned>
 80119ae:	3001      	adds	r0, #1
 80119b0:	d037      	beq.n	8011a22 <_malloc_r+0xe6>
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	442b      	add	r3, r5
 80119b6:	6023      	str	r3, [r4, #0]
 80119b8:	f8d8 3000 	ldr.w	r3, [r8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d038      	beq.n	8011a32 <_malloc_r+0xf6>
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	42a2      	cmp	r2, r4
 80119c4:	d12b      	bne.n	8011a1e <_malloc_r+0xe2>
 80119c6:	2200      	movs	r2, #0
 80119c8:	605a      	str	r2, [r3, #4]
 80119ca:	e00f      	b.n	80119ec <_malloc_r+0xb0>
 80119cc:	6822      	ldr	r2, [r4, #0]
 80119ce:	1b52      	subs	r2, r2, r5
 80119d0:	d41f      	bmi.n	8011a12 <_malloc_r+0xd6>
 80119d2:	2a0b      	cmp	r2, #11
 80119d4:	d917      	bls.n	8011a06 <_malloc_r+0xca>
 80119d6:	1961      	adds	r1, r4, r5
 80119d8:	42a3      	cmp	r3, r4
 80119da:	6025      	str	r5, [r4, #0]
 80119dc:	bf18      	it	ne
 80119de:	6059      	strne	r1, [r3, #4]
 80119e0:	6863      	ldr	r3, [r4, #4]
 80119e2:	bf08      	it	eq
 80119e4:	f8c8 1000 	streq.w	r1, [r8]
 80119e8:	5162      	str	r2, [r4, r5]
 80119ea:	604b      	str	r3, [r1, #4]
 80119ec:	4638      	mov	r0, r7
 80119ee:	f104 060b 	add.w	r6, r4, #11
 80119f2:	f000 f829 	bl	8011a48 <__malloc_unlock>
 80119f6:	f026 0607 	bic.w	r6, r6, #7
 80119fa:	1d23      	adds	r3, r4, #4
 80119fc:	1af2      	subs	r2, r6, r3
 80119fe:	d0ae      	beq.n	801195e <_malloc_r+0x22>
 8011a00:	1b9b      	subs	r3, r3, r6
 8011a02:	50a3      	str	r3, [r4, r2]
 8011a04:	e7ab      	b.n	801195e <_malloc_r+0x22>
 8011a06:	42a3      	cmp	r3, r4
 8011a08:	6862      	ldr	r2, [r4, #4]
 8011a0a:	d1dd      	bne.n	80119c8 <_malloc_r+0x8c>
 8011a0c:	f8c8 2000 	str.w	r2, [r8]
 8011a10:	e7ec      	b.n	80119ec <_malloc_r+0xb0>
 8011a12:	4623      	mov	r3, r4
 8011a14:	6864      	ldr	r4, [r4, #4]
 8011a16:	e7ac      	b.n	8011972 <_malloc_r+0x36>
 8011a18:	4634      	mov	r4, r6
 8011a1a:	6876      	ldr	r6, [r6, #4]
 8011a1c:	e7b4      	b.n	8011988 <_malloc_r+0x4c>
 8011a1e:	4613      	mov	r3, r2
 8011a20:	e7cc      	b.n	80119bc <_malloc_r+0x80>
 8011a22:	230c      	movs	r3, #12
 8011a24:	603b      	str	r3, [r7, #0]
 8011a26:	4638      	mov	r0, r7
 8011a28:	f000 f80e 	bl	8011a48 <__malloc_unlock>
 8011a2c:	e797      	b.n	801195e <_malloc_r+0x22>
 8011a2e:	6025      	str	r5, [r4, #0]
 8011a30:	e7dc      	b.n	80119ec <_malloc_r+0xb0>
 8011a32:	605b      	str	r3, [r3, #4]
 8011a34:	deff      	udf	#255	; 0xff
 8011a36:	bf00      	nop
 8011a38:	20002614 	.word	0x20002614

08011a3c <__malloc_lock>:
 8011a3c:	4801      	ldr	r0, [pc, #4]	; (8011a44 <__malloc_lock+0x8>)
 8011a3e:	f7ff b87d 	b.w	8010b3c <__retarget_lock_acquire_recursive>
 8011a42:	bf00      	nop
 8011a44:	20002610 	.word	0x20002610

08011a48 <__malloc_unlock>:
 8011a48:	4801      	ldr	r0, [pc, #4]	; (8011a50 <__malloc_unlock+0x8>)
 8011a4a:	f7ff b878 	b.w	8010b3e <__retarget_lock_release_recursive>
 8011a4e:	bf00      	nop
 8011a50:	20002610 	.word	0x20002610

08011a54 <_Balloc>:
 8011a54:	b570      	push	{r4, r5, r6, lr}
 8011a56:	69c6      	ldr	r6, [r0, #28]
 8011a58:	4604      	mov	r4, r0
 8011a5a:	460d      	mov	r5, r1
 8011a5c:	b976      	cbnz	r6, 8011a7c <_Balloc+0x28>
 8011a5e:	2010      	movs	r0, #16
 8011a60:	f7ff ff44 	bl	80118ec <malloc>
 8011a64:	4602      	mov	r2, r0
 8011a66:	61e0      	str	r0, [r4, #28]
 8011a68:	b920      	cbnz	r0, 8011a74 <_Balloc+0x20>
 8011a6a:	4b18      	ldr	r3, [pc, #96]	; (8011acc <_Balloc+0x78>)
 8011a6c:	4818      	ldr	r0, [pc, #96]	; (8011ad0 <_Balloc+0x7c>)
 8011a6e:	216b      	movs	r1, #107	; 0x6b
 8011a70:	f000 fc2a 	bl	80122c8 <__assert_func>
 8011a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a78:	6006      	str	r6, [r0, #0]
 8011a7a:	60c6      	str	r6, [r0, #12]
 8011a7c:	69e6      	ldr	r6, [r4, #28]
 8011a7e:	68f3      	ldr	r3, [r6, #12]
 8011a80:	b183      	cbz	r3, 8011aa4 <_Balloc+0x50>
 8011a82:	69e3      	ldr	r3, [r4, #28]
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a8a:	b9b8      	cbnz	r0, 8011abc <_Balloc+0x68>
 8011a8c:	2101      	movs	r1, #1
 8011a8e:	fa01 f605 	lsl.w	r6, r1, r5
 8011a92:	1d72      	adds	r2, r6, #5
 8011a94:	0092      	lsls	r2, r2, #2
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 fc34 	bl	8012304 <_calloc_r>
 8011a9c:	b160      	cbz	r0, 8011ab8 <_Balloc+0x64>
 8011a9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011aa2:	e00e      	b.n	8011ac2 <_Balloc+0x6e>
 8011aa4:	2221      	movs	r2, #33	; 0x21
 8011aa6:	2104      	movs	r1, #4
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f000 fc2b 	bl	8012304 <_calloc_r>
 8011aae:	69e3      	ldr	r3, [r4, #28]
 8011ab0:	60f0      	str	r0, [r6, #12]
 8011ab2:	68db      	ldr	r3, [r3, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1e4      	bne.n	8011a82 <_Balloc+0x2e>
 8011ab8:	2000      	movs	r0, #0
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	6802      	ldr	r2, [r0, #0]
 8011abe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ac8:	e7f7      	b.n	8011aba <_Balloc+0x66>
 8011aca:	bf00      	nop
 8011acc:	080130b5 	.word	0x080130b5
 8011ad0:	08013135 	.word	0x08013135

08011ad4 <_Bfree>:
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	69c6      	ldr	r6, [r0, #28]
 8011ad8:	4605      	mov	r5, r0
 8011ada:	460c      	mov	r4, r1
 8011adc:	b976      	cbnz	r6, 8011afc <_Bfree+0x28>
 8011ade:	2010      	movs	r0, #16
 8011ae0:	f7ff ff04 	bl	80118ec <malloc>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	61e8      	str	r0, [r5, #28]
 8011ae8:	b920      	cbnz	r0, 8011af4 <_Bfree+0x20>
 8011aea:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <_Bfree+0x3c>)
 8011aec:	4809      	ldr	r0, [pc, #36]	; (8011b14 <_Bfree+0x40>)
 8011aee:	218f      	movs	r1, #143	; 0x8f
 8011af0:	f000 fbea 	bl	80122c8 <__assert_func>
 8011af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011af8:	6006      	str	r6, [r0, #0]
 8011afa:	60c6      	str	r6, [r0, #12]
 8011afc:	b13c      	cbz	r4, 8011b0e <_Bfree+0x3a>
 8011afe:	69eb      	ldr	r3, [r5, #28]
 8011b00:	6862      	ldr	r2, [r4, #4]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b08:	6021      	str	r1, [r4, #0]
 8011b0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}
 8011b10:	080130b5 	.word	0x080130b5
 8011b14:	08013135 	.word	0x08013135

08011b18 <__multadd>:
 8011b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b1c:	690d      	ldr	r5, [r1, #16]
 8011b1e:	4607      	mov	r7, r0
 8011b20:	460c      	mov	r4, r1
 8011b22:	461e      	mov	r6, r3
 8011b24:	f101 0c14 	add.w	ip, r1, #20
 8011b28:	2000      	movs	r0, #0
 8011b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8011b2e:	b299      	uxth	r1, r3
 8011b30:	fb02 6101 	mla	r1, r2, r1, r6
 8011b34:	0c1e      	lsrs	r6, r3, #16
 8011b36:	0c0b      	lsrs	r3, r1, #16
 8011b38:	fb02 3306 	mla	r3, r2, r6, r3
 8011b3c:	b289      	uxth	r1, r1
 8011b3e:	3001      	adds	r0, #1
 8011b40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b44:	4285      	cmp	r5, r0
 8011b46:	f84c 1b04 	str.w	r1, [ip], #4
 8011b4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b4e:	dcec      	bgt.n	8011b2a <__multadd+0x12>
 8011b50:	b30e      	cbz	r6, 8011b96 <__multadd+0x7e>
 8011b52:	68a3      	ldr	r3, [r4, #8]
 8011b54:	42ab      	cmp	r3, r5
 8011b56:	dc19      	bgt.n	8011b8c <__multadd+0x74>
 8011b58:	6861      	ldr	r1, [r4, #4]
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	3101      	adds	r1, #1
 8011b5e:	f7ff ff79 	bl	8011a54 <_Balloc>
 8011b62:	4680      	mov	r8, r0
 8011b64:	b928      	cbnz	r0, 8011b72 <__multadd+0x5a>
 8011b66:	4602      	mov	r2, r0
 8011b68:	4b0c      	ldr	r3, [pc, #48]	; (8011b9c <__multadd+0x84>)
 8011b6a:	480d      	ldr	r0, [pc, #52]	; (8011ba0 <__multadd+0x88>)
 8011b6c:	21ba      	movs	r1, #186	; 0xba
 8011b6e:	f000 fbab 	bl	80122c8 <__assert_func>
 8011b72:	6922      	ldr	r2, [r4, #16]
 8011b74:	3202      	adds	r2, #2
 8011b76:	f104 010c 	add.w	r1, r4, #12
 8011b7a:	0092      	lsls	r2, r2, #2
 8011b7c:	300c      	adds	r0, #12
 8011b7e:	f7fe ffdf 	bl	8010b40 <memcpy>
 8011b82:	4621      	mov	r1, r4
 8011b84:	4638      	mov	r0, r7
 8011b86:	f7ff ffa5 	bl	8011ad4 <_Bfree>
 8011b8a:	4644      	mov	r4, r8
 8011b8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b90:	3501      	adds	r5, #1
 8011b92:	615e      	str	r6, [r3, #20]
 8011b94:	6125      	str	r5, [r4, #16]
 8011b96:	4620      	mov	r0, r4
 8011b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b9c:	08013124 	.word	0x08013124
 8011ba0:	08013135 	.word	0x08013135

08011ba4 <__hi0bits>:
 8011ba4:	0c03      	lsrs	r3, r0, #16
 8011ba6:	041b      	lsls	r3, r3, #16
 8011ba8:	b9d3      	cbnz	r3, 8011be0 <__hi0bits+0x3c>
 8011baa:	0400      	lsls	r0, r0, #16
 8011bac:	2310      	movs	r3, #16
 8011bae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011bb2:	bf04      	itt	eq
 8011bb4:	0200      	lsleq	r0, r0, #8
 8011bb6:	3308      	addeq	r3, #8
 8011bb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011bbc:	bf04      	itt	eq
 8011bbe:	0100      	lsleq	r0, r0, #4
 8011bc0:	3304      	addeq	r3, #4
 8011bc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011bc6:	bf04      	itt	eq
 8011bc8:	0080      	lsleq	r0, r0, #2
 8011bca:	3302      	addeq	r3, #2
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	db05      	blt.n	8011bdc <__hi0bits+0x38>
 8011bd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011bd4:	f103 0301 	add.w	r3, r3, #1
 8011bd8:	bf08      	it	eq
 8011bda:	2320      	moveq	r3, #32
 8011bdc:	4618      	mov	r0, r3
 8011bde:	4770      	bx	lr
 8011be0:	2300      	movs	r3, #0
 8011be2:	e7e4      	b.n	8011bae <__hi0bits+0xa>

08011be4 <__lo0bits>:
 8011be4:	6803      	ldr	r3, [r0, #0]
 8011be6:	f013 0207 	ands.w	r2, r3, #7
 8011bea:	d00c      	beq.n	8011c06 <__lo0bits+0x22>
 8011bec:	07d9      	lsls	r1, r3, #31
 8011bee:	d422      	bmi.n	8011c36 <__lo0bits+0x52>
 8011bf0:	079a      	lsls	r2, r3, #30
 8011bf2:	bf49      	itett	mi
 8011bf4:	085b      	lsrmi	r3, r3, #1
 8011bf6:	089b      	lsrpl	r3, r3, #2
 8011bf8:	6003      	strmi	r3, [r0, #0]
 8011bfa:	2201      	movmi	r2, #1
 8011bfc:	bf5c      	itt	pl
 8011bfe:	6003      	strpl	r3, [r0, #0]
 8011c00:	2202      	movpl	r2, #2
 8011c02:	4610      	mov	r0, r2
 8011c04:	4770      	bx	lr
 8011c06:	b299      	uxth	r1, r3
 8011c08:	b909      	cbnz	r1, 8011c0e <__lo0bits+0x2a>
 8011c0a:	0c1b      	lsrs	r3, r3, #16
 8011c0c:	2210      	movs	r2, #16
 8011c0e:	b2d9      	uxtb	r1, r3
 8011c10:	b909      	cbnz	r1, 8011c16 <__lo0bits+0x32>
 8011c12:	3208      	adds	r2, #8
 8011c14:	0a1b      	lsrs	r3, r3, #8
 8011c16:	0719      	lsls	r1, r3, #28
 8011c18:	bf04      	itt	eq
 8011c1a:	091b      	lsreq	r3, r3, #4
 8011c1c:	3204      	addeq	r2, #4
 8011c1e:	0799      	lsls	r1, r3, #30
 8011c20:	bf04      	itt	eq
 8011c22:	089b      	lsreq	r3, r3, #2
 8011c24:	3202      	addeq	r2, #2
 8011c26:	07d9      	lsls	r1, r3, #31
 8011c28:	d403      	bmi.n	8011c32 <__lo0bits+0x4e>
 8011c2a:	085b      	lsrs	r3, r3, #1
 8011c2c:	f102 0201 	add.w	r2, r2, #1
 8011c30:	d003      	beq.n	8011c3a <__lo0bits+0x56>
 8011c32:	6003      	str	r3, [r0, #0]
 8011c34:	e7e5      	b.n	8011c02 <__lo0bits+0x1e>
 8011c36:	2200      	movs	r2, #0
 8011c38:	e7e3      	b.n	8011c02 <__lo0bits+0x1e>
 8011c3a:	2220      	movs	r2, #32
 8011c3c:	e7e1      	b.n	8011c02 <__lo0bits+0x1e>
	...

08011c40 <__i2b>:
 8011c40:	b510      	push	{r4, lr}
 8011c42:	460c      	mov	r4, r1
 8011c44:	2101      	movs	r1, #1
 8011c46:	f7ff ff05 	bl	8011a54 <_Balloc>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	b928      	cbnz	r0, 8011c5a <__i2b+0x1a>
 8011c4e:	4b05      	ldr	r3, [pc, #20]	; (8011c64 <__i2b+0x24>)
 8011c50:	4805      	ldr	r0, [pc, #20]	; (8011c68 <__i2b+0x28>)
 8011c52:	f240 1145 	movw	r1, #325	; 0x145
 8011c56:	f000 fb37 	bl	80122c8 <__assert_func>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	6144      	str	r4, [r0, #20]
 8011c5e:	6103      	str	r3, [r0, #16]
 8011c60:	bd10      	pop	{r4, pc}
 8011c62:	bf00      	nop
 8011c64:	08013124 	.word	0x08013124
 8011c68:	08013135 	.word	0x08013135

08011c6c <__multiply>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	4691      	mov	r9, r2
 8011c72:	690a      	ldr	r2, [r1, #16]
 8011c74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	bfb8      	it	lt
 8011c7c:	460b      	movlt	r3, r1
 8011c7e:	460c      	mov	r4, r1
 8011c80:	bfbc      	itt	lt
 8011c82:	464c      	movlt	r4, r9
 8011c84:	4699      	movlt	r9, r3
 8011c86:	6927      	ldr	r7, [r4, #16]
 8011c88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c8c:	68a3      	ldr	r3, [r4, #8]
 8011c8e:	6861      	ldr	r1, [r4, #4]
 8011c90:	eb07 060a 	add.w	r6, r7, sl
 8011c94:	42b3      	cmp	r3, r6
 8011c96:	b085      	sub	sp, #20
 8011c98:	bfb8      	it	lt
 8011c9a:	3101      	addlt	r1, #1
 8011c9c:	f7ff feda 	bl	8011a54 <_Balloc>
 8011ca0:	b930      	cbnz	r0, 8011cb0 <__multiply+0x44>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	4b44      	ldr	r3, [pc, #272]	; (8011db8 <__multiply+0x14c>)
 8011ca6:	4845      	ldr	r0, [pc, #276]	; (8011dbc <__multiply+0x150>)
 8011ca8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011cac:	f000 fb0c 	bl	80122c8 <__assert_func>
 8011cb0:	f100 0514 	add.w	r5, r0, #20
 8011cb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011cb8:	462b      	mov	r3, r5
 8011cba:	2200      	movs	r2, #0
 8011cbc:	4543      	cmp	r3, r8
 8011cbe:	d321      	bcc.n	8011d04 <__multiply+0x98>
 8011cc0:	f104 0314 	add.w	r3, r4, #20
 8011cc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011cc8:	f109 0314 	add.w	r3, r9, #20
 8011ccc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011cd0:	9202      	str	r2, [sp, #8]
 8011cd2:	1b3a      	subs	r2, r7, r4
 8011cd4:	3a15      	subs	r2, #21
 8011cd6:	f022 0203 	bic.w	r2, r2, #3
 8011cda:	3204      	adds	r2, #4
 8011cdc:	f104 0115 	add.w	r1, r4, #21
 8011ce0:	428f      	cmp	r7, r1
 8011ce2:	bf38      	it	cc
 8011ce4:	2204      	movcc	r2, #4
 8011ce6:	9201      	str	r2, [sp, #4]
 8011ce8:	9a02      	ldr	r2, [sp, #8]
 8011cea:	9303      	str	r3, [sp, #12]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d80c      	bhi.n	8011d0a <__multiply+0x9e>
 8011cf0:	2e00      	cmp	r6, #0
 8011cf2:	dd03      	ble.n	8011cfc <__multiply+0x90>
 8011cf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d05b      	beq.n	8011db4 <__multiply+0x148>
 8011cfc:	6106      	str	r6, [r0, #16]
 8011cfe:	b005      	add	sp, #20
 8011d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d04:	f843 2b04 	str.w	r2, [r3], #4
 8011d08:	e7d8      	b.n	8011cbc <__multiply+0x50>
 8011d0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011d0e:	f1ba 0f00 	cmp.w	sl, #0
 8011d12:	d024      	beq.n	8011d5e <__multiply+0xf2>
 8011d14:	f104 0e14 	add.w	lr, r4, #20
 8011d18:	46a9      	mov	r9, r5
 8011d1a:	f04f 0c00 	mov.w	ip, #0
 8011d1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011d22:	f8d9 1000 	ldr.w	r1, [r9]
 8011d26:	fa1f fb82 	uxth.w	fp, r2
 8011d2a:	b289      	uxth	r1, r1
 8011d2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011d30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011d34:	f8d9 2000 	ldr.w	r2, [r9]
 8011d38:	4461      	add	r1, ip
 8011d3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011d42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011d46:	b289      	uxth	r1, r1
 8011d48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011d4c:	4577      	cmp	r7, lr
 8011d4e:	f849 1b04 	str.w	r1, [r9], #4
 8011d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d56:	d8e2      	bhi.n	8011d1e <__multiply+0xb2>
 8011d58:	9a01      	ldr	r2, [sp, #4]
 8011d5a:	f845 c002 	str.w	ip, [r5, r2]
 8011d5e:	9a03      	ldr	r2, [sp, #12]
 8011d60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011d64:	3304      	adds	r3, #4
 8011d66:	f1b9 0f00 	cmp.w	r9, #0
 8011d6a:	d021      	beq.n	8011db0 <__multiply+0x144>
 8011d6c:	6829      	ldr	r1, [r5, #0]
 8011d6e:	f104 0c14 	add.w	ip, r4, #20
 8011d72:	46ae      	mov	lr, r5
 8011d74:	f04f 0a00 	mov.w	sl, #0
 8011d78:	f8bc b000 	ldrh.w	fp, [ip]
 8011d7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011d80:	fb09 220b 	mla	r2, r9, fp, r2
 8011d84:	4452      	add	r2, sl
 8011d86:	b289      	uxth	r1, r1
 8011d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011d8c:	f84e 1b04 	str.w	r1, [lr], #4
 8011d90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011d94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d98:	f8be 1000 	ldrh.w	r1, [lr]
 8011d9c:	fb09 110a 	mla	r1, r9, sl, r1
 8011da0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011da4:	4567      	cmp	r7, ip
 8011da6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011daa:	d8e5      	bhi.n	8011d78 <__multiply+0x10c>
 8011dac:	9a01      	ldr	r2, [sp, #4]
 8011dae:	50a9      	str	r1, [r5, r2]
 8011db0:	3504      	adds	r5, #4
 8011db2:	e799      	b.n	8011ce8 <__multiply+0x7c>
 8011db4:	3e01      	subs	r6, #1
 8011db6:	e79b      	b.n	8011cf0 <__multiply+0x84>
 8011db8:	08013124 	.word	0x08013124
 8011dbc:	08013135 	.word	0x08013135

08011dc0 <__pow5mult>:
 8011dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dc4:	4615      	mov	r5, r2
 8011dc6:	f012 0203 	ands.w	r2, r2, #3
 8011dca:	4606      	mov	r6, r0
 8011dcc:	460f      	mov	r7, r1
 8011dce:	d007      	beq.n	8011de0 <__pow5mult+0x20>
 8011dd0:	4c25      	ldr	r4, [pc, #148]	; (8011e68 <__pow5mult+0xa8>)
 8011dd2:	3a01      	subs	r2, #1
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011dda:	f7ff fe9d 	bl	8011b18 <__multadd>
 8011dde:	4607      	mov	r7, r0
 8011de0:	10ad      	asrs	r5, r5, #2
 8011de2:	d03d      	beq.n	8011e60 <__pow5mult+0xa0>
 8011de4:	69f4      	ldr	r4, [r6, #28]
 8011de6:	b97c      	cbnz	r4, 8011e08 <__pow5mult+0x48>
 8011de8:	2010      	movs	r0, #16
 8011dea:	f7ff fd7f 	bl	80118ec <malloc>
 8011dee:	4602      	mov	r2, r0
 8011df0:	61f0      	str	r0, [r6, #28]
 8011df2:	b928      	cbnz	r0, 8011e00 <__pow5mult+0x40>
 8011df4:	4b1d      	ldr	r3, [pc, #116]	; (8011e6c <__pow5mult+0xac>)
 8011df6:	481e      	ldr	r0, [pc, #120]	; (8011e70 <__pow5mult+0xb0>)
 8011df8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011dfc:	f000 fa64 	bl	80122c8 <__assert_func>
 8011e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e04:	6004      	str	r4, [r0, #0]
 8011e06:	60c4      	str	r4, [r0, #12]
 8011e08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e10:	b94c      	cbnz	r4, 8011e26 <__pow5mult+0x66>
 8011e12:	f240 2171 	movw	r1, #625	; 0x271
 8011e16:	4630      	mov	r0, r6
 8011e18:	f7ff ff12 	bl	8011c40 <__i2b>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e22:	4604      	mov	r4, r0
 8011e24:	6003      	str	r3, [r0, #0]
 8011e26:	f04f 0900 	mov.w	r9, #0
 8011e2a:	07eb      	lsls	r3, r5, #31
 8011e2c:	d50a      	bpl.n	8011e44 <__pow5mult+0x84>
 8011e2e:	4639      	mov	r1, r7
 8011e30:	4622      	mov	r2, r4
 8011e32:	4630      	mov	r0, r6
 8011e34:	f7ff ff1a 	bl	8011c6c <__multiply>
 8011e38:	4639      	mov	r1, r7
 8011e3a:	4680      	mov	r8, r0
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	f7ff fe49 	bl	8011ad4 <_Bfree>
 8011e42:	4647      	mov	r7, r8
 8011e44:	106d      	asrs	r5, r5, #1
 8011e46:	d00b      	beq.n	8011e60 <__pow5mult+0xa0>
 8011e48:	6820      	ldr	r0, [r4, #0]
 8011e4a:	b938      	cbnz	r0, 8011e5c <__pow5mult+0x9c>
 8011e4c:	4622      	mov	r2, r4
 8011e4e:	4621      	mov	r1, r4
 8011e50:	4630      	mov	r0, r6
 8011e52:	f7ff ff0b 	bl	8011c6c <__multiply>
 8011e56:	6020      	str	r0, [r4, #0]
 8011e58:	f8c0 9000 	str.w	r9, [r0]
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	e7e4      	b.n	8011e2a <__pow5mult+0x6a>
 8011e60:	4638      	mov	r0, r7
 8011e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e66:	bf00      	nop
 8011e68:	08013280 	.word	0x08013280
 8011e6c:	080130b5 	.word	0x080130b5
 8011e70:	08013135 	.word	0x08013135

08011e74 <__lshift>:
 8011e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e78:	460c      	mov	r4, r1
 8011e7a:	6849      	ldr	r1, [r1, #4]
 8011e7c:	6923      	ldr	r3, [r4, #16]
 8011e7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e82:	68a3      	ldr	r3, [r4, #8]
 8011e84:	4607      	mov	r7, r0
 8011e86:	4691      	mov	r9, r2
 8011e88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e8c:	f108 0601 	add.w	r6, r8, #1
 8011e90:	42b3      	cmp	r3, r6
 8011e92:	db0b      	blt.n	8011eac <__lshift+0x38>
 8011e94:	4638      	mov	r0, r7
 8011e96:	f7ff fddd 	bl	8011a54 <_Balloc>
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	b948      	cbnz	r0, 8011eb2 <__lshift+0x3e>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	4b28      	ldr	r3, [pc, #160]	; (8011f44 <__lshift+0xd0>)
 8011ea2:	4829      	ldr	r0, [pc, #164]	; (8011f48 <__lshift+0xd4>)
 8011ea4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011ea8:	f000 fa0e 	bl	80122c8 <__assert_func>
 8011eac:	3101      	adds	r1, #1
 8011eae:	005b      	lsls	r3, r3, #1
 8011eb0:	e7ee      	b.n	8011e90 <__lshift+0x1c>
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f100 0114 	add.w	r1, r0, #20
 8011eb8:	f100 0210 	add.w	r2, r0, #16
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	4553      	cmp	r3, sl
 8011ec0:	db33      	blt.n	8011f2a <__lshift+0xb6>
 8011ec2:	6920      	ldr	r0, [r4, #16]
 8011ec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ec8:	f104 0314 	add.w	r3, r4, #20
 8011ecc:	f019 091f 	ands.w	r9, r9, #31
 8011ed0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ed4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ed8:	d02b      	beq.n	8011f32 <__lshift+0xbe>
 8011eda:	f1c9 0e20 	rsb	lr, r9, #32
 8011ede:	468a      	mov	sl, r1
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	6818      	ldr	r0, [r3, #0]
 8011ee4:	fa00 f009 	lsl.w	r0, r0, r9
 8011ee8:	4310      	orrs	r0, r2
 8011eea:	f84a 0b04 	str.w	r0, [sl], #4
 8011eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ef2:	459c      	cmp	ip, r3
 8011ef4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ef8:	d8f3      	bhi.n	8011ee2 <__lshift+0x6e>
 8011efa:	ebac 0304 	sub.w	r3, ip, r4
 8011efe:	3b15      	subs	r3, #21
 8011f00:	f023 0303 	bic.w	r3, r3, #3
 8011f04:	3304      	adds	r3, #4
 8011f06:	f104 0015 	add.w	r0, r4, #21
 8011f0a:	4584      	cmp	ip, r0
 8011f0c:	bf38      	it	cc
 8011f0e:	2304      	movcc	r3, #4
 8011f10:	50ca      	str	r2, [r1, r3]
 8011f12:	b10a      	cbz	r2, 8011f18 <__lshift+0xa4>
 8011f14:	f108 0602 	add.w	r6, r8, #2
 8011f18:	3e01      	subs	r6, #1
 8011f1a:	4638      	mov	r0, r7
 8011f1c:	612e      	str	r6, [r5, #16]
 8011f1e:	4621      	mov	r1, r4
 8011f20:	f7ff fdd8 	bl	8011ad4 <_Bfree>
 8011f24:	4628      	mov	r0, r5
 8011f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f2e:	3301      	adds	r3, #1
 8011f30:	e7c5      	b.n	8011ebe <__lshift+0x4a>
 8011f32:	3904      	subs	r1, #4
 8011f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f38:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f3c:	459c      	cmp	ip, r3
 8011f3e:	d8f9      	bhi.n	8011f34 <__lshift+0xc0>
 8011f40:	e7ea      	b.n	8011f18 <__lshift+0xa4>
 8011f42:	bf00      	nop
 8011f44:	08013124 	.word	0x08013124
 8011f48:	08013135 	.word	0x08013135

08011f4c <__mcmp>:
 8011f4c:	b530      	push	{r4, r5, lr}
 8011f4e:	6902      	ldr	r2, [r0, #16]
 8011f50:	690c      	ldr	r4, [r1, #16]
 8011f52:	1b12      	subs	r2, r2, r4
 8011f54:	d10e      	bne.n	8011f74 <__mcmp+0x28>
 8011f56:	f100 0314 	add.w	r3, r0, #20
 8011f5a:	3114      	adds	r1, #20
 8011f5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011f60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011f64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011f68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011f6c:	42a5      	cmp	r5, r4
 8011f6e:	d003      	beq.n	8011f78 <__mcmp+0x2c>
 8011f70:	d305      	bcc.n	8011f7e <__mcmp+0x32>
 8011f72:	2201      	movs	r2, #1
 8011f74:	4610      	mov	r0, r2
 8011f76:	bd30      	pop	{r4, r5, pc}
 8011f78:	4283      	cmp	r3, r0
 8011f7a:	d3f3      	bcc.n	8011f64 <__mcmp+0x18>
 8011f7c:	e7fa      	b.n	8011f74 <__mcmp+0x28>
 8011f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f82:	e7f7      	b.n	8011f74 <__mcmp+0x28>

08011f84 <__mdiff>:
 8011f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f88:	460c      	mov	r4, r1
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	4611      	mov	r1, r2
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4690      	mov	r8, r2
 8011f92:	f7ff ffdb 	bl	8011f4c <__mcmp>
 8011f96:	1e05      	subs	r5, r0, #0
 8011f98:	d110      	bne.n	8011fbc <__mdiff+0x38>
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f7ff fd59 	bl	8011a54 <_Balloc>
 8011fa2:	b930      	cbnz	r0, 8011fb2 <__mdiff+0x2e>
 8011fa4:	4b3a      	ldr	r3, [pc, #232]	; (8012090 <__mdiff+0x10c>)
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	f240 2137 	movw	r1, #567	; 0x237
 8011fac:	4839      	ldr	r0, [pc, #228]	; (8012094 <__mdiff+0x110>)
 8011fae:	f000 f98b 	bl	80122c8 <__assert_func>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fbc:	bfa4      	itt	ge
 8011fbe:	4643      	movge	r3, r8
 8011fc0:	46a0      	movge	r8, r4
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011fc8:	bfa6      	itte	ge
 8011fca:	461c      	movge	r4, r3
 8011fcc:	2500      	movge	r5, #0
 8011fce:	2501      	movlt	r5, #1
 8011fd0:	f7ff fd40 	bl	8011a54 <_Balloc>
 8011fd4:	b920      	cbnz	r0, 8011fe0 <__mdiff+0x5c>
 8011fd6:	4b2e      	ldr	r3, [pc, #184]	; (8012090 <__mdiff+0x10c>)
 8011fd8:	4602      	mov	r2, r0
 8011fda:	f240 2145 	movw	r1, #581	; 0x245
 8011fde:	e7e5      	b.n	8011fac <__mdiff+0x28>
 8011fe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011fe4:	6926      	ldr	r6, [r4, #16]
 8011fe6:	60c5      	str	r5, [r0, #12]
 8011fe8:	f104 0914 	add.w	r9, r4, #20
 8011fec:	f108 0514 	add.w	r5, r8, #20
 8011ff0:	f100 0e14 	add.w	lr, r0, #20
 8011ff4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ffc:	f108 0210 	add.w	r2, r8, #16
 8012000:	46f2      	mov	sl, lr
 8012002:	2100      	movs	r1, #0
 8012004:	f859 3b04 	ldr.w	r3, [r9], #4
 8012008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801200c:	fa11 f88b 	uxtah	r8, r1, fp
 8012010:	b299      	uxth	r1, r3
 8012012:	0c1b      	lsrs	r3, r3, #16
 8012014:	eba8 0801 	sub.w	r8, r8, r1
 8012018:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801201c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012020:	fa1f f888 	uxth.w	r8, r8
 8012024:	1419      	asrs	r1, r3, #16
 8012026:	454e      	cmp	r6, r9
 8012028:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801202c:	f84a 3b04 	str.w	r3, [sl], #4
 8012030:	d8e8      	bhi.n	8012004 <__mdiff+0x80>
 8012032:	1b33      	subs	r3, r6, r4
 8012034:	3b15      	subs	r3, #21
 8012036:	f023 0303 	bic.w	r3, r3, #3
 801203a:	3304      	adds	r3, #4
 801203c:	3415      	adds	r4, #21
 801203e:	42a6      	cmp	r6, r4
 8012040:	bf38      	it	cc
 8012042:	2304      	movcc	r3, #4
 8012044:	441d      	add	r5, r3
 8012046:	4473      	add	r3, lr
 8012048:	469e      	mov	lr, r3
 801204a:	462e      	mov	r6, r5
 801204c:	4566      	cmp	r6, ip
 801204e:	d30e      	bcc.n	801206e <__mdiff+0xea>
 8012050:	f10c 0203 	add.w	r2, ip, #3
 8012054:	1b52      	subs	r2, r2, r5
 8012056:	f022 0203 	bic.w	r2, r2, #3
 801205a:	3d03      	subs	r5, #3
 801205c:	45ac      	cmp	ip, r5
 801205e:	bf38      	it	cc
 8012060:	2200      	movcc	r2, #0
 8012062:	4413      	add	r3, r2
 8012064:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012068:	b17a      	cbz	r2, 801208a <__mdiff+0x106>
 801206a:	6107      	str	r7, [r0, #16]
 801206c:	e7a4      	b.n	8011fb8 <__mdiff+0x34>
 801206e:	f856 8b04 	ldr.w	r8, [r6], #4
 8012072:	fa11 f288 	uxtah	r2, r1, r8
 8012076:	1414      	asrs	r4, r2, #16
 8012078:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801207c:	b292      	uxth	r2, r2
 801207e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012082:	f84e 2b04 	str.w	r2, [lr], #4
 8012086:	1421      	asrs	r1, r4, #16
 8012088:	e7e0      	b.n	801204c <__mdiff+0xc8>
 801208a:	3f01      	subs	r7, #1
 801208c:	e7ea      	b.n	8012064 <__mdiff+0xe0>
 801208e:	bf00      	nop
 8012090:	08013124 	.word	0x08013124
 8012094:	08013135 	.word	0x08013135

08012098 <__d2b>:
 8012098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801209c:	460f      	mov	r7, r1
 801209e:	2101      	movs	r1, #1
 80120a0:	ec59 8b10 	vmov	r8, r9, d0
 80120a4:	4616      	mov	r6, r2
 80120a6:	f7ff fcd5 	bl	8011a54 <_Balloc>
 80120aa:	4604      	mov	r4, r0
 80120ac:	b930      	cbnz	r0, 80120bc <__d2b+0x24>
 80120ae:	4602      	mov	r2, r0
 80120b0:	4b24      	ldr	r3, [pc, #144]	; (8012144 <__d2b+0xac>)
 80120b2:	4825      	ldr	r0, [pc, #148]	; (8012148 <__d2b+0xb0>)
 80120b4:	f240 310f 	movw	r1, #783	; 0x30f
 80120b8:	f000 f906 	bl	80122c8 <__assert_func>
 80120bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120c4:	bb2d      	cbnz	r5, 8012112 <__d2b+0x7a>
 80120c6:	9301      	str	r3, [sp, #4]
 80120c8:	f1b8 0300 	subs.w	r3, r8, #0
 80120cc:	d026      	beq.n	801211c <__d2b+0x84>
 80120ce:	4668      	mov	r0, sp
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	f7ff fd87 	bl	8011be4 <__lo0bits>
 80120d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80120da:	b1e8      	cbz	r0, 8012118 <__d2b+0x80>
 80120dc:	f1c0 0320 	rsb	r3, r0, #32
 80120e0:	fa02 f303 	lsl.w	r3, r2, r3
 80120e4:	430b      	orrs	r3, r1
 80120e6:	40c2      	lsrs	r2, r0
 80120e8:	6163      	str	r3, [r4, #20]
 80120ea:	9201      	str	r2, [sp, #4]
 80120ec:	9b01      	ldr	r3, [sp, #4]
 80120ee:	61a3      	str	r3, [r4, #24]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	bf14      	ite	ne
 80120f4:	2202      	movne	r2, #2
 80120f6:	2201      	moveq	r2, #1
 80120f8:	6122      	str	r2, [r4, #16]
 80120fa:	b1bd      	cbz	r5, 801212c <__d2b+0x94>
 80120fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012100:	4405      	add	r5, r0
 8012102:	603d      	str	r5, [r7, #0]
 8012104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012108:	6030      	str	r0, [r6, #0]
 801210a:	4620      	mov	r0, r4
 801210c:	b003      	add	sp, #12
 801210e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012116:	e7d6      	b.n	80120c6 <__d2b+0x2e>
 8012118:	6161      	str	r1, [r4, #20]
 801211a:	e7e7      	b.n	80120ec <__d2b+0x54>
 801211c:	a801      	add	r0, sp, #4
 801211e:	f7ff fd61 	bl	8011be4 <__lo0bits>
 8012122:	9b01      	ldr	r3, [sp, #4]
 8012124:	6163      	str	r3, [r4, #20]
 8012126:	3020      	adds	r0, #32
 8012128:	2201      	movs	r2, #1
 801212a:	e7e5      	b.n	80120f8 <__d2b+0x60>
 801212c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012130:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012134:	6038      	str	r0, [r7, #0]
 8012136:	6918      	ldr	r0, [r3, #16]
 8012138:	f7ff fd34 	bl	8011ba4 <__hi0bits>
 801213c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012140:	e7e2      	b.n	8012108 <__d2b+0x70>
 8012142:	bf00      	nop
 8012144:	08013124 	.word	0x08013124
 8012148:	08013135 	.word	0x08013135

0801214c <__sflush_r>:
 801214c:	898a      	ldrh	r2, [r1, #12]
 801214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012152:	4605      	mov	r5, r0
 8012154:	0710      	lsls	r0, r2, #28
 8012156:	460c      	mov	r4, r1
 8012158:	d458      	bmi.n	801220c <__sflush_r+0xc0>
 801215a:	684b      	ldr	r3, [r1, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	dc05      	bgt.n	801216c <__sflush_r+0x20>
 8012160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012162:	2b00      	cmp	r3, #0
 8012164:	dc02      	bgt.n	801216c <__sflush_r+0x20>
 8012166:	2000      	movs	r0, #0
 8012168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801216e:	2e00      	cmp	r6, #0
 8012170:	d0f9      	beq.n	8012166 <__sflush_r+0x1a>
 8012172:	2300      	movs	r3, #0
 8012174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012178:	682f      	ldr	r7, [r5, #0]
 801217a:	6a21      	ldr	r1, [r4, #32]
 801217c:	602b      	str	r3, [r5, #0]
 801217e:	d032      	beq.n	80121e6 <__sflush_r+0x9a>
 8012180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012182:	89a3      	ldrh	r3, [r4, #12]
 8012184:	075a      	lsls	r2, r3, #29
 8012186:	d505      	bpl.n	8012194 <__sflush_r+0x48>
 8012188:	6863      	ldr	r3, [r4, #4]
 801218a:	1ac0      	subs	r0, r0, r3
 801218c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801218e:	b10b      	cbz	r3, 8012194 <__sflush_r+0x48>
 8012190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012192:	1ac0      	subs	r0, r0, r3
 8012194:	2300      	movs	r3, #0
 8012196:	4602      	mov	r2, r0
 8012198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801219a:	6a21      	ldr	r1, [r4, #32]
 801219c:	4628      	mov	r0, r5
 801219e:	47b0      	blx	r6
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	d106      	bne.n	80121b4 <__sflush_r+0x68>
 80121a6:	6829      	ldr	r1, [r5, #0]
 80121a8:	291d      	cmp	r1, #29
 80121aa:	d82b      	bhi.n	8012204 <__sflush_r+0xb8>
 80121ac:	4a29      	ldr	r2, [pc, #164]	; (8012254 <__sflush_r+0x108>)
 80121ae:	410a      	asrs	r2, r1
 80121b0:	07d6      	lsls	r6, r2, #31
 80121b2:	d427      	bmi.n	8012204 <__sflush_r+0xb8>
 80121b4:	2200      	movs	r2, #0
 80121b6:	6062      	str	r2, [r4, #4]
 80121b8:	04d9      	lsls	r1, r3, #19
 80121ba:	6922      	ldr	r2, [r4, #16]
 80121bc:	6022      	str	r2, [r4, #0]
 80121be:	d504      	bpl.n	80121ca <__sflush_r+0x7e>
 80121c0:	1c42      	adds	r2, r0, #1
 80121c2:	d101      	bne.n	80121c8 <__sflush_r+0x7c>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	b903      	cbnz	r3, 80121ca <__sflush_r+0x7e>
 80121c8:	6560      	str	r0, [r4, #84]	; 0x54
 80121ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121cc:	602f      	str	r7, [r5, #0]
 80121ce:	2900      	cmp	r1, #0
 80121d0:	d0c9      	beq.n	8012166 <__sflush_r+0x1a>
 80121d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121d6:	4299      	cmp	r1, r3
 80121d8:	d002      	beq.n	80121e0 <__sflush_r+0x94>
 80121da:	4628      	mov	r0, r5
 80121dc:	f7ff fb3a 	bl	8011854 <_free_r>
 80121e0:	2000      	movs	r0, #0
 80121e2:	6360      	str	r0, [r4, #52]	; 0x34
 80121e4:	e7c0      	b.n	8012168 <__sflush_r+0x1c>
 80121e6:	2301      	movs	r3, #1
 80121e8:	4628      	mov	r0, r5
 80121ea:	47b0      	blx	r6
 80121ec:	1c41      	adds	r1, r0, #1
 80121ee:	d1c8      	bne.n	8012182 <__sflush_r+0x36>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0c5      	beq.n	8012182 <__sflush_r+0x36>
 80121f6:	2b1d      	cmp	r3, #29
 80121f8:	d001      	beq.n	80121fe <__sflush_r+0xb2>
 80121fa:	2b16      	cmp	r3, #22
 80121fc:	d101      	bne.n	8012202 <__sflush_r+0xb6>
 80121fe:	602f      	str	r7, [r5, #0]
 8012200:	e7b1      	b.n	8012166 <__sflush_r+0x1a>
 8012202:	89a3      	ldrh	r3, [r4, #12]
 8012204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012208:	81a3      	strh	r3, [r4, #12]
 801220a:	e7ad      	b.n	8012168 <__sflush_r+0x1c>
 801220c:	690f      	ldr	r7, [r1, #16]
 801220e:	2f00      	cmp	r7, #0
 8012210:	d0a9      	beq.n	8012166 <__sflush_r+0x1a>
 8012212:	0793      	lsls	r3, r2, #30
 8012214:	680e      	ldr	r6, [r1, #0]
 8012216:	bf08      	it	eq
 8012218:	694b      	ldreq	r3, [r1, #20]
 801221a:	600f      	str	r7, [r1, #0]
 801221c:	bf18      	it	ne
 801221e:	2300      	movne	r3, #0
 8012220:	eba6 0807 	sub.w	r8, r6, r7
 8012224:	608b      	str	r3, [r1, #8]
 8012226:	f1b8 0f00 	cmp.w	r8, #0
 801222a:	dd9c      	ble.n	8012166 <__sflush_r+0x1a>
 801222c:	6a21      	ldr	r1, [r4, #32]
 801222e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012230:	4643      	mov	r3, r8
 8012232:	463a      	mov	r2, r7
 8012234:	4628      	mov	r0, r5
 8012236:	47b0      	blx	r6
 8012238:	2800      	cmp	r0, #0
 801223a:	dc06      	bgt.n	801224a <__sflush_r+0xfe>
 801223c:	89a3      	ldrh	r3, [r4, #12]
 801223e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012242:	81a3      	strh	r3, [r4, #12]
 8012244:	f04f 30ff 	mov.w	r0, #4294967295
 8012248:	e78e      	b.n	8012168 <__sflush_r+0x1c>
 801224a:	4407      	add	r7, r0
 801224c:	eba8 0800 	sub.w	r8, r8, r0
 8012250:	e7e9      	b.n	8012226 <__sflush_r+0xda>
 8012252:	bf00      	nop
 8012254:	dfbffffe 	.word	0xdfbffffe

08012258 <_fflush_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	690b      	ldr	r3, [r1, #16]
 801225c:	4605      	mov	r5, r0
 801225e:	460c      	mov	r4, r1
 8012260:	b913      	cbnz	r3, 8012268 <_fflush_r+0x10>
 8012262:	2500      	movs	r5, #0
 8012264:	4628      	mov	r0, r5
 8012266:	bd38      	pop	{r3, r4, r5, pc}
 8012268:	b118      	cbz	r0, 8012272 <_fflush_r+0x1a>
 801226a:	6a03      	ldr	r3, [r0, #32]
 801226c:	b90b      	cbnz	r3, 8012272 <_fflush_r+0x1a>
 801226e:	f7fe fb6f 	bl	8010950 <__sinit>
 8012272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d0f3      	beq.n	8012262 <_fflush_r+0xa>
 801227a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801227c:	07d0      	lsls	r0, r2, #31
 801227e:	d404      	bmi.n	801228a <_fflush_r+0x32>
 8012280:	0599      	lsls	r1, r3, #22
 8012282:	d402      	bmi.n	801228a <_fflush_r+0x32>
 8012284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012286:	f7fe fc59 	bl	8010b3c <__retarget_lock_acquire_recursive>
 801228a:	4628      	mov	r0, r5
 801228c:	4621      	mov	r1, r4
 801228e:	f7ff ff5d 	bl	801214c <__sflush_r>
 8012292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012294:	07da      	lsls	r2, r3, #31
 8012296:	4605      	mov	r5, r0
 8012298:	d4e4      	bmi.n	8012264 <_fflush_r+0xc>
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	059b      	lsls	r3, r3, #22
 801229e:	d4e1      	bmi.n	8012264 <_fflush_r+0xc>
 80122a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122a2:	f7fe fc4c 	bl	8010b3e <__retarget_lock_release_recursive>
 80122a6:	e7dd      	b.n	8012264 <_fflush_r+0xc>

080122a8 <_sbrk_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4d06      	ldr	r5, [pc, #24]	; (80122c4 <_sbrk_r+0x1c>)
 80122ac:	2300      	movs	r3, #0
 80122ae:	4604      	mov	r4, r0
 80122b0:	4608      	mov	r0, r1
 80122b2:	602b      	str	r3, [r5, #0]
 80122b4:	f7f1 f9e2 	bl	800367c <_sbrk>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_sbrk_r+0x1a>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_sbrk_r+0x1a>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	2000260c 	.word	0x2000260c

080122c8 <__assert_func>:
 80122c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122ca:	4614      	mov	r4, r2
 80122cc:	461a      	mov	r2, r3
 80122ce:	4b09      	ldr	r3, [pc, #36]	; (80122f4 <__assert_func+0x2c>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	4605      	mov	r5, r0
 80122d4:	68d8      	ldr	r0, [r3, #12]
 80122d6:	b14c      	cbz	r4, 80122ec <__assert_func+0x24>
 80122d8:	4b07      	ldr	r3, [pc, #28]	; (80122f8 <__assert_func+0x30>)
 80122da:	9100      	str	r1, [sp, #0]
 80122dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122e0:	4906      	ldr	r1, [pc, #24]	; (80122fc <__assert_func+0x34>)
 80122e2:	462b      	mov	r3, r5
 80122e4:	f000 f844 	bl	8012370 <fiprintf>
 80122e8:	f000 f854 	bl	8012394 <abort>
 80122ec:	4b04      	ldr	r3, [pc, #16]	; (8012300 <__assert_func+0x38>)
 80122ee:	461c      	mov	r4, r3
 80122f0:	e7f3      	b.n	80122da <__assert_func+0x12>
 80122f2:	bf00      	nop
 80122f4:	20000304 	.word	0x20000304
 80122f8:	08013296 	.word	0x08013296
 80122fc:	080132a3 	.word	0x080132a3
 8012300:	080132d1 	.word	0x080132d1

08012304 <_calloc_r>:
 8012304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012306:	fba1 2402 	umull	r2, r4, r1, r2
 801230a:	b94c      	cbnz	r4, 8012320 <_calloc_r+0x1c>
 801230c:	4611      	mov	r1, r2
 801230e:	9201      	str	r2, [sp, #4]
 8012310:	f7ff fb14 	bl	801193c <_malloc_r>
 8012314:	9a01      	ldr	r2, [sp, #4]
 8012316:	4605      	mov	r5, r0
 8012318:	b930      	cbnz	r0, 8012328 <_calloc_r+0x24>
 801231a:	4628      	mov	r0, r5
 801231c:	b003      	add	sp, #12
 801231e:	bd30      	pop	{r4, r5, pc}
 8012320:	220c      	movs	r2, #12
 8012322:	6002      	str	r2, [r0, #0]
 8012324:	2500      	movs	r5, #0
 8012326:	e7f8      	b.n	801231a <_calloc_r+0x16>
 8012328:	4621      	mov	r1, r4
 801232a:	f7fe fb8a 	bl	8010a42 <memset>
 801232e:	e7f4      	b.n	801231a <_calloc_r+0x16>

08012330 <__ascii_mbtowc>:
 8012330:	b082      	sub	sp, #8
 8012332:	b901      	cbnz	r1, 8012336 <__ascii_mbtowc+0x6>
 8012334:	a901      	add	r1, sp, #4
 8012336:	b142      	cbz	r2, 801234a <__ascii_mbtowc+0x1a>
 8012338:	b14b      	cbz	r3, 801234e <__ascii_mbtowc+0x1e>
 801233a:	7813      	ldrb	r3, [r2, #0]
 801233c:	600b      	str	r3, [r1, #0]
 801233e:	7812      	ldrb	r2, [r2, #0]
 8012340:	1e10      	subs	r0, r2, #0
 8012342:	bf18      	it	ne
 8012344:	2001      	movne	r0, #1
 8012346:	b002      	add	sp, #8
 8012348:	4770      	bx	lr
 801234a:	4610      	mov	r0, r2
 801234c:	e7fb      	b.n	8012346 <__ascii_mbtowc+0x16>
 801234e:	f06f 0001 	mvn.w	r0, #1
 8012352:	e7f8      	b.n	8012346 <__ascii_mbtowc+0x16>

08012354 <__ascii_wctomb>:
 8012354:	b149      	cbz	r1, 801236a <__ascii_wctomb+0x16>
 8012356:	2aff      	cmp	r2, #255	; 0xff
 8012358:	bf85      	ittet	hi
 801235a:	238a      	movhi	r3, #138	; 0x8a
 801235c:	6003      	strhi	r3, [r0, #0]
 801235e:	700a      	strbls	r2, [r1, #0]
 8012360:	f04f 30ff 	movhi.w	r0, #4294967295
 8012364:	bf98      	it	ls
 8012366:	2001      	movls	r0, #1
 8012368:	4770      	bx	lr
 801236a:	4608      	mov	r0, r1
 801236c:	4770      	bx	lr
	...

08012370 <fiprintf>:
 8012370:	b40e      	push	{r1, r2, r3}
 8012372:	b503      	push	{r0, r1, lr}
 8012374:	4601      	mov	r1, r0
 8012376:	ab03      	add	r3, sp, #12
 8012378:	4805      	ldr	r0, [pc, #20]	; (8012390 <fiprintf+0x20>)
 801237a:	f853 2b04 	ldr.w	r2, [r3], #4
 801237e:	6800      	ldr	r0, [r0, #0]
 8012380:	9301      	str	r3, [sp, #4]
 8012382:	f000 f837 	bl	80123f4 <_vfiprintf_r>
 8012386:	b002      	add	sp, #8
 8012388:	f85d eb04 	ldr.w	lr, [sp], #4
 801238c:	b003      	add	sp, #12
 801238e:	4770      	bx	lr
 8012390:	20000304 	.word	0x20000304

08012394 <abort>:
 8012394:	b508      	push	{r3, lr}
 8012396:	2006      	movs	r0, #6
 8012398:	f000 fa04 	bl	80127a4 <raise>
 801239c:	2001      	movs	r0, #1
 801239e:	f7f1 f8f5 	bl	800358c <_exit>

080123a2 <__sfputc_r>:
 80123a2:	6893      	ldr	r3, [r2, #8]
 80123a4:	3b01      	subs	r3, #1
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	b410      	push	{r4}
 80123aa:	6093      	str	r3, [r2, #8]
 80123ac:	da08      	bge.n	80123c0 <__sfputc_r+0x1e>
 80123ae:	6994      	ldr	r4, [r2, #24]
 80123b0:	42a3      	cmp	r3, r4
 80123b2:	db01      	blt.n	80123b8 <__sfputc_r+0x16>
 80123b4:	290a      	cmp	r1, #10
 80123b6:	d103      	bne.n	80123c0 <__sfputc_r+0x1e>
 80123b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123bc:	f000 b934 	b.w	8012628 <__swbuf_r>
 80123c0:	6813      	ldr	r3, [r2, #0]
 80123c2:	1c58      	adds	r0, r3, #1
 80123c4:	6010      	str	r0, [r2, #0]
 80123c6:	7019      	strb	r1, [r3, #0]
 80123c8:	4608      	mov	r0, r1
 80123ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <__sfputs_r>:
 80123d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	4614      	mov	r4, r2
 80123d8:	18d5      	adds	r5, r2, r3
 80123da:	42ac      	cmp	r4, r5
 80123dc:	d101      	bne.n	80123e2 <__sfputs_r+0x12>
 80123de:	2000      	movs	r0, #0
 80123e0:	e007      	b.n	80123f2 <__sfputs_r+0x22>
 80123e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e6:	463a      	mov	r2, r7
 80123e8:	4630      	mov	r0, r6
 80123ea:	f7ff ffda 	bl	80123a2 <__sfputc_r>
 80123ee:	1c43      	adds	r3, r0, #1
 80123f0:	d1f3      	bne.n	80123da <__sfputs_r+0xa>
 80123f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080123f4 <_vfiprintf_r>:
 80123f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f8:	460d      	mov	r5, r1
 80123fa:	b09d      	sub	sp, #116	; 0x74
 80123fc:	4614      	mov	r4, r2
 80123fe:	4698      	mov	r8, r3
 8012400:	4606      	mov	r6, r0
 8012402:	b118      	cbz	r0, 801240c <_vfiprintf_r+0x18>
 8012404:	6a03      	ldr	r3, [r0, #32]
 8012406:	b90b      	cbnz	r3, 801240c <_vfiprintf_r+0x18>
 8012408:	f7fe faa2 	bl	8010950 <__sinit>
 801240c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801240e:	07d9      	lsls	r1, r3, #31
 8012410:	d405      	bmi.n	801241e <_vfiprintf_r+0x2a>
 8012412:	89ab      	ldrh	r3, [r5, #12]
 8012414:	059a      	lsls	r2, r3, #22
 8012416:	d402      	bmi.n	801241e <_vfiprintf_r+0x2a>
 8012418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801241a:	f7fe fb8f 	bl	8010b3c <__retarget_lock_acquire_recursive>
 801241e:	89ab      	ldrh	r3, [r5, #12]
 8012420:	071b      	lsls	r3, r3, #28
 8012422:	d501      	bpl.n	8012428 <_vfiprintf_r+0x34>
 8012424:	692b      	ldr	r3, [r5, #16]
 8012426:	b99b      	cbnz	r3, 8012450 <_vfiprintf_r+0x5c>
 8012428:	4629      	mov	r1, r5
 801242a:	4630      	mov	r0, r6
 801242c:	f000 f93a 	bl	80126a4 <__swsetup_r>
 8012430:	b170      	cbz	r0, 8012450 <_vfiprintf_r+0x5c>
 8012432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012434:	07dc      	lsls	r4, r3, #31
 8012436:	d504      	bpl.n	8012442 <_vfiprintf_r+0x4e>
 8012438:	f04f 30ff 	mov.w	r0, #4294967295
 801243c:	b01d      	add	sp, #116	; 0x74
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	89ab      	ldrh	r3, [r5, #12]
 8012444:	0598      	lsls	r0, r3, #22
 8012446:	d4f7      	bmi.n	8012438 <_vfiprintf_r+0x44>
 8012448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801244a:	f7fe fb78 	bl	8010b3e <__retarget_lock_release_recursive>
 801244e:	e7f3      	b.n	8012438 <_vfiprintf_r+0x44>
 8012450:	2300      	movs	r3, #0
 8012452:	9309      	str	r3, [sp, #36]	; 0x24
 8012454:	2320      	movs	r3, #32
 8012456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801245a:	f8cd 800c 	str.w	r8, [sp, #12]
 801245e:	2330      	movs	r3, #48	; 0x30
 8012460:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012614 <_vfiprintf_r+0x220>
 8012464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012468:	f04f 0901 	mov.w	r9, #1
 801246c:	4623      	mov	r3, r4
 801246e:	469a      	mov	sl, r3
 8012470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012474:	b10a      	cbz	r2, 801247a <_vfiprintf_r+0x86>
 8012476:	2a25      	cmp	r2, #37	; 0x25
 8012478:	d1f9      	bne.n	801246e <_vfiprintf_r+0x7a>
 801247a:	ebba 0b04 	subs.w	fp, sl, r4
 801247e:	d00b      	beq.n	8012498 <_vfiprintf_r+0xa4>
 8012480:	465b      	mov	r3, fp
 8012482:	4622      	mov	r2, r4
 8012484:	4629      	mov	r1, r5
 8012486:	4630      	mov	r0, r6
 8012488:	f7ff ffa2 	bl	80123d0 <__sfputs_r>
 801248c:	3001      	adds	r0, #1
 801248e:	f000 80a9 	beq.w	80125e4 <_vfiprintf_r+0x1f0>
 8012492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012494:	445a      	add	r2, fp
 8012496:	9209      	str	r2, [sp, #36]	; 0x24
 8012498:	f89a 3000 	ldrb.w	r3, [sl]
 801249c:	2b00      	cmp	r3, #0
 801249e:	f000 80a1 	beq.w	80125e4 <_vfiprintf_r+0x1f0>
 80124a2:	2300      	movs	r3, #0
 80124a4:	f04f 32ff 	mov.w	r2, #4294967295
 80124a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124ac:	f10a 0a01 	add.w	sl, sl, #1
 80124b0:	9304      	str	r3, [sp, #16]
 80124b2:	9307      	str	r3, [sp, #28]
 80124b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124b8:	931a      	str	r3, [sp, #104]	; 0x68
 80124ba:	4654      	mov	r4, sl
 80124bc:	2205      	movs	r2, #5
 80124be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c2:	4854      	ldr	r0, [pc, #336]	; (8012614 <_vfiprintf_r+0x220>)
 80124c4:	f7ed fe84 	bl	80001d0 <memchr>
 80124c8:	9a04      	ldr	r2, [sp, #16]
 80124ca:	b9d8      	cbnz	r0, 8012504 <_vfiprintf_r+0x110>
 80124cc:	06d1      	lsls	r1, r2, #27
 80124ce:	bf44      	itt	mi
 80124d0:	2320      	movmi	r3, #32
 80124d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124d6:	0713      	lsls	r3, r2, #28
 80124d8:	bf44      	itt	mi
 80124da:	232b      	movmi	r3, #43	; 0x2b
 80124dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124e0:	f89a 3000 	ldrb.w	r3, [sl]
 80124e4:	2b2a      	cmp	r3, #42	; 0x2a
 80124e6:	d015      	beq.n	8012514 <_vfiprintf_r+0x120>
 80124e8:	9a07      	ldr	r2, [sp, #28]
 80124ea:	4654      	mov	r4, sl
 80124ec:	2000      	movs	r0, #0
 80124ee:	f04f 0c0a 	mov.w	ip, #10
 80124f2:	4621      	mov	r1, r4
 80124f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f8:	3b30      	subs	r3, #48	; 0x30
 80124fa:	2b09      	cmp	r3, #9
 80124fc:	d94d      	bls.n	801259a <_vfiprintf_r+0x1a6>
 80124fe:	b1b0      	cbz	r0, 801252e <_vfiprintf_r+0x13a>
 8012500:	9207      	str	r2, [sp, #28]
 8012502:	e014      	b.n	801252e <_vfiprintf_r+0x13a>
 8012504:	eba0 0308 	sub.w	r3, r0, r8
 8012508:	fa09 f303 	lsl.w	r3, r9, r3
 801250c:	4313      	orrs	r3, r2
 801250e:	9304      	str	r3, [sp, #16]
 8012510:	46a2      	mov	sl, r4
 8012512:	e7d2      	b.n	80124ba <_vfiprintf_r+0xc6>
 8012514:	9b03      	ldr	r3, [sp, #12]
 8012516:	1d19      	adds	r1, r3, #4
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	9103      	str	r1, [sp, #12]
 801251c:	2b00      	cmp	r3, #0
 801251e:	bfbb      	ittet	lt
 8012520:	425b      	neglt	r3, r3
 8012522:	f042 0202 	orrlt.w	r2, r2, #2
 8012526:	9307      	strge	r3, [sp, #28]
 8012528:	9307      	strlt	r3, [sp, #28]
 801252a:	bfb8      	it	lt
 801252c:	9204      	strlt	r2, [sp, #16]
 801252e:	7823      	ldrb	r3, [r4, #0]
 8012530:	2b2e      	cmp	r3, #46	; 0x2e
 8012532:	d10c      	bne.n	801254e <_vfiprintf_r+0x15a>
 8012534:	7863      	ldrb	r3, [r4, #1]
 8012536:	2b2a      	cmp	r3, #42	; 0x2a
 8012538:	d134      	bne.n	80125a4 <_vfiprintf_r+0x1b0>
 801253a:	9b03      	ldr	r3, [sp, #12]
 801253c:	1d1a      	adds	r2, r3, #4
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	9203      	str	r2, [sp, #12]
 8012542:	2b00      	cmp	r3, #0
 8012544:	bfb8      	it	lt
 8012546:	f04f 33ff 	movlt.w	r3, #4294967295
 801254a:	3402      	adds	r4, #2
 801254c:	9305      	str	r3, [sp, #20]
 801254e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012624 <_vfiprintf_r+0x230>
 8012552:	7821      	ldrb	r1, [r4, #0]
 8012554:	2203      	movs	r2, #3
 8012556:	4650      	mov	r0, sl
 8012558:	f7ed fe3a 	bl	80001d0 <memchr>
 801255c:	b138      	cbz	r0, 801256e <_vfiprintf_r+0x17a>
 801255e:	9b04      	ldr	r3, [sp, #16]
 8012560:	eba0 000a 	sub.w	r0, r0, sl
 8012564:	2240      	movs	r2, #64	; 0x40
 8012566:	4082      	lsls	r2, r0
 8012568:	4313      	orrs	r3, r2
 801256a:	3401      	adds	r4, #1
 801256c:	9304      	str	r3, [sp, #16]
 801256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012572:	4829      	ldr	r0, [pc, #164]	; (8012618 <_vfiprintf_r+0x224>)
 8012574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012578:	2206      	movs	r2, #6
 801257a:	f7ed fe29 	bl	80001d0 <memchr>
 801257e:	2800      	cmp	r0, #0
 8012580:	d03f      	beq.n	8012602 <_vfiprintf_r+0x20e>
 8012582:	4b26      	ldr	r3, [pc, #152]	; (801261c <_vfiprintf_r+0x228>)
 8012584:	bb1b      	cbnz	r3, 80125ce <_vfiprintf_r+0x1da>
 8012586:	9b03      	ldr	r3, [sp, #12]
 8012588:	3307      	adds	r3, #7
 801258a:	f023 0307 	bic.w	r3, r3, #7
 801258e:	3308      	adds	r3, #8
 8012590:	9303      	str	r3, [sp, #12]
 8012592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012594:	443b      	add	r3, r7
 8012596:	9309      	str	r3, [sp, #36]	; 0x24
 8012598:	e768      	b.n	801246c <_vfiprintf_r+0x78>
 801259a:	fb0c 3202 	mla	r2, ip, r2, r3
 801259e:	460c      	mov	r4, r1
 80125a0:	2001      	movs	r0, #1
 80125a2:	e7a6      	b.n	80124f2 <_vfiprintf_r+0xfe>
 80125a4:	2300      	movs	r3, #0
 80125a6:	3401      	adds	r4, #1
 80125a8:	9305      	str	r3, [sp, #20]
 80125aa:	4619      	mov	r1, r3
 80125ac:	f04f 0c0a 	mov.w	ip, #10
 80125b0:	4620      	mov	r0, r4
 80125b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b6:	3a30      	subs	r2, #48	; 0x30
 80125b8:	2a09      	cmp	r2, #9
 80125ba:	d903      	bls.n	80125c4 <_vfiprintf_r+0x1d0>
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d0c6      	beq.n	801254e <_vfiprintf_r+0x15a>
 80125c0:	9105      	str	r1, [sp, #20]
 80125c2:	e7c4      	b.n	801254e <_vfiprintf_r+0x15a>
 80125c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80125c8:	4604      	mov	r4, r0
 80125ca:	2301      	movs	r3, #1
 80125cc:	e7f0      	b.n	80125b0 <_vfiprintf_r+0x1bc>
 80125ce:	ab03      	add	r3, sp, #12
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	462a      	mov	r2, r5
 80125d4:	4b12      	ldr	r3, [pc, #72]	; (8012620 <_vfiprintf_r+0x22c>)
 80125d6:	a904      	add	r1, sp, #16
 80125d8:	4630      	mov	r0, r6
 80125da:	f7fd fd79 	bl	80100d0 <_printf_float>
 80125de:	4607      	mov	r7, r0
 80125e0:	1c78      	adds	r0, r7, #1
 80125e2:	d1d6      	bne.n	8012592 <_vfiprintf_r+0x19e>
 80125e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125e6:	07d9      	lsls	r1, r3, #31
 80125e8:	d405      	bmi.n	80125f6 <_vfiprintf_r+0x202>
 80125ea:	89ab      	ldrh	r3, [r5, #12]
 80125ec:	059a      	lsls	r2, r3, #22
 80125ee:	d402      	bmi.n	80125f6 <_vfiprintf_r+0x202>
 80125f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125f2:	f7fe faa4 	bl	8010b3e <__retarget_lock_release_recursive>
 80125f6:	89ab      	ldrh	r3, [r5, #12]
 80125f8:	065b      	lsls	r3, r3, #25
 80125fa:	f53f af1d 	bmi.w	8012438 <_vfiprintf_r+0x44>
 80125fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012600:	e71c      	b.n	801243c <_vfiprintf_r+0x48>
 8012602:	ab03      	add	r3, sp, #12
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	462a      	mov	r2, r5
 8012608:	4b05      	ldr	r3, [pc, #20]	; (8012620 <_vfiprintf_r+0x22c>)
 801260a:	a904      	add	r1, sp, #16
 801260c:	4630      	mov	r0, r6
 801260e:	f7fe f803 	bl	8010618 <_printf_i>
 8012612:	e7e4      	b.n	80125de <_vfiprintf_r+0x1ea>
 8012614:	080133d3 	.word	0x080133d3
 8012618:	080133dd 	.word	0x080133dd
 801261c:	080100d1 	.word	0x080100d1
 8012620:	080123d1 	.word	0x080123d1
 8012624:	080133d9 	.word	0x080133d9

08012628 <__swbuf_r>:
 8012628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262a:	460e      	mov	r6, r1
 801262c:	4614      	mov	r4, r2
 801262e:	4605      	mov	r5, r0
 8012630:	b118      	cbz	r0, 801263a <__swbuf_r+0x12>
 8012632:	6a03      	ldr	r3, [r0, #32]
 8012634:	b90b      	cbnz	r3, 801263a <__swbuf_r+0x12>
 8012636:	f7fe f98b 	bl	8010950 <__sinit>
 801263a:	69a3      	ldr	r3, [r4, #24]
 801263c:	60a3      	str	r3, [r4, #8]
 801263e:	89a3      	ldrh	r3, [r4, #12]
 8012640:	071a      	lsls	r2, r3, #28
 8012642:	d525      	bpl.n	8012690 <__swbuf_r+0x68>
 8012644:	6923      	ldr	r3, [r4, #16]
 8012646:	b31b      	cbz	r3, 8012690 <__swbuf_r+0x68>
 8012648:	6823      	ldr	r3, [r4, #0]
 801264a:	6922      	ldr	r2, [r4, #16]
 801264c:	1a98      	subs	r0, r3, r2
 801264e:	6963      	ldr	r3, [r4, #20]
 8012650:	b2f6      	uxtb	r6, r6
 8012652:	4283      	cmp	r3, r0
 8012654:	4637      	mov	r7, r6
 8012656:	dc04      	bgt.n	8012662 <__swbuf_r+0x3a>
 8012658:	4621      	mov	r1, r4
 801265a:	4628      	mov	r0, r5
 801265c:	f7ff fdfc 	bl	8012258 <_fflush_r>
 8012660:	b9e0      	cbnz	r0, 801269c <__swbuf_r+0x74>
 8012662:	68a3      	ldr	r3, [r4, #8]
 8012664:	3b01      	subs	r3, #1
 8012666:	60a3      	str	r3, [r4, #8]
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	1c5a      	adds	r2, r3, #1
 801266c:	6022      	str	r2, [r4, #0]
 801266e:	701e      	strb	r6, [r3, #0]
 8012670:	6962      	ldr	r2, [r4, #20]
 8012672:	1c43      	adds	r3, r0, #1
 8012674:	429a      	cmp	r2, r3
 8012676:	d004      	beq.n	8012682 <__swbuf_r+0x5a>
 8012678:	89a3      	ldrh	r3, [r4, #12]
 801267a:	07db      	lsls	r3, r3, #31
 801267c:	d506      	bpl.n	801268c <__swbuf_r+0x64>
 801267e:	2e0a      	cmp	r6, #10
 8012680:	d104      	bne.n	801268c <__swbuf_r+0x64>
 8012682:	4621      	mov	r1, r4
 8012684:	4628      	mov	r0, r5
 8012686:	f7ff fde7 	bl	8012258 <_fflush_r>
 801268a:	b938      	cbnz	r0, 801269c <__swbuf_r+0x74>
 801268c:	4638      	mov	r0, r7
 801268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012690:	4621      	mov	r1, r4
 8012692:	4628      	mov	r0, r5
 8012694:	f000 f806 	bl	80126a4 <__swsetup_r>
 8012698:	2800      	cmp	r0, #0
 801269a:	d0d5      	beq.n	8012648 <__swbuf_r+0x20>
 801269c:	f04f 37ff 	mov.w	r7, #4294967295
 80126a0:	e7f4      	b.n	801268c <__swbuf_r+0x64>
	...

080126a4 <__swsetup_r>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	4b2a      	ldr	r3, [pc, #168]	; (8012750 <__swsetup_r+0xac>)
 80126a8:	4605      	mov	r5, r0
 80126aa:	6818      	ldr	r0, [r3, #0]
 80126ac:	460c      	mov	r4, r1
 80126ae:	b118      	cbz	r0, 80126b8 <__swsetup_r+0x14>
 80126b0:	6a03      	ldr	r3, [r0, #32]
 80126b2:	b90b      	cbnz	r3, 80126b8 <__swsetup_r+0x14>
 80126b4:	f7fe f94c 	bl	8010950 <__sinit>
 80126b8:	89a3      	ldrh	r3, [r4, #12]
 80126ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126be:	0718      	lsls	r0, r3, #28
 80126c0:	d422      	bmi.n	8012708 <__swsetup_r+0x64>
 80126c2:	06d9      	lsls	r1, r3, #27
 80126c4:	d407      	bmi.n	80126d6 <__swsetup_r+0x32>
 80126c6:	2309      	movs	r3, #9
 80126c8:	602b      	str	r3, [r5, #0]
 80126ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80126ce:	81a3      	strh	r3, [r4, #12]
 80126d0:	f04f 30ff 	mov.w	r0, #4294967295
 80126d4:	e034      	b.n	8012740 <__swsetup_r+0x9c>
 80126d6:	0758      	lsls	r0, r3, #29
 80126d8:	d512      	bpl.n	8012700 <__swsetup_r+0x5c>
 80126da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126dc:	b141      	cbz	r1, 80126f0 <__swsetup_r+0x4c>
 80126de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126e2:	4299      	cmp	r1, r3
 80126e4:	d002      	beq.n	80126ec <__swsetup_r+0x48>
 80126e6:	4628      	mov	r0, r5
 80126e8:	f7ff f8b4 	bl	8011854 <_free_r>
 80126ec:	2300      	movs	r3, #0
 80126ee:	6363      	str	r3, [r4, #52]	; 0x34
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80126f6:	81a3      	strh	r3, [r4, #12]
 80126f8:	2300      	movs	r3, #0
 80126fa:	6063      	str	r3, [r4, #4]
 80126fc:	6923      	ldr	r3, [r4, #16]
 80126fe:	6023      	str	r3, [r4, #0]
 8012700:	89a3      	ldrh	r3, [r4, #12]
 8012702:	f043 0308 	orr.w	r3, r3, #8
 8012706:	81a3      	strh	r3, [r4, #12]
 8012708:	6923      	ldr	r3, [r4, #16]
 801270a:	b94b      	cbnz	r3, 8012720 <__swsetup_r+0x7c>
 801270c:	89a3      	ldrh	r3, [r4, #12]
 801270e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012716:	d003      	beq.n	8012720 <__swsetup_r+0x7c>
 8012718:	4621      	mov	r1, r4
 801271a:	4628      	mov	r0, r5
 801271c:	f000 f884 	bl	8012828 <__smakebuf_r>
 8012720:	89a0      	ldrh	r0, [r4, #12]
 8012722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012726:	f010 0301 	ands.w	r3, r0, #1
 801272a:	d00a      	beq.n	8012742 <__swsetup_r+0x9e>
 801272c:	2300      	movs	r3, #0
 801272e:	60a3      	str	r3, [r4, #8]
 8012730:	6963      	ldr	r3, [r4, #20]
 8012732:	425b      	negs	r3, r3
 8012734:	61a3      	str	r3, [r4, #24]
 8012736:	6923      	ldr	r3, [r4, #16]
 8012738:	b943      	cbnz	r3, 801274c <__swsetup_r+0xa8>
 801273a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801273e:	d1c4      	bne.n	80126ca <__swsetup_r+0x26>
 8012740:	bd38      	pop	{r3, r4, r5, pc}
 8012742:	0781      	lsls	r1, r0, #30
 8012744:	bf58      	it	pl
 8012746:	6963      	ldrpl	r3, [r4, #20]
 8012748:	60a3      	str	r3, [r4, #8]
 801274a:	e7f4      	b.n	8012736 <__swsetup_r+0x92>
 801274c:	2000      	movs	r0, #0
 801274e:	e7f7      	b.n	8012740 <__swsetup_r+0x9c>
 8012750:	20000304 	.word	0x20000304

08012754 <_raise_r>:
 8012754:	291f      	cmp	r1, #31
 8012756:	b538      	push	{r3, r4, r5, lr}
 8012758:	4604      	mov	r4, r0
 801275a:	460d      	mov	r5, r1
 801275c:	d904      	bls.n	8012768 <_raise_r+0x14>
 801275e:	2316      	movs	r3, #22
 8012760:	6003      	str	r3, [r0, #0]
 8012762:	f04f 30ff 	mov.w	r0, #4294967295
 8012766:	bd38      	pop	{r3, r4, r5, pc}
 8012768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801276a:	b112      	cbz	r2, 8012772 <_raise_r+0x1e>
 801276c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012770:	b94b      	cbnz	r3, 8012786 <_raise_r+0x32>
 8012772:	4620      	mov	r0, r4
 8012774:	f000 f830 	bl	80127d8 <_getpid_r>
 8012778:	462a      	mov	r2, r5
 801277a:	4601      	mov	r1, r0
 801277c:	4620      	mov	r0, r4
 801277e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012782:	f000 b817 	b.w	80127b4 <_kill_r>
 8012786:	2b01      	cmp	r3, #1
 8012788:	d00a      	beq.n	80127a0 <_raise_r+0x4c>
 801278a:	1c59      	adds	r1, r3, #1
 801278c:	d103      	bne.n	8012796 <_raise_r+0x42>
 801278e:	2316      	movs	r3, #22
 8012790:	6003      	str	r3, [r0, #0]
 8012792:	2001      	movs	r0, #1
 8012794:	e7e7      	b.n	8012766 <_raise_r+0x12>
 8012796:	2400      	movs	r4, #0
 8012798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801279c:	4628      	mov	r0, r5
 801279e:	4798      	blx	r3
 80127a0:	2000      	movs	r0, #0
 80127a2:	e7e0      	b.n	8012766 <_raise_r+0x12>

080127a4 <raise>:
 80127a4:	4b02      	ldr	r3, [pc, #8]	; (80127b0 <raise+0xc>)
 80127a6:	4601      	mov	r1, r0
 80127a8:	6818      	ldr	r0, [r3, #0]
 80127aa:	f7ff bfd3 	b.w	8012754 <_raise_r>
 80127ae:	bf00      	nop
 80127b0:	20000304 	.word	0x20000304

080127b4 <_kill_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	4d07      	ldr	r5, [pc, #28]	; (80127d4 <_kill_r+0x20>)
 80127b8:	2300      	movs	r3, #0
 80127ba:	4604      	mov	r4, r0
 80127bc:	4608      	mov	r0, r1
 80127be:	4611      	mov	r1, r2
 80127c0:	602b      	str	r3, [r5, #0]
 80127c2:	f7f0 fed3 	bl	800356c <_kill>
 80127c6:	1c43      	adds	r3, r0, #1
 80127c8:	d102      	bne.n	80127d0 <_kill_r+0x1c>
 80127ca:	682b      	ldr	r3, [r5, #0]
 80127cc:	b103      	cbz	r3, 80127d0 <_kill_r+0x1c>
 80127ce:	6023      	str	r3, [r4, #0]
 80127d0:	bd38      	pop	{r3, r4, r5, pc}
 80127d2:	bf00      	nop
 80127d4:	2000260c 	.word	0x2000260c

080127d8 <_getpid_r>:
 80127d8:	f7f0 bec0 	b.w	800355c <_getpid>

080127dc <__swhatbuf_r>:
 80127dc:	b570      	push	{r4, r5, r6, lr}
 80127de:	460c      	mov	r4, r1
 80127e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e4:	2900      	cmp	r1, #0
 80127e6:	b096      	sub	sp, #88	; 0x58
 80127e8:	4615      	mov	r5, r2
 80127ea:	461e      	mov	r6, r3
 80127ec:	da0d      	bge.n	801280a <__swhatbuf_r+0x2e>
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80127f4:	f04f 0100 	mov.w	r1, #0
 80127f8:	bf0c      	ite	eq
 80127fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80127fe:	2340      	movne	r3, #64	; 0x40
 8012800:	2000      	movs	r0, #0
 8012802:	6031      	str	r1, [r6, #0]
 8012804:	602b      	str	r3, [r5, #0]
 8012806:	b016      	add	sp, #88	; 0x58
 8012808:	bd70      	pop	{r4, r5, r6, pc}
 801280a:	466a      	mov	r2, sp
 801280c:	f000 f848 	bl	80128a0 <_fstat_r>
 8012810:	2800      	cmp	r0, #0
 8012812:	dbec      	blt.n	80127ee <__swhatbuf_r+0x12>
 8012814:	9901      	ldr	r1, [sp, #4]
 8012816:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801281a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801281e:	4259      	negs	r1, r3
 8012820:	4159      	adcs	r1, r3
 8012822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012826:	e7eb      	b.n	8012800 <__swhatbuf_r+0x24>

08012828 <__smakebuf_r>:
 8012828:	898b      	ldrh	r3, [r1, #12]
 801282a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801282c:	079d      	lsls	r5, r3, #30
 801282e:	4606      	mov	r6, r0
 8012830:	460c      	mov	r4, r1
 8012832:	d507      	bpl.n	8012844 <__smakebuf_r+0x1c>
 8012834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012838:	6023      	str	r3, [r4, #0]
 801283a:	6123      	str	r3, [r4, #16]
 801283c:	2301      	movs	r3, #1
 801283e:	6163      	str	r3, [r4, #20]
 8012840:	b002      	add	sp, #8
 8012842:	bd70      	pop	{r4, r5, r6, pc}
 8012844:	ab01      	add	r3, sp, #4
 8012846:	466a      	mov	r2, sp
 8012848:	f7ff ffc8 	bl	80127dc <__swhatbuf_r>
 801284c:	9900      	ldr	r1, [sp, #0]
 801284e:	4605      	mov	r5, r0
 8012850:	4630      	mov	r0, r6
 8012852:	f7ff f873 	bl	801193c <_malloc_r>
 8012856:	b948      	cbnz	r0, 801286c <__smakebuf_r+0x44>
 8012858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801285c:	059a      	lsls	r2, r3, #22
 801285e:	d4ef      	bmi.n	8012840 <__smakebuf_r+0x18>
 8012860:	f023 0303 	bic.w	r3, r3, #3
 8012864:	f043 0302 	orr.w	r3, r3, #2
 8012868:	81a3      	strh	r3, [r4, #12]
 801286a:	e7e3      	b.n	8012834 <__smakebuf_r+0xc>
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	6020      	str	r0, [r4, #0]
 8012870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012874:	81a3      	strh	r3, [r4, #12]
 8012876:	9b00      	ldr	r3, [sp, #0]
 8012878:	6163      	str	r3, [r4, #20]
 801287a:	9b01      	ldr	r3, [sp, #4]
 801287c:	6120      	str	r0, [r4, #16]
 801287e:	b15b      	cbz	r3, 8012898 <__smakebuf_r+0x70>
 8012880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012884:	4630      	mov	r0, r6
 8012886:	f000 f81d 	bl	80128c4 <_isatty_r>
 801288a:	b128      	cbz	r0, 8012898 <__smakebuf_r+0x70>
 801288c:	89a3      	ldrh	r3, [r4, #12]
 801288e:	f023 0303 	bic.w	r3, r3, #3
 8012892:	f043 0301 	orr.w	r3, r3, #1
 8012896:	81a3      	strh	r3, [r4, #12]
 8012898:	89a3      	ldrh	r3, [r4, #12]
 801289a:	431d      	orrs	r5, r3
 801289c:	81a5      	strh	r5, [r4, #12]
 801289e:	e7cf      	b.n	8012840 <__smakebuf_r+0x18>

080128a0 <_fstat_r>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4d07      	ldr	r5, [pc, #28]	; (80128c0 <_fstat_r+0x20>)
 80128a4:	2300      	movs	r3, #0
 80128a6:	4604      	mov	r4, r0
 80128a8:	4608      	mov	r0, r1
 80128aa:	4611      	mov	r1, r2
 80128ac:	602b      	str	r3, [r5, #0]
 80128ae:	f7f0 febc 	bl	800362a <_fstat>
 80128b2:	1c43      	adds	r3, r0, #1
 80128b4:	d102      	bne.n	80128bc <_fstat_r+0x1c>
 80128b6:	682b      	ldr	r3, [r5, #0]
 80128b8:	b103      	cbz	r3, 80128bc <_fstat_r+0x1c>
 80128ba:	6023      	str	r3, [r4, #0]
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
 80128be:	bf00      	nop
 80128c0:	2000260c 	.word	0x2000260c

080128c4 <_isatty_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4d06      	ldr	r5, [pc, #24]	; (80128e0 <_isatty_r+0x1c>)
 80128c8:	2300      	movs	r3, #0
 80128ca:	4604      	mov	r4, r0
 80128cc:	4608      	mov	r0, r1
 80128ce:	602b      	str	r3, [r5, #0]
 80128d0:	f7f0 febb 	bl	800364a <_isatty>
 80128d4:	1c43      	adds	r3, r0, #1
 80128d6:	d102      	bne.n	80128de <_isatty_r+0x1a>
 80128d8:	682b      	ldr	r3, [r5, #0]
 80128da:	b103      	cbz	r3, 80128de <_isatty_r+0x1a>
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	bd38      	pop	{r3, r4, r5, pc}
 80128e0:	2000260c 	.word	0x2000260c

080128e4 <atan2>:
 80128e4:	f000 b908 	b.w	8012af8 <__ieee754_atan2>

080128e8 <sqrt>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	ed2d 8b02 	vpush	{d8}
 80128ee:	ec55 4b10 	vmov	r4, r5, d0
 80128f2:	f000 f825 	bl	8012940 <__ieee754_sqrt>
 80128f6:	4622      	mov	r2, r4
 80128f8:	462b      	mov	r3, r5
 80128fa:	4620      	mov	r0, r4
 80128fc:	4629      	mov	r1, r5
 80128fe:	eeb0 8a40 	vmov.f32	s16, s0
 8012902:	eef0 8a60 	vmov.f32	s17, s1
 8012906:	f7ee f911 	bl	8000b2c <__aeabi_dcmpun>
 801290a:	b990      	cbnz	r0, 8012932 <sqrt+0x4a>
 801290c:	2200      	movs	r2, #0
 801290e:	2300      	movs	r3, #0
 8012910:	4620      	mov	r0, r4
 8012912:	4629      	mov	r1, r5
 8012914:	f7ee f8e2 	bl	8000adc <__aeabi_dcmplt>
 8012918:	b158      	cbz	r0, 8012932 <sqrt+0x4a>
 801291a:	f7fe f8e5 	bl	8010ae8 <__errno>
 801291e:	2321      	movs	r3, #33	; 0x21
 8012920:	6003      	str	r3, [r0, #0]
 8012922:	2200      	movs	r2, #0
 8012924:	2300      	movs	r3, #0
 8012926:	4610      	mov	r0, r2
 8012928:	4619      	mov	r1, r3
 801292a:	f7ed ff8f 	bl	800084c <__aeabi_ddiv>
 801292e:	ec41 0b18 	vmov	d8, r0, r1
 8012932:	eeb0 0a48 	vmov.f32	s0, s16
 8012936:	eef0 0a68 	vmov.f32	s1, s17
 801293a:	ecbd 8b02 	vpop	{d8}
 801293e:	bd38      	pop	{r3, r4, r5, pc}

08012940 <__ieee754_sqrt>:
 8012940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	ec55 4b10 	vmov	r4, r5, d0
 8012948:	4e67      	ldr	r6, [pc, #412]	; (8012ae8 <__ieee754_sqrt+0x1a8>)
 801294a:	43ae      	bics	r6, r5
 801294c:	ee10 0a10 	vmov	r0, s0
 8012950:	ee10 2a10 	vmov	r2, s0
 8012954:	4629      	mov	r1, r5
 8012956:	462b      	mov	r3, r5
 8012958:	d10d      	bne.n	8012976 <__ieee754_sqrt+0x36>
 801295a:	f7ed fe4d 	bl	80005f8 <__aeabi_dmul>
 801295e:	4602      	mov	r2, r0
 8012960:	460b      	mov	r3, r1
 8012962:	4620      	mov	r0, r4
 8012964:	4629      	mov	r1, r5
 8012966:	f7ed fc91 	bl	800028c <__adddf3>
 801296a:	4604      	mov	r4, r0
 801296c:	460d      	mov	r5, r1
 801296e:	ec45 4b10 	vmov	d0, r4, r5
 8012972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012976:	2d00      	cmp	r5, #0
 8012978:	dc0b      	bgt.n	8012992 <__ieee754_sqrt+0x52>
 801297a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801297e:	4326      	orrs	r6, r4
 8012980:	d0f5      	beq.n	801296e <__ieee754_sqrt+0x2e>
 8012982:	b135      	cbz	r5, 8012992 <__ieee754_sqrt+0x52>
 8012984:	f7ed fc80 	bl	8000288 <__aeabi_dsub>
 8012988:	4602      	mov	r2, r0
 801298a:	460b      	mov	r3, r1
 801298c:	f7ed ff5e 	bl	800084c <__aeabi_ddiv>
 8012990:	e7eb      	b.n	801296a <__ieee754_sqrt+0x2a>
 8012992:	1509      	asrs	r1, r1, #20
 8012994:	f000 808d 	beq.w	8012ab2 <__ieee754_sqrt+0x172>
 8012998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801299c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80129a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129a4:	07c9      	lsls	r1, r1, #31
 80129a6:	bf5c      	itt	pl
 80129a8:	005b      	lslpl	r3, r3, #1
 80129aa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80129ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129b2:	bf58      	it	pl
 80129b4:	0052      	lslpl	r2, r2, #1
 80129b6:	2500      	movs	r5, #0
 80129b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80129bc:	1076      	asrs	r6, r6, #1
 80129be:	0052      	lsls	r2, r2, #1
 80129c0:	f04f 0e16 	mov.w	lr, #22
 80129c4:	46ac      	mov	ip, r5
 80129c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80129ca:	eb0c 0001 	add.w	r0, ip, r1
 80129ce:	4298      	cmp	r0, r3
 80129d0:	bfde      	ittt	le
 80129d2:	1a1b      	suble	r3, r3, r0
 80129d4:	eb00 0c01 	addle.w	ip, r0, r1
 80129d8:	186d      	addle	r5, r5, r1
 80129da:	005b      	lsls	r3, r3, #1
 80129dc:	f1be 0e01 	subs.w	lr, lr, #1
 80129e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80129e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80129e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80129ec:	d1ed      	bne.n	80129ca <__ieee754_sqrt+0x8a>
 80129ee:	4674      	mov	r4, lr
 80129f0:	2720      	movs	r7, #32
 80129f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80129f6:	4563      	cmp	r3, ip
 80129f8:	eb01 000e 	add.w	r0, r1, lr
 80129fc:	dc02      	bgt.n	8012a04 <__ieee754_sqrt+0xc4>
 80129fe:	d113      	bne.n	8012a28 <__ieee754_sqrt+0xe8>
 8012a00:	4290      	cmp	r0, r2
 8012a02:	d811      	bhi.n	8012a28 <__ieee754_sqrt+0xe8>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	eb00 0e01 	add.w	lr, r0, r1
 8012a0a:	da57      	bge.n	8012abc <__ieee754_sqrt+0x17c>
 8012a0c:	f1be 0f00 	cmp.w	lr, #0
 8012a10:	db54      	blt.n	8012abc <__ieee754_sqrt+0x17c>
 8012a12:	f10c 0801 	add.w	r8, ip, #1
 8012a16:	eba3 030c 	sub.w	r3, r3, ip
 8012a1a:	4290      	cmp	r0, r2
 8012a1c:	bf88      	it	hi
 8012a1e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012a22:	1a12      	subs	r2, r2, r0
 8012a24:	440c      	add	r4, r1
 8012a26:	46c4      	mov	ip, r8
 8012a28:	005b      	lsls	r3, r3, #1
 8012a2a:	3f01      	subs	r7, #1
 8012a2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012a30:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012a34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012a38:	d1dd      	bne.n	80129f6 <__ieee754_sqrt+0xb6>
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	d01b      	beq.n	8012a76 <__ieee754_sqrt+0x136>
 8012a3e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012aec <__ieee754_sqrt+0x1ac>
 8012a42:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012af0 <__ieee754_sqrt+0x1b0>
 8012a46:	e9da 0100 	ldrd	r0, r1, [sl]
 8012a4a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012a4e:	f7ed fc1b 	bl	8000288 <__aeabi_dsub>
 8012a52:	e9da 8900 	ldrd	r8, r9, [sl]
 8012a56:	4602      	mov	r2, r0
 8012a58:	460b      	mov	r3, r1
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	4649      	mov	r1, r9
 8012a5e:	f7ee f847 	bl	8000af0 <__aeabi_dcmple>
 8012a62:	b140      	cbz	r0, 8012a76 <__ieee754_sqrt+0x136>
 8012a64:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012a68:	e9da 0100 	ldrd	r0, r1, [sl]
 8012a6c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012a70:	d126      	bne.n	8012ac0 <__ieee754_sqrt+0x180>
 8012a72:	3501      	adds	r5, #1
 8012a74:	463c      	mov	r4, r7
 8012a76:	106a      	asrs	r2, r5, #1
 8012a78:	0863      	lsrs	r3, r4, #1
 8012a7a:	07e9      	lsls	r1, r5, #31
 8012a7c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012a80:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012a84:	bf48      	it	mi
 8012a86:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012a8a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012a8e:	461c      	mov	r4, r3
 8012a90:	e76d      	b.n	801296e <__ieee754_sqrt+0x2e>
 8012a92:	0ad3      	lsrs	r3, r2, #11
 8012a94:	3815      	subs	r0, #21
 8012a96:	0552      	lsls	r2, r2, #21
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d0fa      	beq.n	8012a92 <__ieee754_sqrt+0x152>
 8012a9c:	02dc      	lsls	r4, r3, #11
 8012a9e:	d50a      	bpl.n	8012ab6 <__ieee754_sqrt+0x176>
 8012aa0:	f1c1 0420 	rsb	r4, r1, #32
 8012aa4:	fa22 f404 	lsr.w	r4, r2, r4
 8012aa8:	1e4d      	subs	r5, r1, #1
 8012aaa:	408a      	lsls	r2, r1
 8012aac:	4323      	orrs	r3, r4
 8012aae:	1b41      	subs	r1, r0, r5
 8012ab0:	e772      	b.n	8012998 <__ieee754_sqrt+0x58>
 8012ab2:	4608      	mov	r0, r1
 8012ab4:	e7f0      	b.n	8012a98 <__ieee754_sqrt+0x158>
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	3101      	adds	r1, #1
 8012aba:	e7ef      	b.n	8012a9c <__ieee754_sqrt+0x15c>
 8012abc:	46e0      	mov	r8, ip
 8012abe:	e7aa      	b.n	8012a16 <__ieee754_sqrt+0xd6>
 8012ac0:	f7ed fbe4 	bl	800028c <__adddf3>
 8012ac4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	4640      	mov	r0, r8
 8012ace:	4649      	mov	r1, r9
 8012ad0:	f7ee f804 	bl	8000adc <__aeabi_dcmplt>
 8012ad4:	b120      	cbz	r0, 8012ae0 <__ieee754_sqrt+0x1a0>
 8012ad6:	1ca0      	adds	r0, r4, #2
 8012ad8:	bf08      	it	eq
 8012ada:	3501      	addeq	r5, #1
 8012adc:	3402      	adds	r4, #2
 8012ade:	e7ca      	b.n	8012a76 <__ieee754_sqrt+0x136>
 8012ae0:	3401      	adds	r4, #1
 8012ae2:	f024 0401 	bic.w	r4, r4, #1
 8012ae6:	e7c6      	b.n	8012a76 <__ieee754_sqrt+0x136>
 8012ae8:	7ff00000 	.word	0x7ff00000
 8012aec:	20000478 	.word	0x20000478
 8012af0:	20000480 	.word	0x20000480
 8012af4:	00000000 	.word	0x00000000

08012af8 <__ieee754_atan2>:
 8012af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012afc:	ec57 6b11 	vmov	r6, r7, d1
 8012b00:	4273      	negs	r3, r6
 8012b02:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8012c80 <__ieee754_atan2+0x188>
 8012b06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012b0a:	4333      	orrs	r3, r6
 8012b0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012b10:	4543      	cmp	r3, r8
 8012b12:	ec51 0b10 	vmov	r0, r1, d0
 8012b16:	ee11 5a10 	vmov	r5, s2
 8012b1a:	d80a      	bhi.n	8012b32 <__ieee754_atan2+0x3a>
 8012b1c:	4244      	negs	r4, r0
 8012b1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b22:	4304      	orrs	r4, r0
 8012b24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012b28:	4544      	cmp	r4, r8
 8012b2a:	ee10 9a10 	vmov	r9, s0
 8012b2e:	468e      	mov	lr, r1
 8012b30:	d907      	bls.n	8012b42 <__ieee754_atan2+0x4a>
 8012b32:	4632      	mov	r2, r6
 8012b34:	463b      	mov	r3, r7
 8012b36:	f7ed fba9 	bl	800028c <__adddf3>
 8012b3a:	ec41 0b10 	vmov	d0, r0, r1
 8012b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012b46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012b4a:	4334      	orrs	r4, r6
 8012b4c:	d103      	bne.n	8012b56 <__ieee754_atan2+0x5e>
 8012b4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b52:	f000 b899 	b.w	8012c88 <atan>
 8012b56:	17bc      	asrs	r4, r7, #30
 8012b58:	f004 0402 	and.w	r4, r4, #2
 8012b5c:	ea53 0909 	orrs.w	r9, r3, r9
 8012b60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012b64:	d107      	bne.n	8012b76 <__ieee754_atan2+0x7e>
 8012b66:	2c02      	cmp	r4, #2
 8012b68:	d05f      	beq.n	8012c2a <__ieee754_atan2+0x132>
 8012b6a:	2c03      	cmp	r4, #3
 8012b6c:	d1e5      	bne.n	8012b3a <__ieee754_atan2+0x42>
 8012b6e:	a140      	add	r1, pc, #256	; (adr r1, 8012c70 <__ieee754_atan2+0x178>)
 8012b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b74:	e7e1      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012b76:	4315      	orrs	r5, r2
 8012b78:	d106      	bne.n	8012b88 <__ieee754_atan2+0x90>
 8012b7a:	f1be 0f00 	cmp.w	lr, #0
 8012b7e:	da5f      	bge.n	8012c40 <__ieee754_atan2+0x148>
 8012b80:	a13d      	add	r1, pc, #244	; (adr r1, 8012c78 <__ieee754_atan2+0x180>)
 8012b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b86:	e7d8      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012b88:	4542      	cmp	r2, r8
 8012b8a:	d10f      	bne.n	8012bac <__ieee754_atan2+0xb4>
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012b92:	d107      	bne.n	8012ba4 <__ieee754_atan2+0xac>
 8012b94:	2c02      	cmp	r4, #2
 8012b96:	d84c      	bhi.n	8012c32 <__ieee754_atan2+0x13a>
 8012b98:	4b33      	ldr	r3, [pc, #204]	; (8012c68 <__ieee754_atan2+0x170>)
 8012b9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ba2:	e7ca      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012ba4:	2c02      	cmp	r4, #2
 8012ba6:	d848      	bhi.n	8012c3a <__ieee754_atan2+0x142>
 8012ba8:	4b30      	ldr	r3, [pc, #192]	; (8012c6c <__ieee754_atan2+0x174>)
 8012baa:	e7f6      	b.n	8012b9a <__ieee754_atan2+0xa2>
 8012bac:	4543      	cmp	r3, r8
 8012bae:	d0e4      	beq.n	8012b7a <__ieee754_atan2+0x82>
 8012bb0:	1a9b      	subs	r3, r3, r2
 8012bb2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012bb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012bba:	da1e      	bge.n	8012bfa <__ieee754_atan2+0x102>
 8012bbc:	2f00      	cmp	r7, #0
 8012bbe:	da01      	bge.n	8012bc4 <__ieee754_atan2+0xcc>
 8012bc0:	323c      	adds	r2, #60	; 0x3c
 8012bc2:	db1e      	blt.n	8012c02 <__ieee754_atan2+0x10a>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	f7ed fe40 	bl	800084c <__aeabi_ddiv>
 8012bcc:	ec41 0b10 	vmov	d0, r0, r1
 8012bd0:	f000 f9fa 	bl	8012fc8 <fabs>
 8012bd4:	f000 f858 	bl	8012c88 <atan>
 8012bd8:	ec51 0b10 	vmov	r0, r1, d0
 8012bdc:	2c01      	cmp	r4, #1
 8012bde:	d013      	beq.n	8012c08 <__ieee754_atan2+0x110>
 8012be0:	2c02      	cmp	r4, #2
 8012be2:	d015      	beq.n	8012c10 <__ieee754_atan2+0x118>
 8012be4:	2c00      	cmp	r4, #0
 8012be6:	d0a8      	beq.n	8012b3a <__ieee754_atan2+0x42>
 8012be8:	a317      	add	r3, pc, #92	; (adr r3, 8012c48 <__ieee754_atan2+0x150>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	f7ed fb4b 	bl	8000288 <__aeabi_dsub>
 8012bf2:	a317      	add	r3, pc, #92	; (adr r3, 8012c50 <__ieee754_atan2+0x158>)
 8012bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf8:	e014      	b.n	8012c24 <__ieee754_atan2+0x12c>
 8012bfa:	a117      	add	r1, pc, #92	; (adr r1, 8012c58 <__ieee754_atan2+0x160>)
 8012bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c00:	e7ec      	b.n	8012bdc <__ieee754_atan2+0xe4>
 8012c02:	2000      	movs	r0, #0
 8012c04:	2100      	movs	r1, #0
 8012c06:	e7e9      	b.n	8012bdc <__ieee754_atan2+0xe4>
 8012c08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	e794      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012c10:	a30d      	add	r3, pc, #52	; (adr r3, 8012c48 <__ieee754_atan2+0x150>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	f7ed fb37 	bl	8000288 <__aeabi_dsub>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	a10c      	add	r1, pc, #48	; (adr r1, 8012c50 <__ieee754_atan2+0x158>)
 8012c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c24:	f7ed fb30 	bl	8000288 <__aeabi_dsub>
 8012c28:	e787      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012c2a:	a109      	add	r1, pc, #36	; (adr r1, 8012c50 <__ieee754_atan2+0x158>)
 8012c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c30:	e783      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012c32:	a10b      	add	r1, pc, #44	; (adr r1, 8012c60 <__ieee754_atan2+0x168>)
 8012c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c38:	e77f      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	e77c      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012c40:	a105      	add	r1, pc, #20	; (adr r1, 8012c58 <__ieee754_atan2+0x160>)
 8012c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c46:	e778      	b.n	8012b3a <__ieee754_atan2+0x42>
 8012c48:	33145c07 	.word	0x33145c07
 8012c4c:	3ca1a626 	.word	0x3ca1a626
 8012c50:	54442d18 	.word	0x54442d18
 8012c54:	400921fb 	.word	0x400921fb
 8012c58:	54442d18 	.word	0x54442d18
 8012c5c:	3ff921fb 	.word	0x3ff921fb
 8012c60:	54442d18 	.word	0x54442d18
 8012c64:	3fe921fb 	.word	0x3fe921fb
 8012c68:	080133e8 	.word	0x080133e8
 8012c6c:	08013400 	.word	0x08013400
 8012c70:	54442d18 	.word	0x54442d18
 8012c74:	c00921fb 	.word	0xc00921fb
 8012c78:	54442d18 	.word	0x54442d18
 8012c7c:	bff921fb 	.word	0xbff921fb
 8012c80:	7ff00000 	.word	0x7ff00000
 8012c84:	00000000 	.word	0x00000000

08012c88 <atan>:
 8012c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c8c:	ec55 4b10 	vmov	r4, r5, d0
 8012c90:	4bc3      	ldr	r3, [pc, #780]	; (8012fa0 <atan+0x318>)
 8012c92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c96:	429e      	cmp	r6, r3
 8012c98:	46ab      	mov	fp, r5
 8012c9a:	dd18      	ble.n	8012cce <atan+0x46>
 8012c9c:	4bc1      	ldr	r3, [pc, #772]	; (8012fa4 <atan+0x31c>)
 8012c9e:	429e      	cmp	r6, r3
 8012ca0:	dc01      	bgt.n	8012ca6 <atan+0x1e>
 8012ca2:	d109      	bne.n	8012cb8 <atan+0x30>
 8012ca4:	b144      	cbz	r4, 8012cb8 <atan+0x30>
 8012ca6:	4622      	mov	r2, r4
 8012ca8:	462b      	mov	r3, r5
 8012caa:	4620      	mov	r0, r4
 8012cac:	4629      	mov	r1, r5
 8012cae:	f7ed faed 	bl	800028c <__adddf3>
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	460d      	mov	r5, r1
 8012cb6:	e006      	b.n	8012cc6 <atan+0x3e>
 8012cb8:	f1bb 0f00 	cmp.w	fp, #0
 8012cbc:	f300 8131 	bgt.w	8012f22 <atan+0x29a>
 8012cc0:	a59b      	add	r5, pc, #620	; (adr r5, 8012f30 <atan+0x2a8>)
 8012cc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012cc6:	ec45 4b10 	vmov	d0, r4, r5
 8012cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cce:	4bb6      	ldr	r3, [pc, #728]	; (8012fa8 <atan+0x320>)
 8012cd0:	429e      	cmp	r6, r3
 8012cd2:	dc14      	bgt.n	8012cfe <atan+0x76>
 8012cd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012cd8:	429e      	cmp	r6, r3
 8012cda:	dc0d      	bgt.n	8012cf8 <atan+0x70>
 8012cdc:	a396      	add	r3, pc, #600	; (adr r3, 8012f38 <atan+0x2b0>)
 8012cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce2:	ee10 0a10 	vmov	r0, s0
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	f7ed fad0 	bl	800028c <__adddf3>
 8012cec:	4baf      	ldr	r3, [pc, #700]	; (8012fac <atan+0x324>)
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f7ed ff12 	bl	8000b18 <__aeabi_dcmpgt>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d1e6      	bne.n	8012cc6 <atan+0x3e>
 8012cf8:	f04f 3aff 	mov.w	sl, #4294967295
 8012cfc:	e02b      	b.n	8012d56 <atan+0xce>
 8012cfe:	f000 f963 	bl	8012fc8 <fabs>
 8012d02:	4bab      	ldr	r3, [pc, #684]	; (8012fb0 <atan+0x328>)
 8012d04:	429e      	cmp	r6, r3
 8012d06:	ec55 4b10 	vmov	r4, r5, d0
 8012d0a:	f300 80bf 	bgt.w	8012e8c <atan+0x204>
 8012d0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012d12:	429e      	cmp	r6, r3
 8012d14:	f300 80a0 	bgt.w	8012e58 <atan+0x1d0>
 8012d18:	ee10 2a10 	vmov	r2, s0
 8012d1c:	ee10 0a10 	vmov	r0, s0
 8012d20:	462b      	mov	r3, r5
 8012d22:	4629      	mov	r1, r5
 8012d24:	f7ed fab2 	bl	800028c <__adddf3>
 8012d28:	4ba0      	ldr	r3, [pc, #640]	; (8012fac <atan+0x324>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f7ed faac 	bl	8000288 <__aeabi_dsub>
 8012d30:	2200      	movs	r2, #0
 8012d32:	4606      	mov	r6, r0
 8012d34:	460f      	mov	r7, r1
 8012d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	4629      	mov	r1, r5
 8012d3e:	f7ed faa5 	bl	800028c <__adddf3>
 8012d42:	4602      	mov	r2, r0
 8012d44:	460b      	mov	r3, r1
 8012d46:	4630      	mov	r0, r6
 8012d48:	4639      	mov	r1, r7
 8012d4a:	f7ed fd7f 	bl	800084c <__aeabi_ddiv>
 8012d4e:	f04f 0a00 	mov.w	sl, #0
 8012d52:	4604      	mov	r4, r0
 8012d54:	460d      	mov	r5, r1
 8012d56:	4622      	mov	r2, r4
 8012d58:	462b      	mov	r3, r5
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	4629      	mov	r1, r5
 8012d5e:	f7ed fc4b 	bl	80005f8 <__aeabi_dmul>
 8012d62:	4602      	mov	r2, r0
 8012d64:	460b      	mov	r3, r1
 8012d66:	4680      	mov	r8, r0
 8012d68:	4689      	mov	r9, r1
 8012d6a:	f7ed fc45 	bl	80005f8 <__aeabi_dmul>
 8012d6e:	a374      	add	r3, pc, #464	; (adr r3, 8012f40 <atan+0x2b8>)
 8012d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d74:	4606      	mov	r6, r0
 8012d76:	460f      	mov	r7, r1
 8012d78:	f7ed fc3e 	bl	80005f8 <__aeabi_dmul>
 8012d7c:	a372      	add	r3, pc, #456	; (adr r3, 8012f48 <atan+0x2c0>)
 8012d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d82:	f7ed fa83 	bl	800028c <__adddf3>
 8012d86:	4632      	mov	r2, r6
 8012d88:	463b      	mov	r3, r7
 8012d8a:	f7ed fc35 	bl	80005f8 <__aeabi_dmul>
 8012d8e:	a370      	add	r3, pc, #448	; (adr r3, 8012f50 <atan+0x2c8>)
 8012d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d94:	f7ed fa7a 	bl	800028c <__adddf3>
 8012d98:	4632      	mov	r2, r6
 8012d9a:	463b      	mov	r3, r7
 8012d9c:	f7ed fc2c 	bl	80005f8 <__aeabi_dmul>
 8012da0:	a36d      	add	r3, pc, #436	; (adr r3, 8012f58 <atan+0x2d0>)
 8012da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da6:	f7ed fa71 	bl	800028c <__adddf3>
 8012daa:	4632      	mov	r2, r6
 8012dac:	463b      	mov	r3, r7
 8012dae:	f7ed fc23 	bl	80005f8 <__aeabi_dmul>
 8012db2:	a36b      	add	r3, pc, #428	; (adr r3, 8012f60 <atan+0x2d8>)
 8012db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db8:	f7ed fa68 	bl	800028c <__adddf3>
 8012dbc:	4632      	mov	r2, r6
 8012dbe:	463b      	mov	r3, r7
 8012dc0:	f7ed fc1a 	bl	80005f8 <__aeabi_dmul>
 8012dc4:	a368      	add	r3, pc, #416	; (adr r3, 8012f68 <atan+0x2e0>)
 8012dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dca:	f7ed fa5f 	bl	800028c <__adddf3>
 8012dce:	4642      	mov	r2, r8
 8012dd0:	464b      	mov	r3, r9
 8012dd2:	f7ed fc11 	bl	80005f8 <__aeabi_dmul>
 8012dd6:	a366      	add	r3, pc, #408	; (adr r3, 8012f70 <atan+0x2e8>)
 8012dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ddc:	4680      	mov	r8, r0
 8012dde:	4689      	mov	r9, r1
 8012de0:	4630      	mov	r0, r6
 8012de2:	4639      	mov	r1, r7
 8012de4:	f7ed fc08 	bl	80005f8 <__aeabi_dmul>
 8012de8:	a363      	add	r3, pc, #396	; (adr r3, 8012f78 <atan+0x2f0>)
 8012dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dee:	f7ed fa4b 	bl	8000288 <__aeabi_dsub>
 8012df2:	4632      	mov	r2, r6
 8012df4:	463b      	mov	r3, r7
 8012df6:	f7ed fbff 	bl	80005f8 <__aeabi_dmul>
 8012dfa:	a361      	add	r3, pc, #388	; (adr r3, 8012f80 <atan+0x2f8>)
 8012dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e00:	f7ed fa42 	bl	8000288 <__aeabi_dsub>
 8012e04:	4632      	mov	r2, r6
 8012e06:	463b      	mov	r3, r7
 8012e08:	f7ed fbf6 	bl	80005f8 <__aeabi_dmul>
 8012e0c:	a35e      	add	r3, pc, #376	; (adr r3, 8012f88 <atan+0x300>)
 8012e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e12:	f7ed fa39 	bl	8000288 <__aeabi_dsub>
 8012e16:	4632      	mov	r2, r6
 8012e18:	463b      	mov	r3, r7
 8012e1a:	f7ed fbed 	bl	80005f8 <__aeabi_dmul>
 8012e1e:	a35c      	add	r3, pc, #368	; (adr r3, 8012f90 <atan+0x308>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	f7ed fa30 	bl	8000288 <__aeabi_dsub>
 8012e28:	4632      	mov	r2, r6
 8012e2a:	463b      	mov	r3, r7
 8012e2c:	f7ed fbe4 	bl	80005f8 <__aeabi_dmul>
 8012e30:	4602      	mov	r2, r0
 8012e32:	460b      	mov	r3, r1
 8012e34:	4640      	mov	r0, r8
 8012e36:	4649      	mov	r1, r9
 8012e38:	f7ed fa28 	bl	800028c <__adddf3>
 8012e3c:	4622      	mov	r2, r4
 8012e3e:	462b      	mov	r3, r5
 8012e40:	f7ed fbda 	bl	80005f8 <__aeabi_dmul>
 8012e44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012e48:	4602      	mov	r2, r0
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	d14b      	bne.n	8012ee6 <atan+0x25e>
 8012e4e:	4620      	mov	r0, r4
 8012e50:	4629      	mov	r1, r5
 8012e52:	f7ed fa19 	bl	8000288 <__aeabi_dsub>
 8012e56:	e72c      	b.n	8012cb2 <atan+0x2a>
 8012e58:	ee10 0a10 	vmov	r0, s0
 8012e5c:	4b53      	ldr	r3, [pc, #332]	; (8012fac <atan+0x324>)
 8012e5e:	2200      	movs	r2, #0
 8012e60:	4629      	mov	r1, r5
 8012e62:	f7ed fa11 	bl	8000288 <__aeabi_dsub>
 8012e66:	4b51      	ldr	r3, [pc, #324]	; (8012fac <atan+0x324>)
 8012e68:	4606      	mov	r6, r0
 8012e6a:	460f      	mov	r7, r1
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	4620      	mov	r0, r4
 8012e70:	4629      	mov	r1, r5
 8012e72:	f7ed fa0b 	bl	800028c <__adddf3>
 8012e76:	4602      	mov	r2, r0
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	f7ed fce5 	bl	800084c <__aeabi_ddiv>
 8012e82:	f04f 0a01 	mov.w	sl, #1
 8012e86:	4604      	mov	r4, r0
 8012e88:	460d      	mov	r5, r1
 8012e8a:	e764      	b.n	8012d56 <atan+0xce>
 8012e8c:	4b49      	ldr	r3, [pc, #292]	; (8012fb4 <atan+0x32c>)
 8012e8e:	429e      	cmp	r6, r3
 8012e90:	da1d      	bge.n	8012ece <atan+0x246>
 8012e92:	ee10 0a10 	vmov	r0, s0
 8012e96:	4b48      	ldr	r3, [pc, #288]	; (8012fb8 <atan+0x330>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	4629      	mov	r1, r5
 8012e9c:	f7ed f9f4 	bl	8000288 <__aeabi_dsub>
 8012ea0:	4b45      	ldr	r3, [pc, #276]	; (8012fb8 <atan+0x330>)
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	460f      	mov	r7, r1
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	4629      	mov	r1, r5
 8012eac:	f7ed fba4 	bl	80005f8 <__aeabi_dmul>
 8012eb0:	4b3e      	ldr	r3, [pc, #248]	; (8012fac <atan+0x324>)
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f7ed f9ea 	bl	800028c <__adddf3>
 8012eb8:	4602      	mov	r2, r0
 8012eba:	460b      	mov	r3, r1
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	4639      	mov	r1, r7
 8012ec0:	f7ed fcc4 	bl	800084c <__aeabi_ddiv>
 8012ec4:	f04f 0a02 	mov.w	sl, #2
 8012ec8:	4604      	mov	r4, r0
 8012eca:	460d      	mov	r5, r1
 8012ecc:	e743      	b.n	8012d56 <atan+0xce>
 8012ece:	462b      	mov	r3, r5
 8012ed0:	ee10 2a10 	vmov	r2, s0
 8012ed4:	4939      	ldr	r1, [pc, #228]	; (8012fbc <atan+0x334>)
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	f7ed fcb8 	bl	800084c <__aeabi_ddiv>
 8012edc:	f04f 0a03 	mov.w	sl, #3
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	460d      	mov	r5, r1
 8012ee4:	e737      	b.n	8012d56 <atan+0xce>
 8012ee6:	4b36      	ldr	r3, [pc, #216]	; (8012fc0 <atan+0x338>)
 8012ee8:	4e36      	ldr	r6, [pc, #216]	; (8012fc4 <atan+0x33c>)
 8012eea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef2:	f7ed f9c9 	bl	8000288 <__aeabi_dsub>
 8012ef6:	4622      	mov	r2, r4
 8012ef8:	462b      	mov	r3, r5
 8012efa:	f7ed f9c5 	bl	8000288 <__aeabi_dsub>
 8012efe:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012f02:	4602      	mov	r2, r0
 8012f04:	460b      	mov	r3, r1
 8012f06:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012f0a:	f7ed f9bd 	bl	8000288 <__aeabi_dsub>
 8012f0e:	f1bb 0f00 	cmp.w	fp, #0
 8012f12:	4604      	mov	r4, r0
 8012f14:	460d      	mov	r5, r1
 8012f16:	f6bf aed6 	bge.w	8012cc6 <atan+0x3e>
 8012f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f1e:	461d      	mov	r5, r3
 8012f20:	e6d1      	b.n	8012cc6 <atan+0x3e>
 8012f22:	a51d      	add	r5, pc, #116	; (adr r5, 8012f98 <atan+0x310>)
 8012f24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f28:	e6cd      	b.n	8012cc6 <atan+0x3e>
 8012f2a:	bf00      	nop
 8012f2c:	f3af 8000 	nop.w
 8012f30:	54442d18 	.word	0x54442d18
 8012f34:	bff921fb 	.word	0xbff921fb
 8012f38:	8800759c 	.word	0x8800759c
 8012f3c:	7e37e43c 	.word	0x7e37e43c
 8012f40:	e322da11 	.word	0xe322da11
 8012f44:	3f90ad3a 	.word	0x3f90ad3a
 8012f48:	24760deb 	.word	0x24760deb
 8012f4c:	3fa97b4b 	.word	0x3fa97b4b
 8012f50:	a0d03d51 	.word	0xa0d03d51
 8012f54:	3fb10d66 	.word	0x3fb10d66
 8012f58:	c54c206e 	.word	0xc54c206e
 8012f5c:	3fb745cd 	.word	0x3fb745cd
 8012f60:	920083ff 	.word	0x920083ff
 8012f64:	3fc24924 	.word	0x3fc24924
 8012f68:	5555550d 	.word	0x5555550d
 8012f6c:	3fd55555 	.word	0x3fd55555
 8012f70:	2c6a6c2f 	.word	0x2c6a6c2f
 8012f74:	bfa2b444 	.word	0xbfa2b444
 8012f78:	52defd9a 	.word	0x52defd9a
 8012f7c:	3fadde2d 	.word	0x3fadde2d
 8012f80:	af749a6d 	.word	0xaf749a6d
 8012f84:	3fb3b0f2 	.word	0x3fb3b0f2
 8012f88:	fe231671 	.word	0xfe231671
 8012f8c:	3fbc71c6 	.word	0x3fbc71c6
 8012f90:	9998ebc4 	.word	0x9998ebc4
 8012f94:	3fc99999 	.word	0x3fc99999
 8012f98:	54442d18 	.word	0x54442d18
 8012f9c:	3ff921fb 	.word	0x3ff921fb
 8012fa0:	440fffff 	.word	0x440fffff
 8012fa4:	7ff00000 	.word	0x7ff00000
 8012fa8:	3fdbffff 	.word	0x3fdbffff
 8012fac:	3ff00000 	.word	0x3ff00000
 8012fb0:	3ff2ffff 	.word	0x3ff2ffff
 8012fb4:	40038000 	.word	0x40038000
 8012fb8:	3ff80000 	.word	0x3ff80000
 8012fbc:	bff00000 	.word	0xbff00000
 8012fc0:	08013438 	.word	0x08013438
 8012fc4:	08013418 	.word	0x08013418

08012fc8 <fabs>:
 8012fc8:	ec51 0b10 	vmov	r0, r1, d0
 8012fcc:	ee10 2a10 	vmov	r2, s0
 8012fd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fd4:	ec43 2b10 	vmov	d0, r2, r3
 8012fd8:	4770      	bx	lr
	...

08012fdc <_init>:
 8012fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fde:	bf00      	nop
 8012fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fe2:	bc08      	pop	{r3}
 8012fe4:	469e      	mov	lr, r3
 8012fe6:	4770      	bx	lr

08012fe8 <_fini>:
 8012fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fea:	bf00      	nop
 8012fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fee:	bc08      	pop	{r3}
 8012ff0:	469e      	mov	lr, r3
 8012ff2:	4770      	bx	lr
